;buildInfoPackage: chisel3, version: 3.2.4, scalaVersion: 2.12.10, sbtVersion: 1.3.2
circuit toPositUnpacked : 
  module toPositUnpacked : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip in : UInt<16>, out : {sign : UInt<1>, exponent : UInt<28>, fraction : UInt<12>}}
    
    node _T = bits(io.in, 15, 15) @[Conversion.scala 16:29]
    io.out.sign <= _T @[Conversion.scala 16:21]
    wire others : UInt<15> @[Conversion.scala 17:26]
    node _T_1 = bits(io.in, 14, 0) @[Conversion.scala 18:25]
    node _T_2 = bits(io.out.sign, 0, 0) @[Bitwise.scala 71:15]
    node _T_3 = mux(_T_2, UInt<15>("h07fff"), UInt<15>("h00")) @[Bitwise.scala 71:12]
    node _T_4 = xor(_T_1, _T_3) @[Conversion.scala 18:45]
    node _T_5 = add(_T_4, io.out.sign) @[Conversion.scala 18:82]
    node _T_6 = tail(_T_5, 1) @[Conversion.scala 18:82]
    others <= _T_6 @[Conversion.scala 18:16]
    node _T_7 = shl(UInt<8>("h0ff"), 8) @[Bitwise.scala 101:47]
    node _T_8 = xor(UInt<16>("h0ffff"), _T_7) @[Bitwise.scala 101:21]
    node _T_9 = shr(io.in, 8) @[Bitwise.scala 102:21]
    node _T_10 = and(_T_9, _T_8) @[Bitwise.scala 102:31]
    node _T_11 = bits(io.in, 7, 0) @[Bitwise.scala 102:46]
    node _T_12 = shl(_T_11, 8) @[Bitwise.scala 102:65]
    node _T_13 = not(_T_8) @[Bitwise.scala 102:77]
    node _T_14 = and(_T_12, _T_13) @[Bitwise.scala 102:75]
    node _T_15 = or(_T_10, _T_14) @[Bitwise.scala 102:39]
    node _T_16 = bits(_T_8, 11, 0) @[Bitwise.scala 101:28]
    node _T_17 = shl(_T_16, 4) @[Bitwise.scala 101:47]
    node _T_18 = xor(_T_8, _T_17) @[Bitwise.scala 101:21]
    node _T_19 = shr(_T_15, 4) @[Bitwise.scala 102:21]
    node _T_20 = and(_T_19, _T_18) @[Bitwise.scala 102:31]
    node _T_21 = bits(_T_15, 11, 0) @[Bitwise.scala 102:46]
    node _T_22 = shl(_T_21, 4) @[Bitwise.scala 102:65]
    node _T_23 = not(_T_18) @[Bitwise.scala 102:77]
    node _T_24 = and(_T_22, _T_23) @[Bitwise.scala 102:75]
    node _T_25 = or(_T_20, _T_24) @[Bitwise.scala 102:39]
    node _T_26 = bits(_T_18, 13, 0) @[Bitwise.scala 101:28]
    node _T_27 = shl(_T_26, 2) @[Bitwise.scala 101:47]
    node _T_28 = xor(_T_18, _T_27) @[Bitwise.scala 101:21]
    node _T_29 = shr(_T_25, 2) @[Bitwise.scala 102:21]
    node _T_30 = and(_T_29, _T_28) @[Bitwise.scala 102:31]
    node _T_31 = bits(_T_25, 13, 0) @[Bitwise.scala 102:46]
    node _T_32 = shl(_T_31, 2) @[Bitwise.scala 102:65]
    node _T_33 = not(_T_28) @[Bitwise.scala 102:77]
    node _T_34 = and(_T_32, _T_33) @[Bitwise.scala 102:75]
    node _T_35 = or(_T_30, _T_34) @[Bitwise.scala 102:39]
    node _T_36 = bits(_T_28, 14, 0) @[Bitwise.scala 101:28]
    node _T_37 = shl(_T_36, 1) @[Bitwise.scala 101:47]
    node _T_38 = xor(_T_28, _T_37) @[Bitwise.scala 101:21]
    node _T_39 = shr(_T_35, 1) @[Bitwise.scala 102:21]
    node _T_40 = and(_T_39, _T_38) @[Bitwise.scala 102:31]
    node _T_41 = bits(_T_35, 14, 0) @[Bitwise.scala 102:46]
    node _T_42 = shl(_T_41, 1) @[Bitwise.scala 102:65]
    node _T_43 = not(_T_38) @[Bitwise.scala 102:77]
    node _T_44 = and(_T_42, _T_43) @[Bitwise.scala 102:75]
    node _T_45 = or(_T_40, _T_44) @[Bitwise.scala 102:39]
    io.out.exponent <= _T_45 @[Conversion.scala 20:25]
    io.out.fraction <= others @[Conversion.scala 21:25]
    node _T_46 = bits(reset, 0, 0) @[Conversion.scala 22:15]
    node _T_47 = eq(_T_46, UInt<1>("h00")) @[Conversion.scala 22:15]
    when _T_47 : @[Conversion.scala 22:15]
      printf(clock, UInt<1>(1), "Printing here! %d\n", io.out.sign) @[Conversion.scala 22:15]
      skip @[Conversion.scala 22:15]
    
