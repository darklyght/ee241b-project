;buildInfoPackage: chisel3, version: 3.2.4, scalaVersion: 2.12.10, sbtVersion: 1.3.2
circuit toPositUnpacked : 
  module toPositUnpacked : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip in : UInt<16>, out : {sign : UInt<1>, exponent : UInt<28>, fraction : UInt<12>}}
    
    node _T = bits(io.in, 15, 15) @[Conversion.scala 16:29]
    io.out.sign <= _T @[Conversion.scala 16:21]
    node _T_1 = bits(reset, 0, 0) @[Conversion.scala 17:15]
    node _T_2 = eq(_T_1, UInt<1>("h00")) @[Conversion.scala 17:15]
    when _T_2 : @[Conversion.scala 17:15]
      printf(clock, UInt<1>(1), "%d", io.out.sign) @[Conversion.scala 17:15]
      skip @[Conversion.scala 17:15]
    wire others : UInt<15> @[Conversion.scala 18:26]
    node _T_3 = bits(io.in, 14, 0) @[Conversion.scala 19:25]
    node _T_4 = bits(io.out.sign, 0, 0) @[Bitwise.scala 71:15]
    node _T_5 = mux(_T_4, UInt<15>("h07fff"), UInt<15>("h00")) @[Bitwise.scala 71:12]
    node _T_6 = xor(_T_3, _T_5) @[Conversion.scala 19:45]
    node _T_7 = add(_T_6, io.out.sign) @[Conversion.scala 19:82]
    node _T_8 = tail(_T_7, 1) @[Conversion.scala 19:82]
    others <= _T_8 @[Conversion.scala 19:16]
    node _T_9 = shl(UInt<8>("h0ff"), 8) @[Bitwise.scala 101:47]
    node _T_10 = xor(UInt<16>("h0ffff"), _T_9) @[Bitwise.scala 101:21]
    node _T_11 = shr(io.in, 8) @[Bitwise.scala 102:21]
    node _T_12 = and(_T_11, _T_10) @[Bitwise.scala 102:31]
    node _T_13 = bits(io.in, 7, 0) @[Bitwise.scala 102:46]
    node _T_14 = shl(_T_13, 8) @[Bitwise.scala 102:65]
    node _T_15 = not(_T_10) @[Bitwise.scala 102:77]
    node _T_16 = and(_T_14, _T_15) @[Bitwise.scala 102:75]
    node _T_17 = or(_T_12, _T_16) @[Bitwise.scala 102:39]
    node _T_18 = bits(_T_10, 11, 0) @[Bitwise.scala 101:28]
    node _T_19 = shl(_T_18, 4) @[Bitwise.scala 101:47]
    node _T_20 = xor(_T_10, _T_19) @[Bitwise.scala 101:21]
    node _T_21 = shr(_T_17, 4) @[Bitwise.scala 102:21]
    node _T_22 = and(_T_21, _T_20) @[Bitwise.scala 102:31]
    node _T_23 = bits(_T_17, 11, 0) @[Bitwise.scala 102:46]
    node _T_24 = shl(_T_23, 4) @[Bitwise.scala 102:65]
    node _T_25 = not(_T_20) @[Bitwise.scala 102:77]
    node _T_26 = and(_T_24, _T_25) @[Bitwise.scala 102:75]
    node _T_27 = or(_T_22, _T_26) @[Bitwise.scala 102:39]
    node _T_28 = bits(_T_20, 13, 0) @[Bitwise.scala 101:28]
    node _T_29 = shl(_T_28, 2) @[Bitwise.scala 101:47]
    node _T_30 = xor(_T_20, _T_29) @[Bitwise.scala 101:21]
    node _T_31 = shr(_T_27, 2) @[Bitwise.scala 102:21]
    node _T_32 = and(_T_31, _T_30) @[Bitwise.scala 102:31]
    node _T_33 = bits(_T_27, 13, 0) @[Bitwise.scala 102:46]
    node _T_34 = shl(_T_33, 2) @[Bitwise.scala 102:65]
    node _T_35 = not(_T_30) @[Bitwise.scala 102:77]
    node _T_36 = and(_T_34, _T_35) @[Bitwise.scala 102:75]
    node _T_37 = or(_T_32, _T_36) @[Bitwise.scala 102:39]
    node _T_38 = bits(_T_30, 14, 0) @[Bitwise.scala 101:28]
    node _T_39 = shl(_T_38, 1) @[Bitwise.scala 101:47]
    node _T_40 = xor(_T_30, _T_39) @[Bitwise.scala 101:21]
    node _T_41 = shr(_T_37, 1) @[Bitwise.scala 102:21]
    node _T_42 = and(_T_41, _T_40) @[Bitwise.scala 102:31]
    node _T_43 = bits(_T_37, 14, 0) @[Bitwise.scala 102:46]
    node _T_44 = shl(_T_43, 1) @[Bitwise.scala 102:65]
    node _T_45 = not(_T_40) @[Bitwise.scala 102:77]
    node _T_46 = and(_T_44, _T_45) @[Bitwise.scala 102:75]
    node _T_47 = or(_T_42, _T_46) @[Bitwise.scala 102:39]
    io.out.exponent <= _T_47 @[Conversion.scala 21:25]
    io.out.fraction <= others @[Conversion.scala 22:25]
    
