;buildInfoPackage: chisel3, version: 3.2.4, scalaVersion: 2.12.10, sbtVersion: 1.3.2
circuit linearPositArray : 
  module linearMultiplier : 
    input clock : Clock
    input reset : Reset
    output io : {flip A : {zero : UInt<1>, nan : UInt<1>, sign : UInt<1>, exponent : SInt<6>, fraction : UInt<13>}, flip B : {zero : UInt<1>, nan : UInt<1>, sign : UInt<1>, exponent : SInt<6>, fraction : UInt<13>}, out : {zero : UInt<1>, nan : UInt<1>, number : SInt<129>}}
    
    node exponentSum = add(io.A.exponent, io.B.exponent) @[Multiplier.scala 15:41]
    node fractionProduct = mul(io.A.fraction, io.B.fraction) @[Multiplier.scala 16:45]
    node _T = add(asSInt(UInt<7>("h038")), exponentSum) @[Multiplier.scala 17:34]
    node shift = sub(_T, asSInt(UInt<6>("h018"))) @[Multiplier.scala 17:49]
    node _T_1 = lt(shift, asSInt(UInt<1>("h00"))) @[Multiplier.scala 18:32]
    node _T_2 = sub(asSInt(UInt<1>("h00")), shift) @[Multiplier.scala 18:59]
    node _T_3 = tail(_T_2, 1) @[Multiplier.scala 18:59]
    node _T_4 = asSInt(_T_3) @[Multiplier.scala 18:59]
    node _T_5 = asUInt(_T_4) @[Multiplier.scala 18:67]
    node _T_6 = dshr(fractionProduct, _T_5) @[Multiplier.scala 18:55]
    node _T_7 = asUInt(shift) @[Multiplier.scala 18:100]
    node _T_8 = dshl(fractionProduct, _T_7) @[Multiplier.scala 18:91]
    node number = mux(_T_1, _T_6, _T_8) @[Multiplier.scala 18:25]
    node _T_9 = or(io.A.zero, io.B.zero) @[Multiplier.scala 20:34]
    node _T_10 = sub(asSInt(UInt<1>("h00")), asSInt(UInt<6>("h018"))) @[Multiplier.scala 20:57]
    node _T_11 = tail(_T_10, 1) @[Multiplier.scala 20:57]
    node _T_12 = asSInt(_T_11) @[Multiplier.scala 20:57]
    node _T_13 = lt(shift, _T_12) @[Multiplier.scala 20:55]
    node _T_14 = or(_T_9, _T_13) @[Multiplier.scala 20:46]
    io.out.zero <= _T_14 @[Multiplier.scala 20:21]
    node _T_15 = or(io.A.nan, io.B.nan) @[Multiplier.scala 21:32]
    node _T_16 = geq(shift, asSInt(UInt<8>("h067"))) @[Multiplier.scala 21:52]
    node _T_17 = or(_T_15, _T_16) @[Multiplier.scala 21:43]
    io.out.nan <= _T_17 @[Multiplier.scala 21:20]
    node _T_18 = or(io.out.zero, io.out.nan) @[Multiplier.scala 22:42]
    node _T_19 = xor(io.A.sign, io.B.sign) @[Multiplier.scala 22:76]
    node _T_20 = bits(_T_19, 0, 0) @[Multiplier.scala 22:89]
    node _T_21 = asSInt(number) @[Multiplier.scala 22:105]
    node _T_22 = sub(asSInt(UInt<1>("h00")), _T_21) @[Multiplier.scala 22:97]
    node _T_23 = tail(_T_22, 1) @[Multiplier.scala 22:97]
    node _T_24 = asSInt(_T_23) @[Multiplier.scala 22:97]
    node _T_25 = asSInt(number) @[Multiplier.scala 22:120]
    node _T_26 = mux(_T_20, _T_24, _T_25) @[Multiplier.scala 22:64]
    node _T_27 = mux(_T_18, asSInt(UInt<1>("h00")), _T_26) @[Multiplier.scala 22:29]
    io.out.number <= _T_27 @[Multiplier.scala 22:23]
    
  module linearMultiplierMAC : 
    input clock : Clock
    input reset : Reset
    output io : {flip A : {zero : UInt<1>, nan : UInt<1>, sign : UInt<1>, exponent : SInt<6>, fraction : UInt<13>}, flip B : {zero : UInt<1>, nan : UInt<1>, sign : UInt<1>, exponent : SInt<6>, fraction : UInt<13>}, flip C : {zero : UInt<1>, nan : UInt<1>, number : SInt<129>}, out : {zero : UInt<1>, nan : UInt<1>, number : SInt<129>}}
    
    inst multiplier of linearMultiplier @[Multiplier.scala 33:32]
    multiplier.clock <= clock
    multiplier.reset <= reset
    multiplier.io.A.fraction <= io.A.fraction @[Multiplier.scala 34:25]
    multiplier.io.A.exponent <= io.A.exponent @[Multiplier.scala 34:25]
    multiplier.io.A.sign <= io.A.sign @[Multiplier.scala 34:25]
    multiplier.io.A.nan <= io.A.nan @[Multiplier.scala 34:25]
    multiplier.io.A.zero <= io.A.zero @[Multiplier.scala 34:25]
    multiplier.io.B.fraction <= io.B.fraction @[Multiplier.scala 35:25]
    multiplier.io.B.exponent <= io.B.exponent @[Multiplier.scala 35:25]
    multiplier.io.B.sign <= io.B.sign @[Multiplier.scala 35:25]
    multiplier.io.B.nan <= io.B.nan @[Multiplier.scala 35:25]
    multiplier.io.B.zero <= io.B.zero @[Multiplier.scala 35:25]
    node _T = add(multiplier.io.out.number, io.C.number) @[Multiplier.scala 36:44]
    node _T_1 = tail(_T, 1) @[Multiplier.scala 36:44]
    node sum = asSInt(_T_1) @[Multiplier.scala 36:44]
    node _T_2 = and(multiplier.io.out.zero, io.C.zero) @[Multiplier.scala 37:48]
    node _T_3 = bits(io.C.number, 128, 128) @[Multiplier.scala 37:76]
    node _T_4 = bits(multiplier.io.out.number, 128, 128) @[Multiplier.scala 37:127]
    node _T_5 = eq(_T_3, _T_4) @[Multiplier.scala 37:99]
    node _T_6 = bits(io.C.number, 128, 128) @[Multiplier.scala 37:166]
    node _T_7 = eq(_T_6, UInt<1>("h01")) @[Multiplier.scala 37:189]
    node _T_8 = and(_T_5, _T_7) @[Multiplier.scala 37:151]
    node _T_9 = bits(sum, 128, 128) @[Multiplier.scala 37:205]
    node _T_10 = eq(_T_9, UInt<1>("h00")) @[Multiplier.scala 37:228]
    node _T_11 = and(_T_8, _T_10) @[Multiplier.scala 37:198]
    node _T_12 = or(_T_2, _T_11) @[Multiplier.scala 37:61]
    io.out.zero <= _T_12 @[Multiplier.scala 37:21]
    node _T_13 = or(multiplier.io.out.nan, io.C.nan) @[Multiplier.scala 38:45]
    node _T_14 = bits(io.C.number, 128, 128) @[Multiplier.scala 38:71]
    node _T_15 = bits(multiplier.io.out.number, 128, 128) @[Multiplier.scala 38:122]
    node _T_16 = eq(_T_14, _T_15) @[Multiplier.scala 38:94]
    node _T_17 = bits(io.C.number, 128, 128) @[Multiplier.scala 38:161]
    node _T_18 = eq(_T_17, UInt<1>("h00")) @[Multiplier.scala 38:184]
    node _T_19 = and(_T_16, _T_18) @[Multiplier.scala 38:146]
    node _T_20 = bits(sum, 128, 128) @[Multiplier.scala 38:200]
    node _T_21 = eq(_T_20, UInt<1>("h01")) @[Multiplier.scala 38:223]
    node _T_22 = and(_T_19, _T_21) @[Multiplier.scala 38:193]
    node _T_23 = or(_T_13, _T_22) @[Multiplier.scala 38:56]
    io.out.nan <= _T_23 @[Multiplier.scala 38:20]
    io.out.number <= sum @[Multiplier.scala 39:23]
    
  module linearTile : 
    input clock : Clock
    input reset : Reset
    output io : {flip A_in : {zero : UInt<1>, nan : UInt<1>, sign : UInt<1>, exponent : SInt<6>, fraction : UInt<13>}, flip B_in : {zero : UInt<1>, nan : UInt<1>, sign : UInt<1>, exponent : SInt<6>, fraction : UInt<13>}, flip C_in : {zero : UInt<1>, nan : UInt<1>, number : SInt<129>}, flip prop_in : UInt<1>, A_out : {zero : UInt<1>, nan : UInt<1>, sign : UInt<1>, exponent : SInt<6>, fraction : UInt<13>}, B_out : {zero : UInt<1>, nan : UInt<1>, sign : UInt<1>, exponent : SInt<6>, fraction : UInt<13>}, C_out : {zero : UInt<1>, nan : UInt<1>, number : SInt<129>}, prop_out : UInt<1>}
    
    node _T = not(io.prop_in) @[Tile.scala 22:45]
    reg A0 : {zero : UInt<1>, nan : UInt<1>, sign : UInt<1>, exponent : SInt<6>, fraction : UInt<13>}, clock @[Reg.scala 15:16]
    when _T : @[Reg.scala 16:19]
      A0.fraction <= io.A_in.fraction @[Reg.scala 16:23]
      A0.exponent <= io.A_in.exponent @[Reg.scala 16:23]
      A0.sign <= io.A_in.sign @[Reg.scala 16:23]
      A0.nan <= io.A_in.nan @[Reg.scala 16:23]
      A0.zero <= io.A_in.zero @[Reg.scala 16:23]
      skip @[Reg.scala 16:19]
    reg A1 : {zero : UInt<1>, nan : UInt<1>, sign : UInt<1>, exponent : SInt<6>, fraction : UInt<13>}, clock @[Reg.scala 15:16]
    when io.prop_in : @[Reg.scala 16:19]
      A1.fraction <= io.A_in.fraction @[Reg.scala 16:23]
      A1.exponent <= io.A_in.exponent @[Reg.scala 16:23]
      A1.sign <= io.A_in.sign @[Reg.scala 16:23]
      A1.nan <= io.A_in.nan @[Reg.scala 16:23]
      A1.zero <= io.A_in.zero @[Reg.scala 16:23]
      skip @[Reg.scala 16:19]
    node _T_1 = mux(io.prop_in, A1, A0) @[Tile.scala 25:36]
    reg A : {zero : UInt<1>, nan : UInt<1>, sign : UInt<1>, exponent : SInt<6>, fraction : UInt<13>}, clock @[Tile.scala 25:32]
    A.fraction <= _T_1.fraction @[Tile.scala 25:32]
    A.exponent <= _T_1.exponent @[Tile.scala 25:32]
    A.sign <= _T_1.sign @[Tile.scala 25:32]
    A.nan <= _T_1.nan @[Tile.scala 25:32]
    A.zero <= _T_1.zero @[Tile.scala 25:32]
    reg B : {zero : UInt<1>, nan : UInt<1>, sign : UInt<1>, exponent : SInt<6>, fraction : UInt<13>}, clock @[Tile.scala 26:32]
    B.fraction <= io.B_in.fraction @[Tile.scala 26:32]
    B.exponent <= io.B_in.exponent @[Tile.scala 26:32]
    B.sign <= io.B_in.sign @[Tile.scala 26:32]
    B.nan <= io.B_in.nan @[Tile.scala 26:32]
    B.zero <= io.B_in.zero @[Tile.scala 26:32]
    reg prop : UInt<1>, clock @[Tile.scala 27:35]
    prop <= io.prop_in @[Tile.scala 27:35]
    inst mac of linearMultiplierMAC @[Tile.scala 29:33]
    mac.clock <= clock
    mac.reset <= reset
    node _T_2 = mux(io.prop_in, A0, A1) @[Tile.scala 30:32]
    mac.io.A.fraction <= _T_2.fraction @[Tile.scala 30:26]
    mac.io.A.exponent <= _T_2.exponent @[Tile.scala 30:26]
    mac.io.A.sign <= _T_2.sign @[Tile.scala 30:26]
    mac.io.A.nan <= _T_2.nan @[Tile.scala 30:26]
    mac.io.A.zero <= _T_2.zero @[Tile.scala 30:26]
    mac.io.B.fraction <= io.B_in.fraction @[Tile.scala 31:26]
    mac.io.B.exponent <= io.B_in.exponent @[Tile.scala 31:26]
    mac.io.B.sign <= io.B_in.sign @[Tile.scala 31:26]
    mac.io.B.nan <= io.B_in.nan @[Tile.scala 31:26]
    mac.io.B.zero <= io.B_in.zero @[Tile.scala 31:26]
    mac.io.C.number <= io.C_in.number @[Tile.scala 32:26]
    mac.io.C.nan <= io.C_in.nan @[Tile.scala 32:26]
    mac.io.C.zero <= io.C_in.zero @[Tile.scala 32:26]
    reg C : {zero : UInt<1>, nan : UInt<1>, number : SInt<129>}, clock @[Tile.scala 34:32]
    C.number <= mac.io.out.number @[Tile.scala 34:32]
    C.nan <= mac.io.out.nan @[Tile.scala 34:32]
    C.zero <= mac.io.out.zero @[Tile.scala 34:32]
    io.A_out.fraction <= A.fraction @[Tile.scala 36:26]
    io.A_out.exponent <= A.exponent @[Tile.scala 36:26]
    io.A_out.sign <= A.sign @[Tile.scala 36:26]
    io.A_out.nan <= A.nan @[Tile.scala 36:26]
    io.A_out.zero <= A.zero @[Tile.scala 36:26]
    io.B_out.fraction <= B.fraction @[Tile.scala 37:26]
    io.B_out.exponent <= B.exponent @[Tile.scala 37:26]
    io.B_out.sign <= B.sign @[Tile.scala 37:26]
    io.B_out.nan <= B.nan @[Tile.scala 37:26]
    io.B_out.zero <= B.zero @[Tile.scala 37:26]
    io.C_out.number <= C.number @[Tile.scala 38:26]
    io.C_out.nan <= C.nan @[Tile.scala 38:26]
    io.C_out.zero <= C.zero @[Tile.scala 38:26]
    io.prop_out <= prop @[Tile.scala 39:29]
    
  module linearMultiplier_1 : 
    input clock : Clock
    input reset : Reset
    output io : {flip A : {zero : UInt<1>, nan : UInt<1>, sign : UInt<1>, exponent : SInt<6>, fraction : UInt<13>}, flip B : {zero : UInt<1>, nan : UInt<1>, sign : UInt<1>, exponent : SInt<6>, fraction : UInt<13>}, out : {zero : UInt<1>, nan : UInt<1>, number : SInt<129>}}
    
    node exponentSum = add(io.A.exponent, io.B.exponent) @[Multiplier.scala 15:41]
    node fractionProduct = mul(io.A.fraction, io.B.fraction) @[Multiplier.scala 16:45]
    node _T = add(asSInt(UInt<7>("h038")), exponentSum) @[Multiplier.scala 17:34]
    node shift = sub(_T, asSInt(UInt<6>("h018"))) @[Multiplier.scala 17:49]
    node _T_1 = lt(shift, asSInt(UInt<1>("h00"))) @[Multiplier.scala 18:32]
    node _T_2 = sub(asSInt(UInt<1>("h00")), shift) @[Multiplier.scala 18:59]
    node _T_3 = tail(_T_2, 1) @[Multiplier.scala 18:59]
    node _T_4 = asSInt(_T_3) @[Multiplier.scala 18:59]
    node _T_5 = asUInt(_T_4) @[Multiplier.scala 18:67]
    node _T_6 = dshr(fractionProduct, _T_5) @[Multiplier.scala 18:55]
    node _T_7 = asUInt(shift) @[Multiplier.scala 18:100]
    node _T_8 = dshl(fractionProduct, _T_7) @[Multiplier.scala 18:91]
    node number = mux(_T_1, _T_6, _T_8) @[Multiplier.scala 18:25]
    node _T_9 = or(io.A.zero, io.B.zero) @[Multiplier.scala 20:34]
    node _T_10 = sub(asSInt(UInt<1>("h00")), asSInt(UInt<6>("h018"))) @[Multiplier.scala 20:57]
    node _T_11 = tail(_T_10, 1) @[Multiplier.scala 20:57]
    node _T_12 = asSInt(_T_11) @[Multiplier.scala 20:57]
    node _T_13 = lt(shift, _T_12) @[Multiplier.scala 20:55]
    node _T_14 = or(_T_9, _T_13) @[Multiplier.scala 20:46]
    io.out.zero <= _T_14 @[Multiplier.scala 20:21]
    node _T_15 = or(io.A.nan, io.B.nan) @[Multiplier.scala 21:32]
    node _T_16 = geq(shift, asSInt(UInt<8>("h067"))) @[Multiplier.scala 21:52]
    node _T_17 = or(_T_15, _T_16) @[Multiplier.scala 21:43]
    io.out.nan <= _T_17 @[Multiplier.scala 21:20]
    node _T_18 = or(io.out.zero, io.out.nan) @[Multiplier.scala 22:42]
    node _T_19 = xor(io.A.sign, io.B.sign) @[Multiplier.scala 22:76]
    node _T_20 = bits(_T_19, 0, 0) @[Multiplier.scala 22:89]
    node _T_21 = asSInt(number) @[Multiplier.scala 22:105]
    node _T_22 = sub(asSInt(UInt<1>("h00")), _T_21) @[Multiplier.scala 22:97]
    node _T_23 = tail(_T_22, 1) @[Multiplier.scala 22:97]
    node _T_24 = asSInt(_T_23) @[Multiplier.scala 22:97]
    node _T_25 = asSInt(number) @[Multiplier.scala 22:120]
    node _T_26 = mux(_T_20, _T_24, _T_25) @[Multiplier.scala 22:64]
    node _T_27 = mux(_T_18, asSInt(UInt<1>("h00")), _T_26) @[Multiplier.scala 22:29]
    io.out.number <= _T_27 @[Multiplier.scala 22:23]
    
  module linearMultiplierMAC_1 : 
    input clock : Clock
    input reset : Reset
    output io : {flip A : {zero : UInt<1>, nan : UInt<1>, sign : UInt<1>, exponent : SInt<6>, fraction : UInt<13>}, flip B : {zero : UInt<1>, nan : UInt<1>, sign : UInt<1>, exponent : SInt<6>, fraction : UInt<13>}, flip C : {zero : UInt<1>, nan : UInt<1>, number : SInt<129>}, out : {zero : UInt<1>, nan : UInt<1>, number : SInt<129>}}
    
    inst multiplier of linearMultiplier_1 @[Multiplier.scala 33:32]
    multiplier.clock <= clock
    multiplier.reset <= reset
    multiplier.io.A.fraction <= io.A.fraction @[Multiplier.scala 34:25]
    multiplier.io.A.exponent <= io.A.exponent @[Multiplier.scala 34:25]
    multiplier.io.A.sign <= io.A.sign @[Multiplier.scala 34:25]
    multiplier.io.A.nan <= io.A.nan @[Multiplier.scala 34:25]
    multiplier.io.A.zero <= io.A.zero @[Multiplier.scala 34:25]
    multiplier.io.B.fraction <= io.B.fraction @[Multiplier.scala 35:25]
    multiplier.io.B.exponent <= io.B.exponent @[Multiplier.scala 35:25]
    multiplier.io.B.sign <= io.B.sign @[Multiplier.scala 35:25]
    multiplier.io.B.nan <= io.B.nan @[Multiplier.scala 35:25]
    multiplier.io.B.zero <= io.B.zero @[Multiplier.scala 35:25]
    node _T = add(multiplier.io.out.number, io.C.number) @[Multiplier.scala 36:44]
    node _T_1 = tail(_T, 1) @[Multiplier.scala 36:44]
    node sum = asSInt(_T_1) @[Multiplier.scala 36:44]
    node _T_2 = and(multiplier.io.out.zero, io.C.zero) @[Multiplier.scala 37:48]
    node _T_3 = bits(io.C.number, 128, 128) @[Multiplier.scala 37:76]
    node _T_4 = bits(multiplier.io.out.number, 128, 128) @[Multiplier.scala 37:127]
    node _T_5 = eq(_T_3, _T_4) @[Multiplier.scala 37:99]
    node _T_6 = bits(io.C.number, 128, 128) @[Multiplier.scala 37:166]
    node _T_7 = eq(_T_6, UInt<1>("h01")) @[Multiplier.scala 37:189]
    node _T_8 = and(_T_5, _T_7) @[Multiplier.scala 37:151]
    node _T_9 = bits(sum, 128, 128) @[Multiplier.scala 37:205]
    node _T_10 = eq(_T_9, UInt<1>("h00")) @[Multiplier.scala 37:228]
    node _T_11 = and(_T_8, _T_10) @[Multiplier.scala 37:198]
    node _T_12 = or(_T_2, _T_11) @[Multiplier.scala 37:61]
    io.out.zero <= _T_12 @[Multiplier.scala 37:21]
    node _T_13 = or(multiplier.io.out.nan, io.C.nan) @[Multiplier.scala 38:45]
    node _T_14 = bits(io.C.number, 128, 128) @[Multiplier.scala 38:71]
    node _T_15 = bits(multiplier.io.out.number, 128, 128) @[Multiplier.scala 38:122]
    node _T_16 = eq(_T_14, _T_15) @[Multiplier.scala 38:94]
    node _T_17 = bits(io.C.number, 128, 128) @[Multiplier.scala 38:161]
    node _T_18 = eq(_T_17, UInt<1>("h00")) @[Multiplier.scala 38:184]
    node _T_19 = and(_T_16, _T_18) @[Multiplier.scala 38:146]
    node _T_20 = bits(sum, 128, 128) @[Multiplier.scala 38:200]
    node _T_21 = eq(_T_20, UInt<1>("h01")) @[Multiplier.scala 38:223]
    node _T_22 = and(_T_19, _T_21) @[Multiplier.scala 38:193]
    node _T_23 = or(_T_13, _T_22) @[Multiplier.scala 38:56]
    io.out.nan <= _T_23 @[Multiplier.scala 38:20]
    io.out.number <= sum @[Multiplier.scala 39:23]
    
  module linearTile_1 : 
    input clock : Clock
    input reset : Reset
    output io : {flip A_in : {zero : UInt<1>, nan : UInt<1>, sign : UInt<1>, exponent : SInt<6>, fraction : UInt<13>}, flip B_in : {zero : UInt<1>, nan : UInt<1>, sign : UInt<1>, exponent : SInt<6>, fraction : UInt<13>}, flip C_in : {zero : UInt<1>, nan : UInt<1>, number : SInt<129>}, flip prop_in : UInt<1>, A_out : {zero : UInt<1>, nan : UInt<1>, sign : UInt<1>, exponent : SInt<6>, fraction : UInt<13>}, B_out : {zero : UInt<1>, nan : UInt<1>, sign : UInt<1>, exponent : SInt<6>, fraction : UInt<13>}, C_out : {zero : UInt<1>, nan : UInt<1>, number : SInt<129>}, prop_out : UInt<1>}
    
    node _T = not(io.prop_in) @[Tile.scala 22:45]
    reg A0 : {zero : UInt<1>, nan : UInt<1>, sign : UInt<1>, exponent : SInt<6>, fraction : UInt<13>}, clock @[Reg.scala 15:16]
    when _T : @[Reg.scala 16:19]
      A0.fraction <= io.A_in.fraction @[Reg.scala 16:23]
      A0.exponent <= io.A_in.exponent @[Reg.scala 16:23]
      A0.sign <= io.A_in.sign @[Reg.scala 16:23]
      A0.nan <= io.A_in.nan @[Reg.scala 16:23]
      A0.zero <= io.A_in.zero @[Reg.scala 16:23]
      skip @[Reg.scala 16:19]
    reg A1 : {zero : UInt<1>, nan : UInt<1>, sign : UInt<1>, exponent : SInt<6>, fraction : UInt<13>}, clock @[Reg.scala 15:16]
    when io.prop_in : @[Reg.scala 16:19]
      A1.fraction <= io.A_in.fraction @[Reg.scala 16:23]
      A1.exponent <= io.A_in.exponent @[Reg.scala 16:23]
      A1.sign <= io.A_in.sign @[Reg.scala 16:23]
      A1.nan <= io.A_in.nan @[Reg.scala 16:23]
      A1.zero <= io.A_in.zero @[Reg.scala 16:23]
      skip @[Reg.scala 16:19]
    node _T_1 = mux(io.prop_in, A1, A0) @[Tile.scala 25:36]
    reg A : {zero : UInt<1>, nan : UInt<1>, sign : UInt<1>, exponent : SInt<6>, fraction : UInt<13>}, clock @[Tile.scala 25:32]
    A.fraction <= _T_1.fraction @[Tile.scala 25:32]
    A.exponent <= _T_1.exponent @[Tile.scala 25:32]
    A.sign <= _T_1.sign @[Tile.scala 25:32]
    A.nan <= _T_1.nan @[Tile.scala 25:32]
    A.zero <= _T_1.zero @[Tile.scala 25:32]
    reg B : {zero : UInt<1>, nan : UInt<1>, sign : UInt<1>, exponent : SInt<6>, fraction : UInt<13>}, clock @[Tile.scala 26:32]
    B.fraction <= io.B_in.fraction @[Tile.scala 26:32]
    B.exponent <= io.B_in.exponent @[Tile.scala 26:32]
    B.sign <= io.B_in.sign @[Tile.scala 26:32]
    B.nan <= io.B_in.nan @[Tile.scala 26:32]
    B.zero <= io.B_in.zero @[Tile.scala 26:32]
    reg prop : UInt<1>, clock @[Tile.scala 27:35]
    prop <= io.prop_in @[Tile.scala 27:35]
    inst mac of linearMultiplierMAC_1 @[Tile.scala 29:33]
    mac.clock <= clock
    mac.reset <= reset
    node _T_2 = mux(io.prop_in, A0, A1) @[Tile.scala 30:32]
    mac.io.A.fraction <= _T_2.fraction @[Tile.scala 30:26]
    mac.io.A.exponent <= _T_2.exponent @[Tile.scala 30:26]
    mac.io.A.sign <= _T_2.sign @[Tile.scala 30:26]
    mac.io.A.nan <= _T_2.nan @[Tile.scala 30:26]
    mac.io.A.zero <= _T_2.zero @[Tile.scala 30:26]
    mac.io.B.fraction <= io.B_in.fraction @[Tile.scala 31:26]
    mac.io.B.exponent <= io.B_in.exponent @[Tile.scala 31:26]
    mac.io.B.sign <= io.B_in.sign @[Tile.scala 31:26]
    mac.io.B.nan <= io.B_in.nan @[Tile.scala 31:26]
    mac.io.B.zero <= io.B_in.zero @[Tile.scala 31:26]
    mac.io.C.number <= io.C_in.number @[Tile.scala 32:26]
    mac.io.C.nan <= io.C_in.nan @[Tile.scala 32:26]
    mac.io.C.zero <= io.C_in.zero @[Tile.scala 32:26]
    reg C : {zero : UInt<1>, nan : UInt<1>, number : SInt<129>}, clock @[Tile.scala 34:32]
    C.number <= mac.io.out.number @[Tile.scala 34:32]
    C.nan <= mac.io.out.nan @[Tile.scala 34:32]
    C.zero <= mac.io.out.zero @[Tile.scala 34:32]
    io.A_out.fraction <= A.fraction @[Tile.scala 36:26]
    io.A_out.exponent <= A.exponent @[Tile.scala 36:26]
    io.A_out.sign <= A.sign @[Tile.scala 36:26]
    io.A_out.nan <= A.nan @[Tile.scala 36:26]
    io.A_out.zero <= A.zero @[Tile.scala 36:26]
    io.B_out.fraction <= B.fraction @[Tile.scala 37:26]
    io.B_out.exponent <= B.exponent @[Tile.scala 37:26]
    io.B_out.sign <= B.sign @[Tile.scala 37:26]
    io.B_out.nan <= B.nan @[Tile.scala 37:26]
    io.B_out.zero <= B.zero @[Tile.scala 37:26]
    io.C_out.number <= C.number @[Tile.scala 38:26]
    io.C_out.nan <= C.nan @[Tile.scala 38:26]
    io.C_out.zero <= C.zero @[Tile.scala 38:26]
    io.prop_out <= prop @[Tile.scala 39:29]
    
  module linearMultiplier_2 : 
    input clock : Clock
    input reset : Reset
    output io : {flip A : {zero : UInt<1>, nan : UInt<1>, sign : UInt<1>, exponent : SInt<6>, fraction : UInt<13>}, flip B : {zero : UInt<1>, nan : UInt<1>, sign : UInt<1>, exponent : SInt<6>, fraction : UInt<13>}, out : {zero : UInt<1>, nan : UInt<1>, number : SInt<129>}}
    
    node exponentSum = add(io.A.exponent, io.B.exponent) @[Multiplier.scala 15:41]
    node fractionProduct = mul(io.A.fraction, io.B.fraction) @[Multiplier.scala 16:45]
    node _T = add(asSInt(UInt<7>("h038")), exponentSum) @[Multiplier.scala 17:34]
    node shift = sub(_T, asSInt(UInt<6>("h018"))) @[Multiplier.scala 17:49]
    node _T_1 = lt(shift, asSInt(UInt<1>("h00"))) @[Multiplier.scala 18:32]
    node _T_2 = sub(asSInt(UInt<1>("h00")), shift) @[Multiplier.scala 18:59]
    node _T_3 = tail(_T_2, 1) @[Multiplier.scala 18:59]
    node _T_4 = asSInt(_T_3) @[Multiplier.scala 18:59]
    node _T_5 = asUInt(_T_4) @[Multiplier.scala 18:67]
    node _T_6 = dshr(fractionProduct, _T_5) @[Multiplier.scala 18:55]
    node _T_7 = asUInt(shift) @[Multiplier.scala 18:100]
    node _T_8 = dshl(fractionProduct, _T_7) @[Multiplier.scala 18:91]
    node number = mux(_T_1, _T_6, _T_8) @[Multiplier.scala 18:25]
    node _T_9 = or(io.A.zero, io.B.zero) @[Multiplier.scala 20:34]
    node _T_10 = sub(asSInt(UInt<1>("h00")), asSInt(UInt<6>("h018"))) @[Multiplier.scala 20:57]
    node _T_11 = tail(_T_10, 1) @[Multiplier.scala 20:57]
    node _T_12 = asSInt(_T_11) @[Multiplier.scala 20:57]
    node _T_13 = lt(shift, _T_12) @[Multiplier.scala 20:55]
    node _T_14 = or(_T_9, _T_13) @[Multiplier.scala 20:46]
    io.out.zero <= _T_14 @[Multiplier.scala 20:21]
    node _T_15 = or(io.A.nan, io.B.nan) @[Multiplier.scala 21:32]
    node _T_16 = geq(shift, asSInt(UInt<8>("h067"))) @[Multiplier.scala 21:52]
    node _T_17 = or(_T_15, _T_16) @[Multiplier.scala 21:43]
    io.out.nan <= _T_17 @[Multiplier.scala 21:20]
    node _T_18 = or(io.out.zero, io.out.nan) @[Multiplier.scala 22:42]
    node _T_19 = xor(io.A.sign, io.B.sign) @[Multiplier.scala 22:76]
    node _T_20 = bits(_T_19, 0, 0) @[Multiplier.scala 22:89]
    node _T_21 = asSInt(number) @[Multiplier.scala 22:105]
    node _T_22 = sub(asSInt(UInt<1>("h00")), _T_21) @[Multiplier.scala 22:97]
    node _T_23 = tail(_T_22, 1) @[Multiplier.scala 22:97]
    node _T_24 = asSInt(_T_23) @[Multiplier.scala 22:97]
    node _T_25 = asSInt(number) @[Multiplier.scala 22:120]
    node _T_26 = mux(_T_20, _T_24, _T_25) @[Multiplier.scala 22:64]
    node _T_27 = mux(_T_18, asSInt(UInt<1>("h00")), _T_26) @[Multiplier.scala 22:29]
    io.out.number <= _T_27 @[Multiplier.scala 22:23]
    
  module linearMultiplierMAC_2 : 
    input clock : Clock
    input reset : Reset
    output io : {flip A : {zero : UInt<1>, nan : UInt<1>, sign : UInt<1>, exponent : SInt<6>, fraction : UInt<13>}, flip B : {zero : UInt<1>, nan : UInt<1>, sign : UInt<1>, exponent : SInt<6>, fraction : UInt<13>}, flip C : {zero : UInt<1>, nan : UInt<1>, number : SInt<129>}, out : {zero : UInt<1>, nan : UInt<1>, number : SInt<129>}}
    
    inst multiplier of linearMultiplier_2 @[Multiplier.scala 33:32]
    multiplier.clock <= clock
    multiplier.reset <= reset
    multiplier.io.A.fraction <= io.A.fraction @[Multiplier.scala 34:25]
    multiplier.io.A.exponent <= io.A.exponent @[Multiplier.scala 34:25]
    multiplier.io.A.sign <= io.A.sign @[Multiplier.scala 34:25]
    multiplier.io.A.nan <= io.A.nan @[Multiplier.scala 34:25]
    multiplier.io.A.zero <= io.A.zero @[Multiplier.scala 34:25]
    multiplier.io.B.fraction <= io.B.fraction @[Multiplier.scala 35:25]
    multiplier.io.B.exponent <= io.B.exponent @[Multiplier.scala 35:25]
    multiplier.io.B.sign <= io.B.sign @[Multiplier.scala 35:25]
    multiplier.io.B.nan <= io.B.nan @[Multiplier.scala 35:25]
    multiplier.io.B.zero <= io.B.zero @[Multiplier.scala 35:25]
    node _T = add(multiplier.io.out.number, io.C.number) @[Multiplier.scala 36:44]
    node _T_1 = tail(_T, 1) @[Multiplier.scala 36:44]
    node sum = asSInt(_T_1) @[Multiplier.scala 36:44]
    node _T_2 = and(multiplier.io.out.zero, io.C.zero) @[Multiplier.scala 37:48]
    node _T_3 = bits(io.C.number, 128, 128) @[Multiplier.scala 37:76]
    node _T_4 = bits(multiplier.io.out.number, 128, 128) @[Multiplier.scala 37:127]
    node _T_5 = eq(_T_3, _T_4) @[Multiplier.scala 37:99]
    node _T_6 = bits(io.C.number, 128, 128) @[Multiplier.scala 37:166]
    node _T_7 = eq(_T_6, UInt<1>("h01")) @[Multiplier.scala 37:189]
    node _T_8 = and(_T_5, _T_7) @[Multiplier.scala 37:151]
    node _T_9 = bits(sum, 128, 128) @[Multiplier.scala 37:205]
    node _T_10 = eq(_T_9, UInt<1>("h00")) @[Multiplier.scala 37:228]
    node _T_11 = and(_T_8, _T_10) @[Multiplier.scala 37:198]
    node _T_12 = or(_T_2, _T_11) @[Multiplier.scala 37:61]
    io.out.zero <= _T_12 @[Multiplier.scala 37:21]
    node _T_13 = or(multiplier.io.out.nan, io.C.nan) @[Multiplier.scala 38:45]
    node _T_14 = bits(io.C.number, 128, 128) @[Multiplier.scala 38:71]
    node _T_15 = bits(multiplier.io.out.number, 128, 128) @[Multiplier.scala 38:122]
    node _T_16 = eq(_T_14, _T_15) @[Multiplier.scala 38:94]
    node _T_17 = bits(io.C.number, 128, 128) @[Multiplier.scala 38:161]
    node _T_18 = eq(_T_17, UInt<1>("h00")) @[Multiplier.scala 38:184]
    node _T_19 = and(_T_16, _T_18) @[Multiplier.scala 38:146]
    node _T_20 = bits(sum, 128, 128) @[Multiplier.scala 38:200]
    node _T_21 = eq(_T_20, UInt<1>("h01")) @[Multiplier.scala 38:223]
    node _T_22 = and(_T_19, _T_21) @[Multiplier.scala 38:193]
    node _T_23 = or(_T_13, _T_22) @[Multiplier.scala 38:56]
    io.out.nan <= _T_23 @[Multiplier.scala 38:20]
    io.out.number <= sum @[Multiplier.scala 39:23]
    
  module linearTile_2 : 
    input clock : Clock
    input reset : Reset
    output io : {flip A_in : {zero : UInt<1>, nan : UInt<1>, sign : UInt<1>, exponent : SInt<6>, fraction : UInt<13>}, flip B_in : {zero : UInt<1>, nan : UInt<1>, sign : UInt<1>, exponent : SInt<6>, fraction : UInt<13>}, flip C_in : {zero : UInt<1>, nan : UInt<1>, number : SInt<129>}, flip prop_in : UInt<1>, A_out : {zero : UInt<1>, nan : UInt<1>, sign : UInt<1>, exponent : SInt<6>, fraction : UInt<13>}, B_out : {zero : UInt<1>, nan : UInt<1>, sign : UInt<1>, exponent : SInt<6>, fraction : UInt<13>}, C_out : {zero : UInt<1>, nan : UInt<1>, number : SInt<129>}, prop_out : UInt<1>}
    
    node _T = not(io.prop_in) @[Tile.scala 22:45]
    reg A0 : {zero : UInt<1>, nan : UInt<1>, sign : UInt<1>, exponent : SInt<6>, fraction : UInt<13>}, clock @[Reg.scala 15:16]
    when _T : @[Reg.scala 16:19]
      A0.fraction <= io.A_in.fraction @[Reg.scala 16:23]
      A0.exponent <= io.A_in.exponent @[Reg.scala 16:23]
      A0.sign <= io.A_in.sign @[Reg.scala 16:23]
      A0.nan <= io.A_in.nan @[Reg.scala 16:23]
      A0.zero <= io.A_in.zero @[Reg.scala 16:23]
      skip @[Reg.scala 16:19]
    reg A1 : {zero : UInt<1>, nan : UInt<1>, sign : UInt<1>, exponent : SInt<6>, fraction : UInt<13>}, clock @[Reg.scala 15:16]
    when io.prop_in : @[Reg.scala 16:19]
      A1.fraction <= io.A_in.fraction @[Reg.scala 16:23]
      A1.exponent <= io.A_in.exponent @[Reg.scala 16:23]
      A1.sign <= io.A_in.sign @[Reg.scala 16:23]
      A1.nan <= io.A_in.nan @[Reg.scala 16:23]
      A1.zero <= io.A_in.zero @[Reg.scala 16:23]
      skip @[Reg.scala 16:19]
    node _T_1 = mux(io.prop_in, A1, A0) @[Tile.scala 25:36]
    reg A : {zero : UInt<1>, nan : UInt<1>, sign : UInt<1>, exponent : SInt<6>, fraction : UInt<13>}, clock @[Tile.scala 25:32]
    A.fraction <= _T_1.fraction @[Tile.scala 25:32]
    A.exponent <= _T_1.exponent @[Tile.scala 25:32]
    A.sign <= _T_1.sign @[Tile.scala 25:32]
    A.nan <= _T_1.nan @[Tile.scala 25:32]
    A.zero <= _T_1.zero @[Tile.scala 25:32]
    reg B : {zero : UInt<1>, nan : UInt<1>, sign : UInt<1>, exponent : SInt<6>, fraction : UInt<13>}, clock @[Tile.scala 26:32]
    B.fraction <= io.B_in.fraction @[Tile.scala 26:32]
    B.exponent <= io.B_in.exponent @[Tile.scala 26:32]
    B.sign <= io.B_in.sign @[Tile.scala 26:32]
    B.nan <= io.B_in.nan @[Tile.scala 26:32]
    B.zero <= io.B_in.zero @[Tile.scala 26:32]
    reg prop : UInt<1>, clock @[Tile.scala 27:35]
    prop <= io.prop_in @[Tile.scala 27:35]
    inst mac of linearMultiplierMAC_2 @[Tile.scala 29:33]
    mac.clock <= clock
    mac.reset <= reset
    node _T_2 = mux(io.prop_in, A0, A1) @[Tile.scala 30:32]
    mac.io.A.fraction <= _T_2.fraction @[Tile.scala 30:26]
    mac.io.A.exponent <= _T_2.exponent @[Tile.scala 30:26]
    mac.io.A.sign <= _T_2.sign @[Tile.scala 30:26]
    mac.io.A.nan <= _T_2.nan @[Tile.scala 30:26]
    mac.io.A.zero <= _T_2.zero @[Tile.scala 30:26]
    mac.io.B.fraction <= io.B_in.fraction @[Tile.scala 31:26]
    mac.io.B.exponent <= io.B_in.exponent @[Tile.scala 31:26]
    mac.io.B.sign <= io.B_in.sign @[Tile.scala 31:26]
    mac.io.B.nan <= io.B_in.nan @[Tile.scala 31:26]
    mac.io.B.zero <= io.B_in.zero @[Tile.scala 31:26]
    mac.io.C.number <= io.C_in.number @[Tile.scala 32:26]
    mac.io.C.nan <= io.C_in.nan @[Tile.scala 32:26]
    mac.io.C.zero <= io.C_in.zero @[Tile.scala 32:26]
    reg C : {zero : UInt<1>, nan : UInt<1>, number : SInt<129>}, clock @[Tile.scala 34:32]
    C.number <= mac.io.out.number @[Tile.scala 34:32]
    C.nan <= mac.io.out.nan @[Tile.scala 34:32]
    C.zero <= mac.io.out.zero @[Tile.scala 34:32]
    io.A_out.fraction <= A.fraction @[Tile.scala 36:26]
    io.A_out.exponent <= A.exponent @[Tile.scala 36:26]
    io.A_out.sign <= A.sign @[Tile.scala 36:26]
    io.A_out.nan <= A.nan @[Tile.scala 36:26]
    io.A_out.zero <= A.zero @[Tile.scala 36:26]
    io.B_out.fraction <= B.fraction @[Tile.scala 37:26]
    io.B_out.exponent <= B.exponent @[Tile.scala 37:26]
    io.B_out.sign <= B.sign @[Tile.scala 37:26]
    io.B_out.nan <= B.nan @[Tile.scala 37:26]
    io.B_out.zero <= B.zero @[Tile.scala 37:26]
    io.C_out.number <= C.number @[Tile.scala 38:26]
    io.C_out.nan <= C.nan @[Tile.scala 38:26]
    io.C_out.zero <= C.zero @[Tile.scala 38:26]
    io.prop_out <= prop @[Tile.scala 39:29]
    
  module linearMultiplier_3 : 
    input clock : Clock
    input reset : Reset
    output io : {flip A : {zero : UInt<1>, nan : UInt<1>, sign : UInt<1>, exponent : SInt<6>, fraction : UInt<13>}, flip B : {zero : UInt<1>, nan : UInt<1>, sign : UInt<1>, exponent : SInt<6>, fraction : UInt<13>}, out : {zero : UInt<1>, nan : UInt<1>, number : SInt<129>}}
    
    node exponentSum = add(io.A.exponent, io.B.exponent) @[Multiplier.scala 15:41]
    node fractionProduct = mul(io.A.fraction, io.B.fraction) @[Multiplier.scala 16:45]
    node _T = add(asSInt(UInt<7>("h038")), exponentSum) @[Multiplier.scala 17:34]
    node shift = sub(_T, asSInt(UInt<6>("h018"))) @[Multiplier.scala 17:49]
    node _T_1 = lt(shift, asSInt(UInt<1>("h00"))) @[Multiplier.scala 18:32]
    node _T_2 = sub(asSInt(UInt<1>("h00")), shift) @[Multiplier.scala 18:59]
    node _T_3 = tail(_T_2, 1) @[Multiplier.scala 18:59]
    node _T_4 = asSInt(_T_3) @[Multiplier.scala 18:59]
    node _T_5 = asUInt(_T_4) @[Multiplier.scala 18:67]
    node _T_6 = dshr(fractionProduct, _T_5) @[Multiplier.scala 18:55]
    node _T_7 = asUInt(shift) @[Multiplier.scala 18:100]
    node _T_8 = dshl(fractionProduct, _T_7) @[Multiplier.scala 18:91]
    node number = mux(_T_1, _T_6, _T_8) @[Multiplier.scala 18:25]
    node _T_9 = or(io.A.zero, io.B.zero) @[Multiplier.scala 20:34]
    node _T_10 = sub(asSInt(UInt<1>("h00")), asSInt(UInt<6>("h018"))) @[Multiplier.scala 20:57]
    node _T_11 = tail(_T_10, 1) @[Multiplier.scala 20:57]
    node _T_12 = asSInt(_T_11) @[Multiplier.scala 20:57]
    node _T_13 = lt(shift, _T_12) @[Multiplier.scala 20:55]
    node _T_14 = or(_T_9, _T_13) @[Multiplier.scala 20:46]
    io.out.zero <= _T_14 @[Multiplier.scala 20:21]
    node _T_15 = or(io.A.nan, io.B.nan) @[Multiplier.scala 21:32]
    node _T_16 = geq(shift, asSInt(UInt<8>("h067"))) @[Multiplier.scala 21:52]
    node _T_17 = or(_T_15, _T_16) @[Multiplier.scala 21:43]
    io.out.nan <= _T_17 @[Multiplier.scala 21:20]
    node _T_18 = or(io.out.zero, io.out.nan) @[Multiplier.scala 22:42]
    node _T_19 = xor(io.A.sign, io.B.sign) @[Multiplier.scala 22:76]
    node _T_20 = bits(_T_19, 0, 0) @[Multiplier.scala 22:89]
    node _T_21 = asSInt(number) @[Multiplier.scala 22:105]
    node _T_22 = sub(asSInt(UInt<1>("h00")), _T_21) @[Multiplier.scala 22:97]
    node _T_23 = tail(_T_22, 1) @[Multiplier.scala 22:97]
    node _T_24 = asSInt(_T_23) @[Multiplier.scala 22:97]
    node _T_25 = asSInt(number) @[Multiplier.scala 22:120]
    node _T_26 = mux(_T_20, _T_24, _T_25) @[Multiplier.scala 22:64]
    node _T_27 = mux(_T_18, asSInt(UInt<1>("h00")), _T_26) @[Multiplier.scala 22:29]
    io.out.number <= _T_27 @[Multiplier.scala 22:23]
    
  module linearMultiplierMAC_3 : 
    input clock : Clock
    input reset : Reset
    output io : {flip A : {zero : UInt<1>, nan : UInt<1>, sign : UInt<1>, exponent : SInt<6>, fraction : UInt<13>}, flip B : {zero : UInt<1>, nan : UInt<1>, sign : UInt<1>, exponent : SInt<6>, fraction : UInt<13>}, flip C : {zero : UInt<1>, nan : UInt<1>, number : SInt<129>}, out : {zero : UInt<1>, nan : UInt<1>, number : SInt<129>}}
    
    inst multiplier of linearMultiplier_3 @[Multiplier.scala 33:32]
    multiplier.clock <= clock
    multiplier.reset <= reset
    multiplier.io.A.fraction <= io.A.fraction @[Multiplier.scala 34:25]
    multiplier.io.A.exponent <= io.A.exponent @[Multiplier.scala 34:25]
    multiplier.io.A.sign <= io.A.sign @[Multiplier.scala 34:25]
    multiplier.io.A.nan <= io.A.nan @[Multiplier.scala 34:25]
    multiplier.io.A.zero <= io.A.zero @[Multiplier.scala 34:25]
    multiplier.io.B.fraction <= io.B.fraction @[Multiplier.scala 35:25]
    multiplier.io.B.exponent <= io.B.exponent @[Multiplier.scala 35:25]
    multiplier.io.B.sign <= io.B.sign @[Multiplier.scala 35:25]
    multiplier.io.B.nan <= io.B.nan @[Multiplier.scala 35:25]
    multiplier.io.B.zero <= io.B.zero @[Multiplier.scala 35:25]
    node _T = add(multiplier.io.out.number, io.C.number) @[Multiplier.scala 36:44]
    node _T_1 = tail(_T, 1) @[Multiplier.scala 36:44]
    node sum = asSInt(_T_1) @[Multiplier.scala 36:44]
    node _T_2 = and(multiplier.io.out.zero, io.C.zero) @[Multiplier.scala 37:48]
    node _T_3 = bits(io.C.number, 128, 128) @[Multiplier.scala 37:76]
    node _T_4 = bits(multiplier.io.out.number, 128, 128) @[Multiplier.scala 37:127]
    node _T_5 = eq(_T_3, _T_4) @[Multiplier.scala 37:99]
    node _T_6 = bits(io.C.number, 128, 128) @[Multiplier.scala 37:166]
    node _T_7 = eq(_T_6, UInt<1>("h01")) @[Multiplier.scala 37:189]
    node _T_8 = and(_T_5, _T_7) @[Multiplier.scala 37:151]
    node _T_9 = bits(sum, 128, 128) @[Multiplier.scala 37:205]
    node _T_10 = eq(_T_9, UInt<1>("h00")) @[Multiplier.scala 37:228]
    node _T_11 = and(_T_8, _T_10) @[Multiplier.scala 37:198]
    node _T_12 = or(_T_2, _T_11) @[Multiplier.scala 37:61]
    io.out.zero <= _T_12 @[Multiplier.scala 37:21]
    node _T_13 = or(multiplier.io.out.nan, io.C.nan) @[Multiplier.scala 38:45]
    node _T_14 = bits(io.C.number, 128, 128) @[Multiplier.scala 38:71]
    node _T_15 = bits(multiplier.io.out.number, 128, 128) @[Multiplier.scala 38:122]
    node _T_16 = eq(_T_14, _T_15) @[Multiplier.scala 38:94]
    node _T_17 = bits(io.C.number, 128, 128) @[Multiplier.scala 38:161]
    node _T_18 = eq(_T_17, UInt<1>("h00")) @[Multiplier.scala 38:184]
    node _T_19 = and(_T_16, _T_18) @[Multiplier.scala 38:146]
    node _T_20 = bits(sum, 128, 128) @[Multiplier.scala 38:200]
    node _T_21 = eq(_T_20, UInt<1>("h01")) @[Multiplier.scala 38:223]
    node _T_22 = and(_T_19, _T_21) @[Multiplier.scala 38:193]
    node _T_23 = or(_T_13, _T_22) @[Multiplier.scala 38:56]
    io.out.nan <= _T_23 @[Multiplier.scala 38:20]
    io.out.number <= sum @[Multiplier.scala 39:23]
    
  module linearTile_3 : 
    input clock : Clock
    input reset : Reset
    output io : {flip A_in : {zero : UInt<1>, nan : UInt<1>, sign : UInt<1>, exponent : SInt<6>, fraction : UInt<13>}, flip B_in : {zero : UInt<1>, nan : UInt<1>, sign : UInt<1>, exponent : SInt<6>, fraction : UInt<13>}, flip C_in : {zero : UInt<1>, nan : UInt<1>, number : SInt<129>}, flip prop_in : UInt<1>, A_out : {zero : UInt<1>, nan : UInt<1>, sign : UInt<1>, exponent : SInt<6>, fraction : UInt<13>}, B_out : {zero : UInt<1>, nan : UInt<1>, sign : UInt<1>, exponent : SInt<6>, fraction : UInt<13>}, C_out : {zero : UInt<1>, nan : UInt<1>, number : SInt<129>}, prop_out : UInt<1>}
    
    node _T = not(io.prop_in) @[Tile.scala 22:45]
    reg A0 : {zero : UInt<1>, nan : UInt<1>, sign : UInt<1>, exponent : SInt<6>, fraction : UInt<13>}, clock @[Reg.scala 15:16]
    when _T : @[Reg.scala 16:19]
      A0.fraction <= io.A_in.fraction @[Reg.scala 16:23]
      A0.exponent <= io.A_in.exponent @[Reg.scala 16:23]
      A0.sign <= io.A_in.sign @[Reg.scala 16:23]
      A0.nan <= io.A_in.nan @[Reg.scala 16:23]
      A0.zero <= io.A_in.zero @[Reg.scala 16:23]
      skip @[Reg.scala 16:19]
    reg A1 : {zero : UInt<1>, nan : UInt<1>, sign : UInt<1>, exponent : SInt<6>, fraction : UInt<13>}, clock @[Reg.scala 15:16]
    when io.prop_in : @[Reg.scala 16:19]
      A1.fraction <= io.A_in.fraction @[Reg.scala 16:23]
      A1.exponent <= io.A_in.exponent @[Reg.scala 16:23]
      A1.sign <= io.A_in.sign @[Reg.scala 16:23]
      A1.nan <= io.A_in.nan @[Reg.scala 16:23]
      A1.zero <= io.A_in.zero @[Reg.scala 16:23]
      skip @[Reg.scala 16:19]
    node _T_1 = mux(io.prop_in, A1, A0) @[Tile.scala 25:36]
    reg A : {zero : UInt<1>, nan : UInt<1>, sign : UInt<1>, exponent : SInt<6>, fraction : UInt<13>}, clock @[Tile.scala 25:32]
    A.fraction <= _T_1.fraction @[Tile.scala 25:32]
    A.exponent <= _T_1.exponent @[Tile.scala 25:32]
    A.sign <= _T_1.sign @[Tile.scala 25:32]
    A.nan <= _T_1.nan @[Tile.scala 25:32]
    A.zero <= _T_1.zero @[Tile.scala 25:32]
    reg B : {zero : UInt<1>, nan : UInt<1>, sign : UInt<1>, exponent : SInt<6>, fraction : UInt<13>}, clock @[Tile.scala 26:32]
    B.fraction <= io.B_in.fraction @[Tile.scala 26:32]
    B.exponent <= io.B_in.exponent @[Tile.scala 26:32]
    B.sign <= io.B_in.sign @[Tile.scala 26:32]
    B.nan <= io.B_in.nan @[Tile.scala 26:32]
    B.zero <= io.B_in.zero @[Tile.scala 26:32]
    reg prop : UInt<1>, clock @[Tile.scala 27:35]
    prop <= io.prop_in @[Tile.scala 27:35]
    inst mac of linearMultiplierMAC_3 @[Tile.scala 29:33]
    mac.clock <= clock
    mac.reset <= reset
    node _T_2 = mux(io.prop_in, A0, A1) @[Tile.scala 30:32]
    mac.io.A.fraction <= _T_2.fraction @[Tile.scala 30:26]
    mac.io.A.exponent <= _T_2.exponent @[Tile.scala 30:26]
    mac.io.A.sign <= _T_2.sign @[Tile.scala 30:26]
    mac.io.A.nan <= _T_2.nan @[Tile.scala 30:26]
    mac.io.A.zero <= _T_2.zero @[Tile.scala 30:26]
    mac.io.B.fraction <= io.B_in.fraction @[Tile.scala 31:26]
    mac.io.B.exponent <= io.B_in.exponent @[Tile.scala 31:26]
    mac.io.B.sign <= io.B_in.sign @[Tile.scala 31:26]
    mac.io.B.nan <= io.B_in.nan @[Tile.scala 31:26]
    mac.io.B.zero <= io.B_in.zero @[Tile.scala 31:26]
    mac.io.C.number <= io.C_in.number @[Tile.scala 32:26]
    mac.io.C.nan <= io.C_in.nan @[Tile.scala 32:26]
    mac.io.C.zero <= io.C_in.zero @[Tile.scala 32:26]
    reg C : {zero : UInt<1>, nan : UInt<1>, number : SInt<129>}, clock @[Tile.scala 34:32]
    C.number <= mac.io.out.number @[Tile.scala 34:32]
    C.nan <= mac.io.out.nan @[Tile.scala 34:32]
    C.zero <= mac.io.out.zero @[Tile.scala 34:32]
    io.A_out.fraction <= A.fraction @[Tile.scala 36:26]
    io.A_out.exponent <= A.exponent @[Tile.scala 36:26]
    io.A_out.sign <= A.sign @[Tile.scala 36:26]
    io.A_out.nan <= A.nan @[Tile.scala 36:26]
    io.A_out.zero <= A.zero @[Tile.scala 36:26]
    io.B_out.fraction <= B.fraction @[Tile.scala 37:26]
    io.B_out.exponent <= B.exponent @[Tile.scala 37:26]
    io.B_out.sign <= B.sign @[Tile.scala 37:26]
    io.B_out.nan <= B.nan @[Tile.scala 37:26]
    io.B_out.zero <= B.zero @[Tile.scala 37:26]
    io.C_out.number <= C.number @[Tile.scala 38:26]
    io.C_out.nan <= C.nan @[Tile.scala 38:26]
    io.C_out.zero <= C.zero @[Tile.scala 38:26]
    io.prop_out <= prop @[Tile.scala 39:29]
    
  module linearMultiplier_4 : 
    input clock : Clock
    input reset : Reset
    output io : {flip A : {zero : UInt<1>, nan : UInt<1>, sign : UInt<1>, exponent : SInt<6>, fraction : UInt<13>}, flip B : {zero : UInt<1>, nan : UInt<1>, sign : UInt<1>, exponent : SInt<6>, fraction : UInt<13>}, out : {zero : UInt<1>, nan : UInt<1>, number : SInt<129>}}
    
    node exponentSum = add(io.A.exponent, io.B.exponent) @[Multiplier.scala 15:41]
    node fractionProduct = mul(io.A.fraction, io.B.fraction) @[Multiplier.scala 16:45]
    node _T = add(asSInt(UInt<7>("h038")), exponentSum) @[Multiplier.scala 17:34]
    node shift = sub(_T, asSInt(UInt<6>("h018"))) @[Multiplier.scala 17:49]
    node _T_1 = lt(shift, asSInt(UInt<1>("h00"))) @[Multiplier.scala 18:32]
    node _T_2 = sub(asSInt(UInt<1>("h00")), shift) @[Multiplier.scala 18:59]
    node _T_3 = tail(_T_2, 1) @[Multiplier.scala 18:59]
    node _T_4 = asSInt(_T_3) @[Multiplier.scala 18:59]
    node _T_5 = asUInt(_T_4) @[Multiplier.scala 18:67]
    node _T_6 = dshr(fractionProduct, _T_5) @[Multiplier.scala 18:55]
    node _T_7 = asUInt(shift) @[Multiplier.scala 18:100]
    node _T_8 = dshl(fractionProduct, _T_7) @[Multiplier.scala 18:91]
    node number = mux(_T_1, _T_6, _T_8) @[Multiplier.scala 18:25]
    node _T_9 = or(io.A.zero, io.B.zero) @[Multiplier.scala 20:34]
    node _T_10 = sub(asSInt(UInt<1>("h00")), asSInt(UInt<6>("h018"))) @[Multiplier.scala 20:57]
    node _T_11 = tail(_T_10, 1) @[Multiplier.scala 20:57]
    node _T_12 = asSInt(_T_11) @[Multiplier.scala 20:57]
    node _T_13 = lt(shift, _T_12) @[Multiplier.scala 20:55]
    node _T_14 = or(_T_9, _T_13) @[Multiplier.scala 20:46]
    io.out.zero <= _T_14 @[Multiplier.scala 20:21]
    node _T_15 = or(io.A.nan, io.B.nan) @[Multiplier.scala 21:32]
    node _T_16 = geq(shift, asSInt(UInt<8>("h067"))) @[Multiplier.scala 21:52]
    node _T_17 = or(_T_15, _T_16) @[Multiplier.scala 21:43]
    io.out.nan <= _T_17 @[Multiplier.scala 21:20]
    node _T_18 = or(io.out.zero, io.out.nan) @[Multiplier.scala 22:42]
    node _T_19 = xor(io.A.sign, io.B.sign) @[Multiplier.scala 22:76]
    node _T_20 = bits(_T_19, 0, 0) @[Multiplier.scala 22:89]
    node _T_21 = asSInt(number) @[Multiplier.scala 22:105]
    node _T_22 = sub(asSInt(UInt<1>("h00")), _T_21) @[Multiplier.scala 22:97]
    node _T_23 = tail(_T_22, 1) @[Multiplier.scala 22:97]
    node _T_24 = asSInt(_T_23) @[Multiplier.scala 22:97]
    node _T_25 = asSInt(number) @[Multiplier.scala 22:120]
    node _T_26 = mux(_T_20, _T_24, _T_25) @[Multiplier.scala 22:64]
    node _T_27 = mux(_T_18, asSInt(UInt<1>("h00")), _T_26) @[Multiplier.scala 22:29]
    io.out.number <= _T_27 @[Multiplier.scala 22:23]
    
  module linearMultiplierMAC_4 : 
    input clock : Clock
    input reset : Reset
    output io : {flip A : {zero : UInt<1>, nan : UInt<1>, sign : UInt<1>, exponent : SInt<6>, fraction : UInt<13>}, flip B : {zero : UInt<1>, nan : UInt<1>, sign : UInt<1>, exponent : SInt<6>, fraction : UInt<13>}, flip C : {zero : UInt<1>, nan : UInt<1>, number : SInt<129>}, out : {zero : UInt<1>, nan : UInt<1>, number : SInt<129>}}
    
    inst multiplier of linearMultiplier_4 @[Multiplier.scala 33:32]
    multiplier.clock <= clock
    multiplier.reset <= reset
    multiplier.io.A.fraction <= io.A.fraction @[Multiplier.scala 34:25]
    multiplier.io.A.exponent <= io.A.exponent @[Multiplier.scala 34:25]
    multiplier.io.A.sign <= io.A.sign @[Multiplier.scala 34:25]
    multiplier.io.A.nan <= io.A.nan @[Multiplier.scala 34:25]
    multiplier.io.A.zero <= io.A.zero @[Multiplier.scala 34:25]
    multiplier.io.B.fraction <= io.B.fraction @[Multiplier.scala 35:25]
    multiplier.io.B.exponent <= io.B.exponent @[Multiplier.scala 35:25]
    multiplier.io.B.sign <= io.B.sign @[Multiplier.scala 35:25]
    multiplier.io.B.nan <= io.B.nan @[Multiplier.scala 35:25]
    multiplier.io.B.zero <= io.B.zero @[Multiplier.scala 35:25]
    node _T = add(multiplier.io.out.number, io.C.number) @[Multiplier.scala 36:44]
    node _T_1 = tail(_T, 1) @[Multiplier.scala 36:44]
    node sum = asSInt(_T_1) @[Multiplier.scala 36:44]
    node _T_2 = and(multiplier.io.out.zero, io.C.zero) @[Multiplier.scala 37:48]
    node _T_3 = bits(io.C.number, 128, 128) @[Multiplier.scala 37:76]
    node _T_4 = bits(multiplier.io.out.number, 128, 128) @[Multiplier.scala 37:127]
    node _T_5 = eq(_T_3, _T_4) @[Multiplier.scala 37:99]
    node _T_6 = bits(io.C.number, 128, 128) @[Multiplier.scala 37:166]
    node _T_7 = eq(_T_6, UInt<1>("h01")) @[Multiplier.scala 37:189]
    node _T_8 = and(_T_5, _T_7) @[Multiplier.scala 37:151]
    node _T_9 = bits(sum, 128, 128) @[Multiplier.scala 37:205]
    node _T_10 = eq(_T_9, UInt<1>("h00")) @[Multiplier.scala 37:228]
    node _T_11 = and(_T_8, _T_10) @[Multiplier.scala 37:198]
    node _T_12 = or(_T_2, _T_11) @[Multiplier.scala 37:61]
    io.out.zero <= _T_12 @[Multiplier.scala 37:21]
    node _T_13 = or(multiplier.io.out.nan, io.C.nan) @[Multiplier.scala 38:45]
    node _T_14 = bits(io.C.number, 128, 128) @[Multiplier.scala 38:71]
    node _T_15 = bits(multiplier.io.out.number, 128, 128) @[Multiplier.scala 38:122]
    node _T_16 = eq(_T_14, _T_15) @[Multiplier.scala 38:94]
    node _T_17 = bits(io.C.number, 128, 128) @[Multiplier.scala 38:161]
    node _T_18 = eq(_T_17, UInt<1>("h00")) @[Multiplier.scala 38:184]
    node _T_19 = and(_T_16, _T_18) @[Multiplier.scala 38:146]
    node _T_20 = bits(sum, 128, 128) @[Multiplier.scala 38:200]
    node _T_21 = eq(_T_20, UInt<1>("h01")) @[Multiplier.scala 38:223]
    node _T_22 = and(_T_19, _T_21) @[Multiplier.scala 38:193]
    node _T_23 = or(_T_13, _T_22) @[Multiplier.scala 38:56]
    io.out.nan <= _T_23 @[Multiplier.scala 38:20]
    io.out.number <= sum @[Multiplier.scala 39:23]
    
  module linearTile_4 : 
    input clock : Clock
    input reset : Reset
    output io : {flip A_in : {zero : UInt<1>, nan : UInt<1>, sign : UInt<1>, exponent : SInt<6>, fraction : UInt<13>}, flip B_in : {zero : UInt<1>, nan : UInt<1>, sign : UInt<1>, exponent : SInt<6>, fraction : UInt<13>}, flip C_in : {zero : UInt<1>, nan : UInt<1>, number : SInt<129>}, flip prop_in : UInt<1>, A_out : {zero : UInt<1>, nan : UInt<1>, sign : UInt<1>, exponent : SInt<6>, fraction : UInt<13>}, B_out : {zero : UInt<1>, nan : UInt<1>, sign : UInt<1>, exponent : SInt<6>, fraction : UInt<13>}, C_out : {zero : UInt<1>, nan : UInt<1>, number : SInt<129>}, prop_out : UInt<1>}
    
    node _T = not(io.prop_in) @[Tile.scala 22:45]
    reg A0 : {zero : UInt<1>, nan : UInt<1>, sign : UInt<1>, exponent : SInt<6>, fraction : UInt<13>}, clock @[Reg.scala 15:16]
    when _T : @[Reg.scala 16:19]
      A0.fraction <= io.A_in.fraction @[Reg.scala 16:23]
      A0.exponent <= io.A_in.exponent @[Reg.scala 16:23]
      A0.sign <= io.A_in.sign @[Reg.scala 16:23]
      A0.nan <= io.A_in.nan @[Reg.scala 16:23]
      A0.zero <= io.A_in.zero @[Reg.scala 16:23]
      skip @[Reg.scala 16:19]
    reg A1 : {zero : UInt<1>, nan : UInt<1>, sign : UInt<1>, exponent : SInt<6>, fraction : UInt<13>}, clock @[Reg.scala 15:16]
    when io.prop_in : @[Reg.scala 16:19]
      A1.fraction <= io.A_in.fraction @[Reg.scala 16:23]
      A1.exponent <= io.A_in.exponent @[Reg.scala 16:23]
      A1.sign <= io.A_in.sign @[Reg.scala 16:23]
      A1.nan <= io.A_in.nan @[Reg.scala 16:23]
      A1.zero <= io.A_in.zero @[Reg.scala 16:23]
      skip @[Reg.scala 16:19]
    node _T_1 = mux(io.prop_in, A1, A0) @[Tile.scala 25:36]
    reg A : {zero : UInt<1>, nan : UInt<1>, sign : UInt<1>, exponent : SInt<6>, fraction : UInt<13>}, clock @[Tile.scala 25:32]
    A.fraction <= _T_1.fraction @[Tile.scala 25:32]
    A.exponent <= _T_1.exponent @[Tile.scala 25:32]
    A.sign <= _T_1.sign @[Tile.scala 25:32]
    A.nan <= _T_1.nan @[Tile.scala 25:32]
    A.zero <= _T_1.zero @[Tile.scala 25:32]
    reg B : {zero : UInt<1>, nan : UInt<1>, sign : UInt<1>, exponent : SInt<6>, fraction : UInt<13>}, clock @[Tile.scala 26:32]
    B.fraction <= io.B_in.fraction @[Tile.scala 26:32]
    B.exponent <= io.B_in.exponent @[Tile.scala 26:32]
    B.sign <= io.B_in.sign @[Tile.scala 26:32]
    B.nan <= io.B_in.nan @[Tile.scala 26:32]
    B.zero <= io.B_in.zero @[Tile.scala 26:32]
    reg prop : UInt<1>, clock @[Tile.scala 27:35]
    prop <= io.prop_in @[Tile.scala 27:35]
    inst mac of linearMultiplierMAC_4 @[Tile.scala 29:33]
    mac.clock <= clock
    mac.reset <= reset
    node _T_2 = mux(io.prop_in, A0, A1) @[Tile.scala 30:32]
    mac.io.A.fraction <= _T_2.fraction @[Tile.scala 30:26]
    mac.io.A.exponent <= _T_2.exponent @[Tile.scala 30:26]
    mac.io.A.sign <= _T_2.sign @[Tile.scala 30:26]
    mac.io.A.nan <= _T_2.nan @[Tile.scala 30:26]
    mac.io.A.zero <= _T_2.zero @[Tile.scala 30:26]
    mac.io.B.fraction <= io.B_in.fraction @[Tile.scala 31:26]
    mac.io.B.exponent <= io.B_in.exponent @[Tile.scala 31:26]
    mac.io.B.sign <= io.B_in.sign @[Tile.scala 31:26]
    mac.io.B.nan <= io.B_in.nan @[Tile.scala 31:26]
    mac.io.B.zero <= io.B_in.zero @[Tile.scala 31:26]
    mac.io.C.number <= io.C_in.number @[Tile.scala 32:26]
    mac.io.C.nan <= io.C_in.nan @[Tile.scala 32:26]
    mac.io.C.zero <= io.C_in.zero @[Tile.scala 32:26]
    reg C : {zero : UInt<1>, nan : UInt<1>, number : SInt<129>}, clock @[Tile.scala 34:32]
    C.number <= mac.io.out.number @[Tile.scala 34:32]
    C.nan <= mac.io.out.nan @[Tile.scala 34:32]
    C.zero <= mac.io.out.zero @[Tile.scala 34:32]
    io.A_out.fraction <= A.fraction @[Tile.scala 36:26]
    io.A_out.exponent <= A.exponent @[Tile.scala 36:26]
    io.A_out.sign <= A.sign @[Tile.scala 36:26]
    io.A_out.nan <= A.nan @[Tile.scala 36:26]
    io.A_out.zero <= A.zero @[Tile.scala 36:26]
    io.B_out.fraction <= B.fraction @[Tile.scala 37:26]
    io.B_out.exponent <= B.exponent @[Tile.scala 37:26]
    io.B_out.sign <= B.sign @[Tile.scala 37:26]
    io.B_out.nan <= B.nan @[Tile.scala 37:26]
    io.B_out.zero <= B.zero @[Tile.scala 37:26]
    io.C_out.number <= C.number @[Tile.scala 38:26]
    io.C_out.nan <= C.nan @[Tile.scala 38:26]
    io.C_out.zero <= C.zero @[Tile.scala 38:26]
    io.prop_out <= prop @[Tile.scala 39:29]
    
  module linearMultiplier_5 : 
    input clock : Clock
    input reset : Reset
    output io : {flip A : {zero : UInt<1>, nan : UInt<1>, sign : UInt<1>, exponent : SInt<6>, fraction : UInt<13>}, flip B : {zero : UInt<1>, nan : UInt<1>, sign : UInt<1>, exponent : SInt<6>, fraction : UInt<13>}, out : {zero : UInt<1>, nan : UInt<1>, number : SInt<129>}}
    
    node exponentSum = add(io.A.exponent, io.B.exponent) @[Multiplier.scala 15:41]
    node fractionProduct = mul(io.A.fraction, io.B.fraction) @[Multiplier.scala 16:45]
    node _T = add(asSInt(UInt<7>("h038")), exponentSum) @[Multiplier.scala 17:34]
    node shift = sub(_T, asSInt(UInt<6>("h018"))) @[Multiplier.scala 17:49]
    node _T_1 = lt(shift, asSInt(UInt<1>("h00"))) @[Multiplier.scala 18:32]
    node _T_2 = sub(asSInt(UInt<1>("h00")), shift) @[Multiplier.scala 18:59]
    node _T_3 = tail(_T_2, 1) @[Multiplier.scala 18:59]
    node _T_4 = asSInt(_T_3) @[Multiplier.scala 18:59]
    node _T_5 = asUInt(_T_4) @[Multiplier.scala 18:67]
    node _T_6 = dshr(fractionProduct, _T_5) @[Multiplier.scala 18:55]
    node _T_7 = asUInt(shift) @[Multiplier.scala 18:100]
    node _T_8 = dshl(fractionProduct, _T_7) @[Multiplier.scala 18:91]
    node number = mux(_T_1, _T_6, _T_8) @[Multiplier.scala 18:25]
    node _T_9 = or(io.A.zero, io.B.zero) @[Multiplier.scala 20:34]
    node _T_10 = sub(asSInt(UInt<1>("h00")), asSInt(UInt<6>("h018"))) @[Multiplier.scala 20:57]
    node _T_11 = tail(_T_10, 1) @[Multiplier.scala 20:57]
    node _T_12 = asSInt(_T_11) @[Multiplier.scala 20:57]
    node _T_13 = lt(shift, _T_12) @[Multiplier.scala 20:55]
    node _T_14 = or(_T_9, _T_13) @[Multiplier.scala 20:46]
    io.out.zero <= _T_14 @[Multiplier.scala 20:21]
    node _T_15 = or(io.A.nan, io.B.nan) @[Multiplier.scala 21:32]
    node _T_16 = geq(shift, asSInt(UInt<8>("h067"))) @[Multiplier.scala 21:52]
    node _T_17 = or(_T_15, _T_16) @[Multiplier.scala 21:43]
    io.out.nan <= _T_17 @[Multiplier.scala 21:20]
    node _T_18 = or(io.out.zero, io.out.nan) @[Multiplier.scala 22:42]
    node _T_19 = xor(io.A.sign, io.B.sign) @[Multiplier.scala 22:76]
    node _T_20 = bits(_T_19, 0, 0) @[Multiplier.scala 22:89]
    node _T_21 = asSInt(number) @[Multiplier.scala 22:105]
    node _T_22 = sub(asSInt(UInt<1>("h00")), _T_21) @[Multiplier.scala 22:97]
    node _T_23 = tail(_T_22, 1) @[Multiplier.scala 22:97]
    node _T_24 = asSInt(_T_23) @[Multiplier.scala 22:97]
    node _T_25 = asSInt(number) @[Multiplier.scala 22:120]
    node _T_26 = mux(_T_20, _T_24, _T_25) @[Multiplier.scala 22:64]
    node _T_27 = mux(_T_18, asSInt(UInt<1>("h00")), _T_26) @[Multiplier.scala 22:29]
    io.out.number <= _T_27 @[Multiplier.scala 22:23]
    
  module linearMultiplierMAC_5 : 
    input clock : Clock
    input reset : Reset
    output io : {flip A : {zero : UInt<1>, nan : UInt<1>, sign : UInt<1>, exponent : SInt<6>, fraction : UInt<13>}, flip B : {zero : UInt<1>, nan : UInt<1>, sign : UInt<1>, exponent : SInt<6>, fraction : UInt<13>}, flip C : {zero : UInt<1>, nan : UInt<1>, number : SInt<129>}, out : {zero : UInt<1>, nan : UInt<1>, number : SInt<129>}}
    
    inst multiplier of linearMultiplier_5 @[Multiplier.scala 33:32]
    multiplier.clock <= clock
    multiplier.reset <= reset
    multiplier.io.A.fraction <= io.A.fraction @[Multiplier.scala 34:25]
    multiplier.io.A.exponent <= io.A.exponent @[Multiplier.scala 34:25]
    multiplier.io.A.sign <= io.A.sign @[Multiplier.scala 34:25]
    multiplier.io.A.nan <= io.A.nan @[Multiplier.scala 34:25]
    multiplier.io.A.zero <= io.A.zero @[Multiplier.scala 34:25]
    multiplier.io.B.fraction <= io.B.fraction @[Multiplier.scala 35:25]
    multiplier.io.B.exponent <= io.B.exponent @[Multiplier.scala 35:25]
    multiplier.io.B.sign <= io.B.sign @[Multiplier.scala 35:25]
    multiplier.io.B.nan <= io.B.nan @[Multiplier.scala 35:25]
    multiplier.io.B.zero <= io.B.zero @[Multiplier.scala 35:25]
    node _T = add(multiplier.io.out.number, io.C.number) @[Multiplier.scala 36:44]
    node _T_1 = tail(_T, 1) @[Multiplier.scala 36:44]
    node sum = asSInt(_T_1) @[Multiplier.scala 36:44]
    node _T_2 = and(multiplier.io.out.zero, io.C.zero) @[Multiplier.scala 37:48]
    node _T_3 = bits(io.C.number, 128, 128) @[Multiplier.scala 37:76]
    node _T_4 = bits(multiplier.io.out.number, 128, 128) @[Multiplier.scala 37:127]
    node _T_5 = eq(_T_3, _T_4) @[Multiplier.scala 37:99]
    node _T_6 = bits(io.C.number, 128, 128) @[Multiplier.scala 37:166]
    node _T_7 = eq(_T_6, UInt<1>("h01")) @[Multiplier.scala 37:189]
    node _T_8 = and(_T_5, _T_7) @[Multiplier.scala 37:151]
    node _T_9 = bits(sum, 128, 128) @[Multiplier.scala 37:205]
    node _T_10 = eq(_T_9, UInt<1>("h00")) @[Multiplier.scala 37:228]
    node _T_11 = and(_T_8, _T_10) @[Multiplier.scala 37:198]
    node _T_12 = or(_T_2, _T_11) @[Multiplier.scala 37:61]
    io.out.zero <= _T_12 @[Multiplier.scala 37:21]
    node _T_13 = or(multiplier.io.out.nan, io.C.nan) @[Multiplier.scala 38:45]
    node _T_14 = bits(io.C.number, 128, 128) @[Multiplier.scala 38:71]
    node _T_15 = bits(multiplier.io.out.number, 128, 128) @[Multiplier.scala 38:122]
    node _T_16 = eq(_T_14, _T_15) @[Multiplier.scala 38:94]
    node _T_17 = bits(io.C.number, 128, 128) @[Multiplier.scala 38:161]
    node _T_18 = eq(_T_17, UInt<1>("h00")) @[Multiplier.scala 38:184]
    node _T_19 = and(_T_16, _T_18) @[Multiplier.scala 38:146]
    node _T_20 = bits(sum, 128, 128) @[Multiplier.scala 38:200]
    node _T_21 = eq(_T_20, UInt<1>("h01")) @[Multiplier.scala 38:223]
    node _T_22 = and(_T_19, _T_21) @[Multiplier.scala 38:193]
    node _T_23 = or(_T_13, _T_22) @[Multiplier.scala 38:56]
    io.out.nan <= _T_23 @[Multiplier.scala 38:20]
    io.out.number <= sum @[Multiplier.scala 39:23]
    
  module linearTile_5 : 
    input clock : Clock
    input reset : Reset
    output io : {flip A_in : {zero : UInt<1>, nan : UInt<1>, sign : UInt<1>, exponent : SInt<6>, fraction : UInt<13>}, flip B_in : {zero : UInt<1>, nan : UInt<1>, sign : UInt<1>, exponent : SInt<6>, fraction : UInt<13>}, flip C_in : {zero : UInt<1>, nan : UInt<1>, number : SInt<129>}, flip prop_in : UInt<1>, A_out : {zero : UInt<1>, nan : UInt<1>, sign : UInt<1>, exponent : SInt<6>, fraction : UInt<13>}, B_out : {zero : UInt<1>, nan : UInt<1>, sign : UInt<1>, exponent : SInt<6>, fraction : UInt<13>}, C_out : {zero : UInt<1>, nan : UInt<1>, number : SInt<129>}, prop_out : UInt<1>}
    
    node _T = not(io.prop_in) @[Tile.scala 22:45]
    reg A0 : {zero : UInt<1>, nan : UInt<1>, sign : UInt<1>, exponent : SInt<6>, fraction : UInt<13>}, clock @[Reg.scala 15:16]
    when _T : @[Reg.scala 16:19]
      A0.fraction <= io.A_in.fraction @[Reg.scala 16:23]
      A0.exponent <= io.A_in.exponent @[Reg.scala 16:23]
      A0.sign <= io.A_in.sign @[Reg.scala 16:23]
      A0.nan <= io.A_in.nan @[Reg.scala 16:23]
      A0.zero <= io.A_in.zero @[Reg.scala 16:23]
      skip @[Reg.scala 16:19]
    reg A1 : {zero : UInt<1>, nan : UInt<1>, sign : UInt<1>, exponent : SInt<6>, fraction : UInt<13>}, clock @[Reg.scala 15:16]
    when io.prop_in : @[Reg.scala 16:19]
      A1.fraction <= io.A_in.fraction @[Reg.scala 16:23]
      A1.exponent <= io.A_in.exponent @[Reg.scala 16:23]
      A1.sign <= io.A_in.sign @[Reg.scala 16:23]
      A1.nan <= io.A_in.nan @[Reg.scala 16:23]
      A1.zero <= io.A_in.zero @[Reg.scala 16:23]
      skip @[Reg.scala 16:19]
    node _T_1 = mux(io.prop_in, A1, A0) @[Tile.scala 25:36]
    reg A : {zero : UInt<1>, nan : UInt<1>, sign : UInt<1>, exponent : SInt<6>, fraction : UInt<13>}, clock @[Tile.scala 25:32]
    A.fraction <= _T_1.fraction @[Tile.scala 25:32]
    A.exponent <= _T_1.exponent @[Tile.scala 25:32]
    A.sign <= _T_1.sign @[Tile.scala 25:32]
    A.nan <= _T_1.nan @[Tile.scala 25:32]
    A.zero <= _T_1.zero @[Tile.scala 25:32]
    reg B : {zero : UInt<1>, nan : UInt<1>, sign : UInt<1>, exponent : SInt<6>, fraction : UInt<13>}, clock @[Tile.scala 26:32]
    B.fraction <= io.B_in.fraction @[Tile.scala 26:32]
    B.exponent <= io.B_in.exponent @[Tile.scala 26:32]
    B.sign <= io.B_in.sign @[Tile.scala 26:32]
    B.nan <= io.B_in.nan @[Tile.scala 26:32]
    B.zero <= io.B_in.zero @[Tile.scala 26:32]
    reg prop : UInt<1>, clock @[Tile.scala 27:35]
    prop <= io.prop_in @[Tile.scala 27:35]
    inst mac of linearMultiplierMAC_5 @[Tile.scala 29:33]
    mac.clock <= clock
    mac.reset <= reset
    node _T_2 = mux(io.prop_in, A0, A1) @[Tile.scala 30:32]
    mac.io.A.fraction <= _T_2.fraction @[Tile.scala 30:26]
    mac.io.A.exponent <= _T_2.exponent @[Tile.scala 30:26]
    mac.io.A.sign <= _T_2.sign @[Tile.scala 30:26]
    mac.io.A.nan <= _T_2.nan @[Tile.scala 30:26]
    mac.io.A.zero <= _T_2.zero @[Tile.scala 30:26]
    mac.io.B.fraction <= io.B_in.fraction @[Tile.scala 31:26]
    mac.io.B.exponent <= io.B_in.exponent @[Tile.scala 31:26]
    mac.io.B.sign <= io.B_in.sign @[Tile.scala 31:26]
    mac.io.B.nan <= io.B_in.nan @[Tile.scala 31:26]
    mac.io.B.zero <= io.B_in.zero @[Tile.scala 31:26]
    mac.io.C.number <= io.C_in.number @[Tile.scala 32:26]
    mac.io.C.nan <= io.C_in.nan @[Tile.scala 32:26]
    mac.io.C.zero <= io.C_in.zero @[Tile.scala 32:26]
    reg C : {zero : UInt<1>, nan : UInt<1>, number : SInt<129>}, clock @[Tile.scala 34:32]
    C.number <= mac.io.out.number @[Tile.scala 34:32]
    C.nan <= mac.io.out.nan @[Tile.scala 34:32]
    C.zero <= mac.io.out.zero @[Tile.scala 34:32]
    io.A_out.fraction <= A.fraction @[Tile.scala 36:26]
    io.A_out.exponent <= A.exponent @[Tile.scala 36:26]
    io.A_out.sign <= A.sign @[Tile.scala 36:26]
    io.A_out.nan <= A.nan @[Tile.scala 36:26]
    io.A_out.zero <= A.zero @[Tile.scala 36:26]
    io.B_out.fraction <= B.fraction @[Tile.scala 37:26]
    io.B_out.exponent <= B.exponent @[Tile.scala 37:26]
    io.B_out.sign <= B.sign @[Tile.scala 37:26]
    io.B_out.nan <= B.nan @[Tile.scala 37:26]
    io.B_out.zero <= B.zero @[Tile.scala 37:26]
    io.C_out.number <= C.number @[Tile.scala 38:26]
    io.C_out.nan <= C.nan @[Tile.scala 38:26]
    io.C_out.zero <= C.zero @[Tile.scala 38:26]
    io.prop_out <= prop @[Tile.scala 39:29]
    
  module linearMultiplier_6 : 
    input clock : Clock
    input reset : Reset
    output io : {flip A : {zero : UInt<1>, nan : UInt<1>, sign : UInt<1>, exponent : SInt<6>, fraction : UInt<13>}, flip B : {zero : UInt<1>, nan : UInt<1>, sign : UInt<1>, exponent : SInt<6>, fraction : UInt<13>}, out : {zero : UInt<1>, nan : UInt<1>, number : SInt<129>}}
    
    node exponentSum = add(io.A.exponent, io.B.exponent) @[Multiplier.scala 15:41]
    node fractionProduct = mul(io.A.fraction, io.B.fraction) @[Multiplier.scala 16:45]
    node _T = add(asSInt(UInt<7>("h038")), exponentSum) @[Multiplier.scala 17:34]
    node shift = sub(_T, asSInt(UInt<6>("h018"))) @[Multiplier.scala 17:49]
    node _T_1 = lt(shift, asSInt(UInt<1>("h00"))) @[Multiplier.scala 18:32]
    node _T_2 = sub(asSInt(UInt<1>("h00")), shift) @[Multiplier.scala 18:59]
    node _T_3 = tail(_T_2, 1) @[Multiplier.scala 18:59]
    node _T_4 = asSInt(_T_3) @[Multiplier.scala 18:59]
    node _T_5 = asUInt(_T_4) @[Multiplier.scala 18:67]
    node _T_6 = dshr(fractionProduct, _T_5) @[Multiplier.scala 18:55]
    node _T_7 = asUInt(shift) @[Multiplier.scala 18:100]
    node _T_8 = dshl(fractionProduct, _T_7) @[Multiplier.scala 18:91]
    node number = mux(_T_1, _T_6, _T_8) @[Multiplier.scala 18:25]
    node _T_9 = or(io.A.zero, io.B.zero) @[Multiplier.scala 20:34]
    node _T_10 = sub(asSInt(UInt<1>("h00")), asSInt(UInt<6>("h018"))) @[Multiplier.scala 20:57]
    node _T_11 = tail(_T_10, 1) @[Multiplier.scala 20:57]
    node _T_12 = asSInt(_T_11) @[Multiplier.scala 20:57]
    node _T_13 = lt(shift, _T_12) @[Multiplier.scala 20:55]
    node _T_14 = or(_T_9, _T_13) @[Multiplier.scala 20:46]
    io.out.zero <= _T_14 @[Multiplier.scala 20:21]
    node _T_15 = or(io.A.nan, io.B.nan) @[Multiplier.scala 21:32]
    node _T_16 = geq(shift, asSInt(UInt<8>("h067"))) @[Multiplier.scala 21:52]
    node _T_17 = or(_T_15, _T_16) @[Multiplier.scala 21:43]
    io.out.nan <= _T_17 @[Multiplier.scala 21:20]
    node _T_18 = or(io.out.zero, io.out.nan) @[Multiplier.scala 22:42]
    node _T_19 = xor(io.A.sign, io.B.sign) @[Multiplier.scala 22:76]
    node _T_20 = bits(_T_19, 0, 0) @[Multiplier.scala 22:89]
    node _T_21 = asSInt(number) @[Multiplier.scala 22:105]
    node _T_22 = sub(asSInt(UInt<1>("h00")), _T_21) @[Multiplier.scala 22:97]
    node _T_23 = tail(_T_22, 1) @[Multiplier.scala 22:97]
    node _T_24 = asSInt(_T_23) @[Multiplier.scala 22:97]
    node _T_25 = asSInt(number) @[Multiplier.scala 22:120]
    node _T_26 = mux(_T_20, _T_24, _T_25) @[Multiplier.scala 22:64]
    node _T_27 = mux(_T_18, asSInt(UInt<1>("h00")), _T_26) @[Multiplier.scala 22:29]
    io.out.number <= _T_27 @[Multiplier.scala 22:23]
    
  module linearMultiplierMAC_6 : 
    input clock : Clock
    input reset : Reset
    output io : {flip A : {zero : UInt<1>, nan : UInt<1>, sign : UInt<1>, exponent : SInt<6>, fraction : UInt<13>}, flip B : {zero : UInt<1>, nan : UInt<1>, sign : UInt<1>, exponent : SInt<6>, fraction : UInt<13>}, flip C : {zero : UInt<1>, nan : UInt<1>, number : SInt<129>}, out : {zero : UInt<1>, nan : UInt<1>, number : SInt<129>}}
    
    inst multiplier of linearMultiplier_6 @[Multiplier.scala 33:32]
    multiplier.clock <= clock
    multiplier.reset <= reset
    multiplier.io.A.fraction <= io.A.fraction @[Multiplier.scala 34:25]
    multiplier.io.A.exponent <= io.A.exponent @[Multiplier.scala 34:25]
    multiplier.io.A.sign <= io.A.sign @[Multiplier.scala 34:25]
    multiplier.io.A.nan <= io.A.nan @[Multiplier.scala 34:25]
    multiplier.io.A.zero <= io.A.zero @[Multiplier.scala 34:25]
    multiplier.io.B.fraction <= io.B.fraction @[Multiplier.scala 35:25]
    multiplier.io.B.exponent <= io.B.exponent @[Multiplier.scala 35:25]
    multiplier.io.B.sign <= io.B.sign @[Multiplier.scala 35:25]
    multiplier.io.B.nan <= io.B.nan @[Multiplier.scala 35:25]
    multiplier.io.B.zero <= io.B.zero @[Multiplier.scala 35:25]
    node _T = add(multiplier.io.out.number, io.C.number) @[Multiplier.scala 36:44]
    node _T_1 = tail(_T, 1) @[Multiplier.scala 36:44]
    node sum = asSInt(_T_1) @[Multiplier.scala 36:44]
    node _T_2 = and(multiplier.io.out.zero, io.C.zero) @[Multiplier.scala 37:48]
    node _T_3 = bits(io.C.number, 128, 128) @[Multiplier.scala 37:76]
    node _T_4 = bits(multiplier.io.out.number, 128, 128) @[Multiplier.scala 37:127]
    node _T_5 = eq(_T_3, _T_4) @[Multiplier.scala 37:99]
    node _T_6 = bits(io.C.number, 128, 128) @[Multiplier.scala 37:166]
    node _T_7 = eq(_T_6, UInt<1>("h01")) @[Multiplier.scala 37:189]
    node _T_8 = and(_T_5, _T_7) @[Multiplier.scala 37:151]
    node _T_9 = bits(sum, 128, 128) @[Multiplier.scala 37:205]
    node _T_10 = eq(_T_9, UInt<1>("h00")) @[Multiplier.scala 37:228]
    node _T_11 = and(_T_8, _T_10) @[Multiplier.scala 37:198]
    node _T_12 = or(_T_2, _T_11) @[Multiplier.scala 37:61]
    io.out.zero <= _T_12 @[Multiplier.scala 37:21]
    node _T_13 = or(multiplier.io.out.nan, io.C.nan) @[Multiplier.scala 38:45]
    node _T_14 = bits(io.C.number, 128, 128) @[Multiplier.scala 38:71]
    node _T_15 = bits(multiplier.io.out.number, 128, 128) @[Multiplier.scala 38:122]
    node _T_16 = eq(_T_14, _T_15) @[Multiplier.scala 38:94]
    node _T_17 = bits(io.C.number, 128, 128) @[Multiplier.scala 38:161]
    node _T_18 = eq(_T_17, UInt<1>("h00")) @[Multiplier.scala 38:184]
    node _T_19 = and(_T_16, _T_18) @[Multiplier.scala 38:146]
    node _T_20 = bits(sum, 128, 128) @[Multiplier.scala 38:200]
    node _T_21 = eq(_T_20, UInt<1>("h01")) @[Multiplier.scala 38:223]
    node _T_22 = and(_T_19, _T_21) @[Multiplier.scala 38:193]
    node _T_23 = or(_T_13, _T_22) @[Multiplier.scala 38:56]
    io.out.nan <= _T_23 @[Multiplier.scala 38:20]
    io.out.number <= sum @[Multiplier.scala 39:23]
    
  module linearTile_6 : 
    input clock : Clock
    input reset : Reset
    output io : {flip A_in : {zero : UInt<1>, nan : UInt<1>, sign : UInt<1>, exponent : SInt<6>, fraction : UInt<13>}, flip B_in : {zero : UInt<1>, nan : UInt<1>, sign : UInt<1>, exponent : SInt<6>, fraction : UInt<13>}, flip C_in : {zero : UInt<1>, nan : UInt<1>, number : SInt<129>}, flip prop_in : UInt<1>, A_out : {zero : UInt<1>, nan : UInt<1>, sign : UInt<1>, exponent : SInt<6>, fraction : UInt<13>}, B_out : {zero : UInt<1>, nan : UInt<1>, sign : UInt<1>, exponent : SInt<6>, fraction : UInt<13>}, C_out : {zero : UInt<1>, nan : UInt<1>, number : SInt<129>}, prop_out : UInt<1>}
    
    node _T = not(io.prop_in) @[Tile.scala 22:45]
    reg A0 : {zero : UInt<1>, nan : UInt<1>, sign : UInt<1>, exponent : SInt<6>, fraction : UInt<13>}, clock @[Reg.scala 15:16]
    when _T : @[Reg.scala 16:19]
      A0.fraction <= io.A_in.fraction @[Reg.scala 16:23]
      A0.exponent <= io.A_in.exponent @[Reg.scala 16:23]
      A0.sign <= io.A_in.sign @[Reg.scala 16:23]
      A0.nan <= io.A_in.nan @[Reg.scala 16:23]
      A0.zero <= io.A_in.zero @[Reg.scala 16:23]
      skip @[Reg.scala 16:19]
    reg A1 : {zero : UInt<1>, nan : UInt<1>, sign : UInt<1>, exponent : SInt<6>, fraction : UInt<13>}, clock @[Reg.scala 15:16]
    when io.prop_in : @[Reg.scala 16:19]
      A1.fraction <= io.A_in.fraction @[Reg.scala 16:23]
      A1.exponent <= io.A_in.exponent @[Reg.scala 16:23]
      A1.sign <= io.A_in.sign @[Reg.scala 16:23]
      A1.nan <= io.A_in.nan @[Reg.scala 16:23]
      A1.zero <= io.A_in.zero @[Reg.scala 16:23]
      skip @[Reg.scala 16:19]
    node _T_1 = mux(io.prop_in, A1, A0) @[Tile.scala 25:36]
    reg A : {zero : UInt<1>, nan : UInt<1>, sign : UInt<1>, exponent : SInt<6>, fraction : UInt<13>}, clock @[Tile.scala 25:32]
    A.fraction <= _T_1.fraction @[Tile.scala 25:32]
    A.exponent <= _T_1.exponent @[Tile.scala 25:32]
    A.sign <= _T_1.sign @[Tile.scala 25:32]
    A.nan <= _T_1.nan @[Tile.scala 25:32]
    A.zero <= _T_1.zero @[Tile.scala 25:32]
    reg B : {zero : UInt<1>, nan : UInt<1>, sign : UInt<1>, exponent : SInt<6>, fraction : UInt<13>}, clock @[Tile.scala 26:32]
    B.fraction <= io.B_in.fraction @[Tile.scala 26:32]
    B.exponent <= io.B_in.exponent @[Tile.scala 26:32]
    B.sign <= io.B_in.sign @[Tile.scala 26:32]
    B.nan <= io.B_in.nan @[Tile.scala 26:32]
    B.zero <= io.B_in.zero @[Tile.scala 26:32]
    reg prop : UInt<1>, clock @[Tile.scala 27:35]
    prop <= io.prop_in @[Tile.scala 27:35]
    inst mac of linearMultiplierMAC_6 @[Tile.scala 29:33]
    mac.clock <= clock
    mac.reset <= reset
    node _T_2 = mux(io.prop_in, A0, A1) @[Tile.scala 30:32]
    mac.io.A.fraction <= _T_2.fraction @[Tile.scala 30:26]
    mac.io.A.exponent <= _T_2.exponent @[Tile.scala 30:26]
    mac.io.A.sign <= _T_2.sign @[Tile.scala 30:26]
    mac.io.A.nan <= _T_2.nan @[Tile.scala 30:26]
    mac.io.A.zero <= _T_2.zero @[Tile.scala 30:26]
    mac.io.B.fraction <= io.B_in.fraction @[Tile.scala 31:26]
    mac.io.B.exponent <= io.B_in.exponent @[Tile.scala 31:26]
    mac.io.B.sign <= io.B_in.sign @[Tile.scala 31:26]
    mac.io.B.nan <= io.B_in.nan @[Tile.scala 31:26]
    mac.io.B.zero <= io.B_in.zero @[Tile.scala 31:26]
    mac.io.C.number <= io.C_in.number @[Tile.scala 32:26]
    mac.io.C.nan <= io.C_in.nan @[Tile.scala 32:26]
    mac.io.C.zero <= io.C_in.zero @[Tile.scala 32:26]
    reg C : {zero : UInt<1>, nan : UInt<1>, number : SInt<129>}, clock @[Tile.scala 34:32]
    C.number <= mac.io.out.number @[Tile.scala 34:32]
    C.nan <= mac.io.out.nan @[Tile.scala 34:32]
    C.zero <= mac.io.out.zero @[Tile.scala 34:32]
    io.A_out.fraction <= A.fraction @[Tile.scala 36:26]
    io.A_out.exponent <= A.exponent @[Tile.scala 36:26]
    io.A_out.sign <= A.sign @[Tile.scala 36:26]
    io.A_out.nan <= A.nan @[Tile.scala 36:26]
    io.A_out.zero <= A.zero @[Tile.scala 36:26]
    io.B_out.fraction <= B.fraction @[Tile.scala 37:26]
    io.B_out.exponent <= B.exponent @[Tile.scala 37:26]
    io.B_out.sign <= B.sign @[Tile.scala 37:26]
    io.B_out.nan <= B.nan @[Tile.scala 37:26]
    io.B_out.zero <= B.zero @[Tile.scala 37:26]
    io.C_out.number <= C.number @[Tile.scala 38:26]
    io.C_out.nan <= C.nan @[Tile.scala 38:26]
    io.C_out.zero <= C.zero @[Tile.scala 38:26]
    io.prop_out <= prop @[Tile.scala 39:29]
    
  module linearMultiplier_7 : 
    input clock : Clock
    input reset : Reset
    output io : {flip A : {zero : UInt<1>, nan : UInt<1>, sign : UInt<1>, exponent : SInt<6>, fraction : UInt<13>}, flip B : {zero : UInt<1>, nan : UInt<1>, sign : UInt<1>, exponent : SInt<6>, fraction : UInt<13>}, out : {zero : UInt<1>, nan : UInt<1>, number : SInt<129>}}
    
    node exponentSum = add(io.A.exponent, io.B.exponent) @[Multiplier.scala 15:41]
    node fractionProduct = mul(io.A.fraction, io.B.fraction) @[Multiplier.scala 16:45]
    node _T = add(asSInt(UInt<7>("h038")), exponentSum) @[Multiplier.scala 17:34]
    node shift = sub(_T, asSInt(UInt<6>("h018"))) @[Multiplier.scala 17:49]
    node _T_1 = lt(shift, asSInt(UInt<1>("h00"))) @[Multiplier.scala 18:32]
    node _T_2 = sub(asSInt(UInt<1>("h00")), shift) @[Multiplier.scala 18:59]
    node _T_3 = tail(_T_2, 1) @[Multiplier.scala 18:59]
    node _T_4 = asSInt(_T_3) @[Multiplier.scala 18:59]
    node _T_5 = asUInt(_T_4) @[Multiplier.scala 18:67]
    node _T_6 = dshr(fractionProduct, _T_5) @[Multiplier.scala 18:55]
    node _T_7 = asUInt(shift) @[Multiplier.scala 18:100]
    node _T_8 = dshl(fractionProduct, _T_7) @[Multiplier.scala 18:91]
    node number = mux(_T_1, _T_6, _T_8) @[Multiplier.scala 18:25]
    node _T_9 = or(io.A.zero, io.B.zero) @[Multiplier.scala 20:34]
    node _T_10 = sub(asSInt(UInt<1>("h00")), asSInt(UInt<6>("h018"))) @[Multiplier.scala 20:57]
    node _T_11 = tail(_T_10, 1) @[Multiplier.scala 20:57]
    node _T_12 = asSInt(_T_11) @[Multiplier.scala 20:57]
    node _T_13 = lt(shift, _T_12) @[Multiplier.scala 20:55]
    node _T_14 = or(_T_9, _T_13) @[Multiplier.scala 20:46]
    io.out.zero <= _T_14 @[Multiplier.scala 20:21]
    node _T_15 = or(io.A.nan, io.B.nan) @[Multiplier.scala 21:32]
    node _T_16 = geq(shift, asSInt(UInt<8>("h067"))) @[Multiplier.scala 21:52]
    node _T_17 = or(_T_15, _T_16) @[Multiplier.scala 21:43]
    io.out.nan <= _T_17 @[Multiplier.scala 21:20]
    node _T_18 = or(io.out.zero, io.out.nan) @[Multiplier.scala 22:42]
    node _T_19 = xor(io.A.sign, io.B.sign) @[Multiplier.scala 22:76]
    node _T_20 = bits(_T_19, 0, 0) @[Multiplier.scala 22:89]
    node _T_21 = asSInt(number) @[Multiplier.scala 22:105]
    node _T_22 = sub(asSInt(UInt<1>("h00")), _T_21) @[Multiplier.scala 22:97]
    node _T_23 = tail(_T_22, 1) @[Multiplier.scala 22:97]
    node _T_24 = asSInt(_T_23) @[Multiplier.scala 22:97]
    node _T_25 = asSInt(number) @[Multiplier.scala 22:120]
    node _T_26 = mux(_T_20, _T_24, _T_25) @[Multiplier.scala 22:64]
    node _T_27 = mux(_T_18, asSInt(UInt<1>("h00")), _T_26) @[Multiplier.scala 22:29]
    io.out.number <= _T_27 @[Multiplier.scala 22:23]
    
  module linearMultiplierMAC_7 : 
    input clock : Clock
    input reset : Reset
    output io : {flip A : {zero : UInt<1>, nan : UInt<1>, sign : UInt<1>, exponent : SInt<6>, fraction : UInt<13>}, flip B : {zero : UInt<1>, nan : UInt<1>, sign : UInt<1>, exponent : SInt<6>, fraction : UInt<13>}, flip C : {zero : UInt<1>, nan : UInt<1>, number : SInt<129>}, out : {zero : UInt<1>, nan : UInt<1>, number : SInt<129>}}
    
    inst multiplier of linearMultiplier_7 @[Multiplier.scala 33:32]
    multiplier.clock <= clock
    multiplier.reset <= reset
    multiplier.io.A.fraction <= io.A.fraction @[Multiplier.scala 34:25]
    multiplier.io.A.exponent <= io.A.exponent @[Multiplier.scala 34:25]
    multiplier.io.A.sign <= io.A.sign @[Multiplier.scala 34:25]
    multiplier.io.A.nan <= io.A.nan @[Multiplier.scala 34:25]
    multiplier.io.A.zero <= io.A.zero @[Multiplier.scala 34:25]
    multiplier.io.B.fraction <= io.B.fraction @[Multiplier.scala 35:25]
    multiplier.io.B.exponent <= io.B.exponent @[Multiplier.scala 35:25]
    multiplier.io.B.sign <= io.B.sign @[Multiplier.scala 35:25]
    multiplier.io.B.nan <= io.B.nan @[Multiplier.scala 35:25]
    multiplier.io.B.zero <= io.B.zero @[Multiplier.scala 35:25]
    node _T = add(multiplier.io.out.number, io.C.number) @[Multiplier.scala 36:44]
    node _T_1 = tail(_T, 1) @[Multiplier.scala 36:44]
    node sum = asSInt(_T_1) @[Multiplier.scala 36:44]
    node _T_2 = and(multiplier.io.out.zero, io.C.zero) @[Multiplier.scala 37:48]
    node _T_3 = bits(io.C.number, 128, 128) @[Multiplier.scala 37:76]
    node _T_4 = bits(multiplier.io.out.number, 128, 128) @[Multiplier.scala 37:127]
    node _T_5 = eq(_T_3, _T_4) @[Multiplier.scala 37:99]
    node _T_6 = bits(io.C.number, 128, 128) @[Multiplier.scala 37:166]
    node _T_7 = eq(_T_6, UInt<1>("h01")) @[Multiplier.scala 37:189]
    node _T_8 = and(_T_5, _T_7) @[Multiplier.scala 37:151]
    node _T_9 = bits(sum, 128, 128) @[Multiplier.scala 37:205]
    node _T_10 = eq(_T_9, UInt<1>("h00")) @[Multiplier.scala 37:228]
    node _T_11 = and(_T_8, _T_10) @[Multiplier.scala 37:198]
    node _T_12 = or(_T_2, _T_11) @[Multiplier.scala 37:61]
    io.out.zero <= _T_12 @[Multiplier.scala 37:21]
    node _T_13 = or(multiplier.io.out.nan, io.C.nan) @[Multiplier.scala 38:45]
    node _T_14 = bits(io.C.number, 128, 128) @[Multiplier.scala 38:71]
    node _T_15 = bits(multiplier.io.out.number, 128, 128) @[Multiplier.scala 38:122]
    node _T_16 = eq(_T_14, _T_15) @[Multiplier.scala 38:94]
    node _T_17 = bits(io.C.number, 128, 128) @[Multiplier.scala 38:161]
    node _T_18 = eq(_T_17, UInt<1>("h00")) @[Multiplier.scala 38:184]
    node _T_19 = and(_T_16, _T_18) @[Multiplier.scala 38:146]
    node _T_20 = bits(sum, 128, 128) @[Multiplier.scala 38:200]
    node _T_21 = eq(_T_20, UInt<1>("h01")) @[Multiplier.scala 38:223]
    node _T_22 = and(_T_19, _T_21) @[Multiplier.scala 38:193]
    node _T_23 = or(_T_13, _T_22) @[Multiplier.scala 38:56]
    io.out.nan <= _T_23 @[Multiplier.scala 38:20]
    io.out.number <= sum @[Multiplier.scala 39:23]
    
  module linearTile_7 : 
    input clock : Clock
    input reset : Reset
    output io : {flip A_in : {zero : UInt<1>, nan : UInt<1>, sign : UInt<1>, exponent : SInt<6>, fraction : UInt<13>}, flip B_in : {zero : UInt<1>, nan : UInt<1>, sign : UInt<1>, exponent : SInt<6>, fraction : UInt<13>}, flip C_in : {zero : UInt<1>, nan : UInt<1>, number : SInt<129>}, flip prop_in : UInt<1>, A_out : {zero : UInt<1>, nan : UInt<1>, sign : UInt<1>, exponent : SInt<6>, fraction : UInt<13>}, B_out : {zero : UInt<1>, nan : UInt<1>, sign : UInt<1>, exponent : SInt<6>, fraction : UInt<13>}, C_out : {zero : UInt<1>, nan : UInt<1>, number : SInt<129>}, prop_out : UInt<1>}
    
    node _T = not(io.prop_in) @[Tile.scala 22:45]
    reg A0 : {zero : UInt<1>, nan : UInt<1>, sign : UInt<1>, exponent : SInt<6>, fraction : UInt<13>}, clock @[Reg.scala 15:16]
    when _T : @[Reg.scala 16:19]
      A0.fraction <= io.A_in.fraction @[Reg.scala 16:23]
      A0.exponent <= io.A_in.exponent @[Reg.scala 16:23]
      A0.sign <= io.A_in.sign @[Reg.scala 16:23]
      A0.nan <= io.A_in.nan @[Reg.scala 16:23]
      A0.zero <= io.A_in.zero @[Reg.scala 16:23]
      skip @[Reg.scala 16:19]
    reg A1 : {zero : UInt<1>, nan : UInt<1>, sign : UInt<1>, exponent : SInt<6>, fraction : UInt<13>}, clock @[Reg.scala 15:16]
    when io.prop_in : @[Reg.scala 16:19]
      A1.fraction <= io.A_in.fraction @[Reg.scala 16:23]
      A1.exponent <= io.A_in.exponent @[Reg.scala 16:23]
      A1.sign <= io.A_in.sign @[Reg.scala 16:23]
      A1.nan <= io.A_in.nan @[Reg.scala 16:23]
      A1.zero <= io.A_in.zero @[Reg.scala 16:23]
      skip @[Reg.scala 16:19]
    node _T_1 = mux(io.prop_in, A1, A0) @[Tile.scala 25:36]
    reg A : {zero : UInt<1>, nan : UInt<1>, sign : UInt<1>, exponent : SInt<6>, fraction : UInt<13>}, clock @[Tile.scala 25:32]
    A.fraction <= _T_1.fraction @[Tile.scala 25:32]
    A.exponent <= _T_1.exponent @[Tile.scala 25:32]
    A.sign <= _T_1.sign @[Tile.scala 25:32]
    A.nan <= _T_1.nan @[Tile.scala 25:32]
    A.zero <= _T_1.zero @[Tile.scala 25:32]
    reg B : {zero : UInt<1>, nan : UInt<1>, sign : UInt<1>, exponent : SInt<6>, fraction : UInt<13>}, clock @[Tile.scala 26:32]
    B.fraction <= io.B_in.fraction @[Tile.scala 26:32]
    B.exponent <= io.B_in.exponent @[Tile.scala 26:32]
    B.sign <= io.B_in.sign @[Tile.scala 26:32]
    B.nan <= io.B_in.nan @[Tile.scala 26:32]
    B.zero <= io.B_in.zero @[Tile.scala 26:32]
    reg prop : UInt<1>, clock @[Tile.scala 27:35]
    prop <= io.prop_in @[Tile.scala 27:35]
    inst mac of linearMultiplierMAC_7 @[Tile.scala 29:33]
    mac.clock <= clock
    mac.reset <= reset
    node _T_2 = mux(io.prop_in, A0, A1) @[Tile.scala 30:32]
    mac.io.A.fraction <= _T_2.fraction @[Tile.scala 30:26]
    mac.io.A.exponent <= _T_2.exponent @[Tile.scala 30:26]
    mac.io.A.sign <= _T_2.sign @[Tile.scala 30:26]
    mac.io.A.nan <= _T_2.nan @[Tile.scala 30:26]
    mac.io.A.zero <= _T_2.zero @[Tile.scala 30:26]
    mac.io.B.fraction <= io.B_in.fraction @[Tile.scala 31:26]
    mac.io.B.exponent <= io.B_in.exponent @[Tile.scala 31:26]
    mac.io.B.sign <= io.B_in.sign @[Tile.scala 31:26]
    mac.io.B.nan <= io.B_in.nan @[Tile.scala 31:26]
    mac.io.B.zero <= io.B_in.zero @[Tile.scala 31:26]
    mac.io.C.number <= io.C_in.number @[Tile.scala 32:26]
    mac.io.C.nan <= io.C_in.nan @[Tile.scala 32:26]
    mac.io.C.zero <= io.C_in.zero @[Tile.scala 32:26]
    reg C : {zero : UInt<1>, nan : UInt<1>, number : SInt<129>}, clock @[Tile.scala 34:32]
    C.number <= mac.io.out.number @[Tile.scala 34:32]
    C.nan <= mac.io.out.nan @[Tile.scala 34:32]
    C.zero <= mac.io.out.zero @[Tile.scala 34:32]
    io.A_out.fraction <= A.fraction @[Tile.scala 36:26]
    io.A_out.exponent <= A.exponent @[Tile.scala 36:26]
    io.A_out.sign <= A.sign @[Tile.scala 36:26]
    io.A_out.nan <= A.nan @[Tile.scala 36:26]
    io.A_out.zero <= A.zero @[Tile.scala 36:26]
    io.B_out.fraction <= B.fraction @[Tile.scala 37:26]
    io.B_out.exponent <= B.exponent @[Tile.scala 37:26]
    io.B_out.sign <= B.sign @[Tile.scala 37:26]
    io.B_out.nan <= B.nan @[Tile.scala 37:26]
    io.B_out.zero <= B.zero @[Tile.scala 37:26]
    io.C_out.number <= C.number @[Tile.scala 38:26]
    io.C_out.nan <= C.nan @[Tile.scala 38:26]
    io.C_out.zero <= C.zero @[Tile.scala 38:26]
    io.prop_out <= prop @[Tile.scala 39:29]
    
  module linearMultiplier_8 : 
    input clock : Clock
    input reset : Reset
    output io : {flip A : {zero : UInt<1>, nan : UInt<1>, sign : UInt<1>, exponent : SInt<6>, fraction : UInt<13>}, flip B : {zero : UInt<1>, nan : UInt<1>, sign : UInt<1>, exponent : SInt<6>, fraction : UInt<13>}, out : {zero : UInt<1>, nan : UInt<1>, number : SInt<129>}}
    
    node exponentSum = add(io.A.exponent, io.B.exponent) @[Multiplier.scala 15:41]
    node fractionProduct = mul(io.A.fraction, io.B.fraction) @[Multiplier.scala 16:45]
    node _T = add(asSInt(UInt<7>("h038")), exponentSum) @[Multiplier.scala 17:34]
    node shift = sub(_T, asSInt(UInt<6>("h018"))) @[Multiplier.scala 17:49]
    node _T_1 = lt(shift, asSInt(UInt<1>("h00"))) @[Multiplier.scala 18:32]
    node _T_2 = sub(asSInt(UInt<1>("h00")), shift) @[Multiplier.scala 18:59]
    node _T_3 = tail(_T_2, 1) @[Multiplier.scala 18:59]
    node _T_4 = asSInt(_T_3) @[Multiplier.scala 18:59]
    node _T_5 = asUInt(_T_4) @[Multiplier.scala 18:67]
    node _T_6 = dshr(fractionProduct, _T_5) @[Multiplier.scala 18:55]
    node _T_7 = asUInt(shift) @[Multiplier.scala 18:100]
    node _T_8 = dshl(fractionProduct, _T_7) @[Multiplier.scala 18:91]
    node number = mux(_T_1, _T_6, _T_8) @[Multiplier.scala 18:25]
    node _T_9 = or(io.A.zero, io.B.zero) @[Multiplier.scala 20:34]
    node _T_10 = sub(asSInt(UInt<1>("h00")), asSInt(UInt<6>("h018"))) @[Multiplier.scala 20:57]
    node _T_11 = tail(_T_10, 1) @[Multiplier.scala 20:57]
    node _T_12 = asSInt(_T_11) @[Multiplier.scala 20:57]
    node _T_13 = lt(shift, _T_12) @[Multiplier.scala 20:55]
    node _T_14 = or(_T_9, _T_13) @[Multiplier.scala 20:46]
    io.out.zero <= _T_14 @[Multiplier.scala 20:21]
    node _T_15 = or(io.A.nan, io.B.nan) @[Multiplier.scala 21:32]
    node _T_16 = geq(shift, asSInt(UInt<8>("h067"))) @[Multiplier.scala 21:52]
    node _T_17 = or(_T_15, _T_16) @[Multiplier.scala 21:43]
    io.out.nan <= _T_17 @[Multiplier.scala 21:20]
    node _T_18 = or(io.out.zero, io.out.nan) @[Multiplier.scala 22:42]
    node _T_19 = xor(io.A.sign, io.B.sign) @[Multiplier.scala 22:76]
    node _T_20 = bits(_T_19, 0, 0) @[Multiplier.scala 22:89]
    node _T_21 = asSInt(number) @[Multiplier.scala 22:105]
    node _T_22 = sub(asSInt(UInt<1>("h00")), _T_21) @[Multiplier.scala 22:97]
    node _T_23 = tail(_T_22, 1) @[Multiplier.scala 22:97]
    node _T_24 = asSInt(_T_23) @[Multiplier.scala 22:97]
    node _T_25 = asSInt(number) @[Multiplier.scala 22:120]
    node _T_26 = mux(_T_20, _T_24, _T_25) @[Multiplier.scala 22:64]
    node _T_27 = mux(_T_18, asSInt(UInt<1>("h00")), _T_26) @[Multiplier.scala 22:29]
    io.out.number <= _T_27 @[Multiplier.scala 22:23]
    
  module linearMultiplierMAC_8 : 
    input clock : Clock
    input reset : Reset
    output io : {flip A : {zero : UInt<1>, nan : UInt<1>, sign : UInt<1>, exponent : SInt<6>, fraction : UInt<13>}, flip B : {zero : UInt<1>, nan : UInt<1>, sign : UInt<1>, exponent : SInt<6>, fraction : UInt<13>}, flip C : {zero : UInt<1>, nan : UInt<1>, number : SInt<129>}, out : {zero : UInt<1>, nan : UInt<1>, number : SInt<129>}}
    
    inst multiplier of linearMultiplier_8 @[Multiplier.scala 33:32]
    multiplier.clock <= clock
    multiplier.reset <= reset
    multiplier.io.A.fraction <= io.A.fraction @[Multiplier.scala 34:25]
    multiplier.io.A.exponent <= io.A.exponent @[Multiplier.scala 34:25]
    multiplier.io.A.sign <= io.A.sign @[Multiplier.scala 34:25]
    multiplier.io.A.nan <= io.A.nan @[Multiplier.scala 34:25]
    multiplier.io.A.zero <= io.A.zero @[Multiplier.scala 34:25]
    multiplier.io.B.fraction <= io.B.fraction @[Multiplier.scala 35:25]
    multiplier.io.B.exponent <= io.B.exponent @[Multiplier.scala 35:25]
    multiplier.io.B.sign <= io.B.sign @[Multiplier.scala 35:25]
    multiplier.io.B.nan <= io.B.nan @[Multiplier.scala 35:25]
    multiplier.io.B.zero <= io.B.zero @[Multiplier.scala 35:25]
    node _T = add(multiplier.io.out.number, io.C.number) @[Multiplier.scala 36:44]
    node _T_1 = tail(_T, 1) @[Multiplier.scala 36:44]
    node sum = asSInt(_T_1) @[Multiplier.scala 36:44]
    node _T_2 = and(multiplier.io.out.zero, io.C.zero) @[Multiplier.scala 37:48]
    node _T_3 = bits(io.C.number, 128, 128) @[Multiplier.scala 37:76]
    node _T_4 = bits(multiplier.io.out.number, 128, 128) @[Multiplier.scala 37:127]
    node _T_5 = eq(_T_3, _T_4) @[Multiplier.scala 37:99]
    node _T_6 = bits(io.C.number, 128, 128) @[Multiplier.scala 37:166]
    node _T_7 = eq(_T_6, UInt<1>("h01")) @[Multiplier.scala 37:189]
    node _T_8 = and(_T_5, _T_7) @[Multiplier.scala 37:151]
    node _T_9 = bits(sum, 128, 128) @[Multiplier.scala 37:205]
    node _T_10 = eq(_T_9, UInt<1>("h00")) @[Multiplier.scala 37:228]
    node _T_11 = and(_T_8, _T_10) @[Multiplier.scala 37:198]
    node _T_12 = or(_T_2, _T_11) @[Multiplier.scala 37:61]
    io.out.zero <= _T_12 @[Multiplier.scala 37:21]
    node _T_13 = or(multiplier.io.out.nan, io.C.nan) @[Multiplier.scala 38:45]
    node _T_14 = bits(io.C.number, 128, 128) @[Multiplier.scala 38:71]
    node _T_15 = bits(multiplier.io.out.number, 128, 128) @[Multiplier.scala 38:122]
    node _T_16 = eq(_T_14, _T_15) @[Multiplier.scala 38:94]
    node _T_17 = bits(io.C.number, 128, 128) @[Multiplier.scala 38:161]
    node _T_18 = eq(_T_17, UInt<1>("h00")) @[Multiplier.scala 38:184]
    node _T_19 = and(_T_16, _T_18) @[Multiplier.scala 38:146]
    node _T_20 = bits(sum, 128, 128) @[Multiplier.scala 38:200]
    node _T_21 = eq(_T_20, UInt<1>("h01")) @[Multiplier.scala 38:223]
    node _T_22 = and(_T_19, _T_21) @[Multiplier.scala 38:193]
    node _T_23 = or(_T_13, _T_22) @[Multiplier.scala 38:56]
    io.out.nan <= _T_23 @[Multiplier.scala 38:20]
    io.out.number <= sum @[Multiplier.scala 39:23]
    
  module linearTile_8 : 
    input clock : Clock
    input reset : Reset
    output io : {flip A_in : {zero : UInt<1>, nan : UInt<1>, sign : UInt<1>, exponent : SInt<6>, fraction : UInt<13>}, flip B_in : {zero : UInt<1>, nan : UInt<1>, sign : UInt<1>, exponent : SInt<6>, fraction : UInt<13>}, flip C_in : {zero : UInt<1>, nan : UInt<1>, number : SInt<129>}, flip prop_in : UInt<1>, A_out : {zero : UInt<1>, nan : UInt<1>, sign : UInt<1>, exponent : SInt<6>, fraction : UInt<13>}, B_out : {zero : UInt<1>, nan : UInt<1>, sign : UInt<1>, exponent : SInt<6>, fraction : UInt<13>}, C_out : {zero : UInt<1>, nan : UInt<1>, number : SInt<129>}, prop_out : UInt<1>}
    
    node _T = not(io.prop_in) @[Tile.scala 22:45]
    reg A0 : {zero : UInt<1>, nan : UInt<1>, sign : UInt<1>, exponent : SInt<6>, fraction : UInt<13>}, clock @[Reg.scala 15:16]
    when _T : @[Reg.scala 16:19]
      A0.fraction <= io.A_in.fraction @[Reg.scala 16:23]
      A0.exponent <= io.A_in.exponent @[Reg.scala 16:23]
      A0.sign <= io.A_in.sign @[Reg.scala 16:23]
      A0.nan <= io.A_in.nan @[Reg.scala 16:23]
      A0.zero <= io.A_in.zero @[Reg.scala 16:23]
      skip @[Reg.scala 16:19]
    reg A1 : {zero : UInt<1>, nan : UInt<1>, sign : UInt<1>, exponent : SInt<6>, fraction : UInt<13>}, clock @[Reg.scala 15:16]
    when io.prop_in : @[Reg.scala 16:19]
      A1.fraction <= io.A_in.fraction @[Reg.scala 16:23]
      A1.exponent <= io.A_in.exponent @[Reg.scala 16:23]
      A1.sign <= io.A_in.sign @[Reg.scala 16:23]
      A1.nan <= io.A_in.nan @[Reg.scala 16:23]
      A1.zero <= io.A_in.zero @[Reg.scala 16:23]
      skip @[Reg.scala 16:19]
    node _T_1 = mux(io.prop_in, A1, A0) @[Tile.scala 25:36]
    reg A : {zero : UInt<1>, nan : UInt<1>, sign : UInt<1>, exponent : SInt<6>, fraction : UInt<13>}, clock @[Tile.scala 25:32]
    A.fraction <= _T_1.fraction @[Tile.scala 25:32]
    A.exponent <= _T_1.exponent @[Tile.scala 25:32]
    A.sign <= _T_1.sign @[Tile.scala 25:32]
    A.nan <= _T_1.nan @[Tile.scala 25:32]
    A.zero <= _T_1.zero @[Tile.scala 25:32]
    reg B : {zero : UInt<1>, nan : UInt<1>, sign : UInt<1>, exponent : SInt<6>, fraction : UInt<13>}, clock @[Tile.scala 26:32]
    B.fraction <= io.B_in.fraction @[Tile.scala 26:32]
    B.exponent <= io.B_in.exponent @[Tile.scala 26:32]
    B.sign <= io.B_in.sign @[Tile.scala 26:32]
    B.nan <= io.B_in.nan @[Tile.scala 26:32]
    B.zero <= io.B_in.zero @[Tile.scala 26:32]
    reg prop : UInt<1>, clock @[Tile.scala 27:35]
    prop <= io.prop_in @[Tile.scala 27:35]
    inst mac of linearMultiplierMAC_8 @[Tile.scala 29:33]
    mac.clock <= clock
    mac.reset <= reset
    node _T_2 = mux(io.prop_in, A0, A1) @[Tile.scala 30:32]
    mac.io.A.fraction <= _T_2.fraction @[Tile.scala 30:26]
    mac.io.A.exponent <= _T_2.exponent @[Tile.scala 30:26]
    mac.io.A.sign <= _T_2.sign @[Tile.scala 30:26]
    mac.io.A.nan <= _T_2.nan @[Tile.scala 30:26]
    mac.io.A.zero <= _T_2.zero @[Tile.scala 30:26]
    mac.io.B.fraction <= io.B_in.fraction @[Tile.scala 31:26]
    mac.io.B.exponent <= io.B_in.exponent @[Tile.scala 31:26]
    mac.io.B.sign <= io.B_in.sign @[Tile.scala 31:26]
    mac.io.B.nan <= io.B_in.nan @[Tile.scala 31:26]
    mac.io.B.zero <= io.B_in.zero @[Tile.scala 31:26]
    mac.io.C.number <= io.C_in.number @[Tile.scala 32:26]
    mac.io.C.nan <= io.C_in.nan @[Tile.scala 32:26]
    mac.io.C.zero <= io.C_in.zero @[Tile.scala 32:26]
    reg C : {zero : UInt<1>, nan : UInt<1>, number : SInt<129>}, clock @[Tile.scala 34:32]
    C.number <= mac.io.out.number @[Tile.scala 34:32]
    C.nan <= mac.io.out.nan @[Tile.scala 34:32]
    C.zero <= mac.io.out.zero @[Tile.scala 34:32]
    io.A_out.fraction <= A.fraction @[Tile.scala 36:26]
    io.A_out.exponent <= A.exponent @[Tile.scala 36:26]
    io.A_out.sign <= A.sign @[Tile.scala 36:26]
    io.A_out.nan <= A.nan @[Tile.scala 36:26]
    io.A_out.zero <= A.zero @[Tile.scala 36:26]
    io.B_out.fraction <= B.fraction @[Tile.scala 37:26]
    io.B_out.exponent <= B.exponent @[Tile.scala 37:26]
    io.B_out.sign <= B.sign @[Tile.scala 37:26]
    io.B_out.nan <= B.nan @[Tile.scala 37:26]
    io.B_out.zero <= B.zero @[Tile.scala 37:26]
    io.C_out.number <= C.number @[Tile.scala 38:26]
    io.C_out.nan <= C.nan @[Tile.scala 38:26]
    io.C_out.zero <= C.zero @[Tile.scala 38:26]
    io.prop_out <= prop @[Tile.scala 39:29]
    
  module linearMultiplier_9 : 
    input clock : Clock
    input reset : Reset
    output io : {flip A : {zero : UInt<1>, nan : UInt<1>, sign : UInt<1>, exponent : SInt<6>, fraction : UInt<13>}, flip B : {zero : UInt<1>, nan : UInt<1>, sign : UInt<1>, exponent : SInt<6>, fraction : UInt<13>}, out : {zero : UInt<1>, nan : UInt<1>, number : SInt<129>}}
    
    node exponentSum = add(io.A.exponent, io.B.exponent) @[Multiplier.scala 15:41]
    node fractionProduct = mul(io.A.fraction, io.B.fraction) @[Multiplier.scala 16:45]
    node _T = add(asSInt(UInt<7>("h038")), exponentSum) @[Multiplier.scala 17:34]
    node shift = sub(_T, asSInt(UInt<6>("h018"))) @[Multiplier.scala 17:49]
    node _T_1 = lt(shift, asSInt(UInt<1>("h00"))) @[Multiplier.scala 18:32]
    node _T_2 = sub(asSInt(UInt<1>("h00")), shift) @[Multiplier.scala 18:59]
    node _T_3 = tail(_T_2, 1) @[Multiplier.scala 18:59]
    node _T_4 = asSInt(_T_3) @[Multiplier.scala 18:59]
    node _T_5 = asUInt(_T_4) @[Multiplier.scala 18:67]
    node _T_6 = dshr(fractionProduct, _T_5) @[Multiplier.scala 18:55]
    node _T_7 = asUInt(shift) @[Multiplier.scala 18:100]
    node _T_8 = dshl(fractionProduct, _T_7) @[Multiplier.scala 18:91]
    node number = mux(_T_1, _T_6, _T_8) @[Multiplier.scala 18:25]
    node _T_9 = or(io.A.zero, io.B.zero) @[Multiplier.scala 20:34]
    node _T_10 = sub(asSInt(UInt<1>("h00")), asSInt(UInt<6>("h018"))) @[Multiplier.scala 20:57]
    node _T_11 = tail(_T_10, 1) @[Multiplier.scala 20:57]
    node _T_12 = asSInt(_T_11) @[Multiplier.scala 20:57]
    node _T_13 = lt(shift, _T_12) @[Multiplier.scala 20:55]
    node _T_14 = or(_T_9, _T_13) @[Multiplier.scala 20:46]
    io.out.zero <= _T_14 @[Multiplier.scala 20:21]
    node _T_15 = or(io.A.nan, io.B.nan) @[Multiplier.scala 21:32]
    node _T_16 = geq(shift, asSInt(UInt<8>("h067"))) @[Multiplier.scala 21:52]
    node _T_17 = or(_T_15, _T_16) @[Multiplier.scala 21:43]
    io.out.nan <= _T_17 @[Multiplier.scala 21:20]
    node _T_18 = or(io.out.zero, io.out.nan) @[Multiplier.scala 22:42]
    node _T_19 = xor(io.A.sign, io.B.sign) @[Multiplier.scala 22:76]
    node _T_20 = bits(_T_19, 0, 0) @[Multiplier.scala 22:89]
    node _T_21 = asSInt(number) @[Multiplier.scala 22:105]
    node _T_22 = sub(asSInt(UInt<1>("h00")), _T_21) @[Multiplier.scala 22:97]
    node _T_23 = tail(_T_22, 1) @[Multiplier.scala 22:97]
    node _T_24 = asSInt(_T_23) @[Multiplier.scala 22:97]
    node _T_25 = asSInt(number) @[Multiplier.scala 22:120]
    node _T_26 = mux(_T_20, _T_24, _T_25) @[Multiplier.scala 22:64]
    node _T_27 = mux(_T_18, asSInt(UInt<1>("h00")), _T_26) @[Multiplier.scala 22:29]
    io.out.number <= _T_27 @[Multiplier.scala 22:23]
    
  module linearMultiplierMAC_9 : 
    input clock : Clock
    input reset : Reset
    output io : {flip A : {zero : UInt<1>, nan : UInt<1>, sign : UInt<1>, exponent : SInt<6>, fraction : UInt<13>}, flip B : {zero : UInt<1>, nan : UInt<1>, sign : UInt<1>, exponent : SInt<6>, fraction : UInt<13>}, flip C : {zero : UInt<1>, nan : UInt<1>, number : SInt<129>}, out : {zero : UInt<1>, nan : UInt<1>, number : SInt<129>}}
    
    inst multiplier of linearMultiplier_9 @[Multiplier.scala 33:32]
    multiplier.clock <= clock
    multiplier.reset <= reset
    multiplier.io.A.fraction <= io.A.fraction @[Multiplier.scala 34:25]
    multiplier.io.A.exponent <= io.A.exponent @[Multiplier.scala 34:25]
    multiplier.io.A.sign <= io.A.sign @[Multiplier.scala 34:25]
    multiplier.io.A.nan <= io.A.nan @[Multiplier.scala 34:25]
    multiplier.io.A.zero <= io.A.zero @[Multiplier.scala 34:25]
    multiplier.io.B.fraction <= io.B.fraction @[Multiplier.scala 35:25]
    multiplier.io.B.exponent <= io.B.exponent @[Multiplier.scala 35:25]
    multiplier.io.B.sign <= io.B.sign @[Multiplier.scala 35:25]
    multiplier.io.B.nan <= io.B.nan @[Multiplier.scala 35:25]
    multiplier.io.B.zero <= io.B.zero @[Multiplier.scala 35:25]
    node _T = add(multiplier.io.out.number, io.C.number) @[Multiplier.scala 36:44]
    node _T_1 = tail(_T, 1) @[Multiplier.scala 36:44]
    node sum = asSInt(_T_1) @[Multiplier.scala 36:44]
    node _T_2 = and(multiplier.io.out.zero, io.C.zero) @[Multiplier.scala 37:48]
    node _T_3 = bits(io.C.number, 128, 128) @[Multiplier.scala 37:76]
    node _T_4 = bits(multiplier.io.out.number, 128, 128) @[Multiplier.scala 37:127]
    node _T_5 = eq(_T_3, _T_4) @[Multiplier.scala 37:99]
    node _T_6 = bits(io.C.number, 128, 128) @[Multiplier.scala 37:166]
    node _T_7 = eq(_T_6, UInt<1>("h01")) @[Multiplier.scala 37:189]
    node _T_8 = and(_T_5, _T_7) @[Multiplier.scala 37:151]
    node _T_9 = bits(sum, 128, 128) @[Multiplier.scala 37:205]
    node _T_10 = eq(_T_9, UInt<1>("h00")) @[Multiplier.scala 37:228]
    node _T_11 = and(_T_8, _T_10) @[Multiplier.scala 37:198]
    node _T_12 = or(_T_2, _T_11) @[Multiplier.scala 37:61]
    io.out.zero <= _T_12 @[Multiplier.scala 37:21]
    node _T_13 = or(multiplier.io.out.nan, io.C.nan) @[Multiplier.scala 38:45]
    node _T_14 = bits(io.C.number, 128, 128) @[Multiplier.scala 38:71]
    node _T_15 = bits(multiplier.io.out.number, 128, 128) @[Multiplier.scala 38:122]
    node _T_16 = eq(_T_14, _T_15) @[Multiplier.scala 38:94]
    node _T_17 = bits(io.C.number, 128, 128) @[Multiplier.scala 38:161]
    node _T_18 = eq(_T_17, UInt<1>("h00")) @[Multiplier.scala 38:184]
    node _T_19 = and(_T_16, _T_18) @[Multiplier.scala 38:146]
    node _T_20 = bits(sum, 128, 128) @[Multiplier.scala 38:200]
    node _T_21 = eq(_T_20, UInt<1>("h01")) @[Multiplier.scala 38:223]
    node _T_22 = and(_T_19, _T_21) @[Multiplier.scala 38:193]
    node _T_23 = or(_T_13, _T_22) @[Multiplier.scala 38:56]
    io.out.nan <= _T_23 @[Multiplier.scala 38:20]
    io.out.number <= sum @[Multiplier.scala 39:23]
    
  module linearTile_9 : 
    input clock : Clock
    input reset : Reset
    output io : {flip A_in : {zero : UInt<1>, nan : UInt<1>, sign : UInt<1>, exponent : SInt<6>, fraction : UInt<13>}, flip B_in : {zero : UInt<1>, nan : UInt<1>, sign : UInt<1>, exponent : SInt<6>, fraction : UInt<13>}, flip C_in : {zero : UInt<1>, nan : UInt<1>, number : SInt<129>}, flip prop_in : UInt<1>, A_out : {zero : UInt<1>, nan : UInt<1>, sign : UInt<1>, exponent : SInt<6>, fraction : UInt<13>}, B_out : {zero : UInt<1>, nan : UInt<1>, sign : UInt<1>, exponent : SInt<6>, fraction : UInt<13>}, C_out : {zero : UInt<1>, nan : UInt<1>, number : SInt<129>}, prop_out : UInt<1>}
    
    node _T = not(io.prop_in) @[Tile.scala 22:45]
    reg A0 : {zero : UInt<1>, nan : UInt<1>, sign : UInt<1>, exponent : SInt<6>, fraction : UInt<13>}, clock @[Reg.scala 15:16]
    when _T : @[Reg.scala 16:19]
      A0.fraction <= io.A_in.fraction @[Reg.scala 16:23]
      A0.exponent <= io.A_in.exponent @[Reg.scala 16:23]
      A0.sign <= io.A_in.sign @[Reg.scala 16:23]
      A0.nan <= io.A_in.nan @[Reg.scala 16:23]
      A0.zero <= io.A_in.zero @[Reg.scala 16:23]
      skip @[Reg.scala 16:19]
    reg A1 : {zero : UInt<1>, nan : UInt<1>, sign : UInt<1>, exponent : SInt<6>, fraction : UInt<13>}, clock @[Reg.scala 15:16]
    when io.prop_in : @[Reg.scala 16:19]
      A1.fraction <= io.A_in.fraction @[Reg.scala 16:23]
      A1.exponent <= io.A_in.exponent @[Reg.scala 16:23]
      A1.sign <= io.A_in.sign @[Reg.scala 16:23]
      A1.nan <= io.A_in.nan @[Reg.scala 16:23]
      A1.zero <= io.A_in.zero @[Reg.scala 16:23]
      skip @[Reg.scala 16:19]
    node _T_1 = mux(io.prop_in, A1, A0) @[Tile.scala 25:36]
    reg A : {zero : UInt<1>, nan : UInt<1>, sign : UInt<1>, exponent : SInt<6>, fraction : UInt<13>}, clock @[Tile.scala 25:32]
    A.fraction <= _T_1.fraction @[Tile.scala 25:32]
    A.exponent <= _T_1.exponent @[Tile.scala 25:32]
    A.sign <= _T_1.sign @[Tile.scala 25:32]
    A.nan <= _T_1.nan @[Tile.scala 25:32]
    A.zero <= _T_1.zero @[Tile.scala 25:32]
    reg B : {zero : UInt<1>, nan : UInt<1>, sign : UInt<1>, exponent : SInt<6>, fraction : UInt<13>}, clock @[Tile.scala 26:32]
    B.fraction <= io.B_in.fraction @[Tile.scala 26:32]
    B.exponent <= io.B_in.exponent @[Tile.scala 26:32]
    B.sign <= io.B_in.sign @[Tile.scala 26:32]
    B.nan <= io.B_in.nan @[Tile.scala 26:32]
    B.zero <= io.B_in.zero @[Tile.scala 26:32]
    reg prop : UInt<1>, clock @[Tile.scala 27:35]
    prop <= io.prop_in @[Tile.scala 27:35]
    inst mac of linearMultiplierMAC_9 @[Tile.scala 29:33]
    mac.clock <= clock
    mac.reset <= reset
    node _T_2 = mux(io.prop_in, A0, A1) @[Tile.scala 30:32]
    mac.io.A.fraction <= _T_2.fraction @[Tile.scala 30:26]
    mac.io.A.exponent <= _T_2.exponent @[Tile.scala 30:26]
    mac.io.A.sign <= _T_2.sign @[Tile.scala 30:26]
    mac.io.A.nan <= _T_2.nan @[Tile.scala 30:26]
    mac.io.A.zero <= _T_2.zero @[Tile.scala 30:26]
    mac.io.B.fraction <= io.B_in.fraction @[Tile.scala 31:26]
    mac.io.B.exponent <= io.B_in.exponent @[Tile.scala 31:26]
    mac.io.B.sign <= io.B_in.sign @[Tile.scala 31:26]
    mac.io.B.nan <= io.B_in.nan @[Tile.scala 31:26]
    mac.io.B.zero <= io.B_in.zero @[Tile.scala 31:26]
    mac.io.C.number <= io.C_in.number @[Tile.scala 32:26]
    mac.io.C.nan <= io.C_in.nan @[Tile.scala 32:26]
    mac.io.C.zero <= io.C_in.zero @[Tile.scala 32:26]
    reg C : {zero : UInt<1>, nan : UInt<1>, number : SInt<129>}, clock @[Tile.scala 34:32]
    C.number <= mac.io.out.number @[Tile.scala 34:32]
    C.nan <= mac.io.out.nan @[Tile.scala 34:32]
    C.zero <= mac.io.out.zero @[Tile.scala 34:32]
    io.A_out.fraction <= A.fraction @[Tile.scala 36:26]
    io.A_out.exponent <= A.exponent @[Tile.scala 36:26]
    io.A_out.sign <= A.sign @[Tile.scala 36:26]
    io.A_out.nan <= A.nan @[Tile.scala 36:26]
    io.A_out.zero <= A.zero @[Tile.scala 36:26]
    io.B_out.fraction <= B.fraction @[Tile.scala 37:26]
    io.B_out.exponent <= B.exponent @[Tile.scala 37:26]
    io.B_out.sign <= B.sign @[Tile.scala 37:26]
    io.B_out.nan <= B.nan @[Tile.scala 37:26]
    io.B_out.zero <= B.zero @[Tile.scala 37:26]
    io.C_out.number <= C.number @[Tile.scala 38:26]
    io.C_out.nan <= C.nan @[Tile.scala 38:26]
    io.C_out.zero <= C.zero @[Tile.scala 38:26]
    io.prop_out <= prop @[Tile.scala 39:29]
    
  module linearMultiplier_10 : 
    input clock : Clock
    input reset : Reset
    output io : {flip A : {zero : UInt<1>, nan : UInt<1>, sign : UInt<1>, exponent : SInt<6>, fraction : UInt<13>}, flip B : {zero : UInt<1>, nan : UInt<1>, sign : UInt<1>, exponent : SInt<6>, fraction : UInt<13>}, out : {zero : UInt<1>, nan : UInt<1>, number : SInt<129>}}
    
    node exponentSum = add(io.A.exponent, io.B.exponent) @[Multiplier.scala 15:41]
    node fractionProduct = mul(io.A.fraction, io.B.fraction) @[Multiplier.scala 16:45]
    node _T = add(asSInt(UInt<7>("h038")), exponentSum) @[Multiplier.scala 17:34]
    node shift = sub(_T, asSInt(UInt<6>("h018"))) @[Multiplier.scala 17:49]
    node _T_1 = lt(shift, asSInt(UInt<1>("h00"))) @[Multiplier.scala 18:32]
    node _T_2 = sub(asSInt(UInt<1>("h00")), shift) @[Multiplier.scala 18:59]
    node _T_3 = tail(_T_2, 1) @[Multiplier.scala 18:59]
    node _T_4 = asSInt(_T_3) @[Multiplier.scala 18:59]
    node _T_5 = asUInt(_T_4) @[Multiplier.scala 18:67]
    node _T_6 = dshr(fractionProduct, _T_5) @[Multiplier.scala 18:55]
    node _T_7 = asUInt(shift) @[Multiplier.scala 18:100]
    node _T_8 = dshl(fractionProduct, _T_7) @[Multiplier.scala 18:91]
    node number = mux(_T_1, _T_6, _T_8) @[Multiplier.scala 18:25]
    node _T_9 = or(io.A.zero, io.B.zero) @[Multiplier.scala 20:34]
    node _T_10 = sub(asSInt(UInt<1>("h00")), asSInt(UInt<6>("h018"))) @[Multiplier.scala 20:57]
    node _T_11 = tail(_T_10, 1) @[Multiplier.scala 20:57]
    node _T_12 = asSInt(_T_11) @[Multiplier.scala 20:57]
    node _T_13 = lt(shift, _T_12) @[Multiplier.scala 20:55]
    node _T_14 = or(_T_9, _T_13) @[Multiplier.scala 20:46]
    io.out.zero <= _T_14 @[Multiplier.scala 20:21]
    node _T_15 = or(io.A.nan, io.B.nan) @[Multiplier.scala 21:32]
    node _T_16 = geq(shift, asSInt(UInt<8>("h067"))) @[Multiplier.scala 21:52]
    node _T_17 = or(_T_15, _T_16) @[Multiplier.scala 21:43]
    io.out.nan <= _T_17 @[Multiplier.scala 21:20]
    node _T_18 = or(io.out.zero, io.out.nan) @[Multiplier.scala 22:42]
    node _T_19 = xor(io.A.sign, io.B.sign) @[Multiplier.scala 22:76]
    node _T_20 = bits(_T_19, 0, 0) @[Multiplier.scala 22:89]
    node _T_21 = asSInt(number) @[Multiplier.scala 22:105]
    node _T_22 = sub(asSInt(UInt<1>("h00")), _T_21) @[Multiplier.scala 22:97]
    node _T_23 = tail(_T_22, 1) @[Multiplier.scala 22:97]
    node _T_24 = asSInt(_T_23) @[Multiplier.scala 22:97]
    node _T_25 = asSInt(number) @[Multiplier.scala 22:120]
    node _T_26 = mux(_T_20, _T_24, _T_25) @[Multiplier.scala 22:64]
    node _T_27 = mux(_T_18, asSInt(UInt<1>("h00")), _T_26) @[Multiplier.scala 22:29]
    io.out.number <= _T_27 @[Multiplier.scala 22:23]
    
  module linearMultiplierMAC_10 : 
    input clock : Clock
    input reset : Reset
    output io : {flip A : {zero : UInt<1>, nan : UInt<1>, sign : UInt<1>, exponent : SInt<6>, fraction : UInt<13>}, flip B : {zero : UInt<1>, nan : UInt<1>, sign : UInt<1>, exponent : SInt<6>, fraction : UInt<13>}, flip C : {zero : UInt<1>, nan : UInt<1>, number : SInt<129>}, out : {zero : UInt<1>, nan : UInt<1>, number : SInt<129>}}
    
    inst multiplier of linearMultiplier_10 @[Multiplier.scala 33:32]
    multiplier.clock <= clock
    multiplier.reset <= reset
    multiplier.io.A.fraction <= io.A.fraction @[Multiplier.scala 34:25]
    multiplier.io.A.exponent <= io.A.exponent @[Multiplier.scala 34:25]
    multiplier.io.A.sign <= io.A.sign @[Multiplier.scala 34:25]
    multiplier.io.A.nan <= io.A.nan @[Multiplier.scala 34:25]
    multiplier.io.A.zero <= io.A.zero @[Multiplier.scala 34:25]
    multiplier.io.B.fraction <= io.B.fraction @[Multiplier.scala 35:25]
    multiplier.io.B.exponent <= io.B.exponent @[Multiplier.scala 35:25]
    multiplier.io.B.sign <= io.B.sign @[Multiplier.scala 35:25]
    multiplier.io.B.nan <= io.B.nan @[Multiplier.scala 35:25]
    multiplier.io.B.zero <= io.B.zero @[Multiplier.scala 35:25]
    node _T = add(multiplier.io.out.number, io.C.number) @[Multiplier.scala 36:44]
    node _T_1 = tail(_T, 1) @[Multiplier.scala 36:44]
    node sum = asSInt(_T_1) @[Multiplier.scala 36:44]
    node _T_2 = and(multiplier.io.out.zero, io.C.zero) @[Multiplier.scala 37:48]
    node _T_3 = bits(io.C.number, 128, 128) @[Multiplier.scala 37:76]
    node _T_4 = bits(multiplier.io.out.number, 128, 128) @[Multiplier.scala 37:127]
    node _T_5 = eq(_T_3, _T_4) @[Multiplier.scala 37:99]
    node _T_6 = bits(io.C.number, 128, 128) @[Multiplier.scala 37:166]
    node _T_7 = eq(_T_6, UInt<1>("h01")) @[Multiplier.scala 37:189]
    node _T_8 = and(_T_5, _T_7) @[Multiplier.scala 37:151]
    node _T_9 = bits(sum, 128, 128) @[Multiplier.scala 37:205]
    node _T_10 = eq(_T_9, UInt<1>("h00")) @[Multiplier.scala 37:228]
    node _T_11 = and(_T_8, _T_10) @[Multiplier.scala 37:198]
    node _T_12 = or(_T_2, _T_11) @[Multiplier.scala 37:61]
    io.out.zero <= _T_12 @[Multiplier.scala 37:21]
    node _T_13 = or(multiplier.io.out.nan, io.C.nan) @[Multiplier.scala 38:45]
    node _T_14 = bits(io.C.number, 128, 128) @[Multiplier.scala 38:71]
    node _T_15 = bits(multiplier.io.out.number, 128, 128) @[Multiplier.scala 38:122]
    node _T_16 = eq(_T_14, _T_15) @[Multiplier.scala 38:94]
    node _T_17 = bits(io.C.number, 128, 128) @[Multiplier.scala 38:161]
    node _T_18 = eq(_T_17, UInt<1>("h00")) @[Multiplier.scala 38:184]
    node _T_19 = and(_T_16, _T_18) @[Multiplier.scala 38:146]
    node _T_20 = bits(sum, 128, 128) @[Multiplier.scala 38:200]
    node _T_21 = eq(_T_20, UInt<1>("h01")) @[Multiplier.scala 38:223]
    node _T_22 = and(_T_19, _T_21) @[Multiplier.scala 38:193]
    node _T_23 = or(_T_13, _T_22) @[Multiplier.scala 38:56]
    io.out.nan <= _T_23 @[Multiplier.scala 38:20]
    io.out.number <= sum @[Multiplier.scala 39:23]
    
  module linearTile_10 : 
    input clock : Clock
    input reset : Reset
    output io : {flip A_in : {zero : UInt<1>, nan : UInt<1>, sign : UInt<1>, exponent : SInt<6>, fraction : UInt<13>}, flip B_in : {zero : UInt<1>, nan : UInt<1>, sign : UInt<1>, exponent : SInt<6>, fraction : UInt<13>}, flip C_in : {zero : UInt<1>, nan : UInt<1>, number : SInt<129>}, flip prop_in : UInt<1>, A_out : {zero : UInt<1>, nan : UInt<1>, sign : UInt<1>, exponent : SInt<6>, fraction : UInt<13>}, B_out : {zero : UInt<1>, nan : UInt<1>, sign : UInt<1>, exponent : SInt<6>, fraction : UInt<13>}, C_out : {zero : UInt<1>, nan : UInt<1>, number : SInt<129>}, prop_out : UInt<1>}
    
    node _T = not(io.prop_in) @[Tile.scala 22:45]
    reg A0 : {zero : UInt<1>, nan : UInt<1>, sign : UInt<1>, exponent : SInt<6>, fraction : UInt<13>}, clock @[Reg.scala 15:16]
    when _T : @[Reg.scala 16:19]
      A0.fraction <= io.A_in.fraction @[Reg.scala 16:23]
      A0.exponent <= io.A_in.exponent @[Reg.scala 16:23]
      A0.sign <= io.A_in.sign @[Reg.scala 16:23]
      A0.nan <= io.A_in.nan @[Reg.scala 16:23]
      A0.zero <= io.A_in.zero @[Reg.scala 16:23]
      skip @[Reg.scala 16:19]
    reg A1 : {zero : UInt<1>, nan : UInt<1>, sign : UInt<1>, exponent : SInt<6>, fraction : UInt<13>}, clock @[Reg.scala 15:16]
    when io.prop_in : @[Reg.scala 16:19]
      A1.fraction <= io.A_in.fraction @[Reg.scala 16:23]
      A1.exponent <= io.A_in.exponent @[Reg.scala 16:23]
      A1.sign <= io.A_in.sign @[Reg.scala 16:23]
      A1.nan <= io.A_in.nan @[Reg.scala 16:23]
      A1.zero <= io.A_in.zero @[Reg.scala 16:23]
      skip @[Reg.scala 16:19]
    node _T_1 = mux(io.prop_in, A1, A0) @[Tile.scala 25:36]
    reg A : {zero : UInt<1>, nan : UInt<1>, sign : UInt<1>, exponent : SInt<6>, fraction : UInt<13>}, clock @[Tile.scala 25:32]
    A.fraction <= _T_1.fraction @[Tile.scala 25:32]
    A.exponent <= _T_1.exponent @[Tile.scala 25:32]
    A.sign <= _T_1.sign @[Tile.scala 25:32]
    A.nan <= _T_1.nan @[Tile.scala 25:32]
    A.zero <= _T_1.zero @[Tile.scala 25:32]
    reg B : {zero : UInt<1>, nan : UInt<1>, sign : UInt<1>, exponent : SInt<6>, fraction : UInt<13>}, clock @[Tile.scala 26:32]
    B.fraction <= io.B_in.fraction @[Tile.scala 26:32]
    B.exponent <= io.B_in.exponent @[Tile.scala 26:32]
    B.sign <= io.B_in.sign @[Tile.scala 26:32]
    B.nan <= io.B_in.nan @[Tile.scala 26:32]
    B.zero <= io.B_in.zero @[Tile.scala 26:32]
    reg prop : UInt<1>, clock @[Tile.scala 27:35]
    prop <= io.prop_in @[Tile.scala 27:35]
    inst mac of linearMultiplierMAC_10 @[Tile.scala 29:33]
    mac.clock <= clock
    mac.reset <= reset
    node _T_2 = mux(io.prop_in, A0, A1) @[Tile.scala 30:32]
    mac.io.A.fraction <= _T_2.fraction @[Tile.scala 30:26]
    mac.io.A.exponent <= _T_2.exponent @[Tile.scala 30:26]
    mac.io.A.sign <= _T_2.sign @[Tile.scala 30:26]
    mac.io.A.nan <= _T_2.nan @[Tile.scala 30:26]
    mac.io.A.zero <= _T_2.zero @[Tile.scala 30:26]
    mac.io.B.fraction <= io.B_in.fraction @[Tile.scala 31:26]
    mac.io.B.exponent <= io.B_in.exponent @[Tile.scala 31:26]
    mac.io.B.sign <= io.B_in.sign @[Tile.scala 31:26]
    mac.io.B.nan <= io.B_in.nan @[Tile.scala 31:26]
    mac.io.B.zero <= io.B_in.zero @[Tile.scala 31:26]
    mac.io.C.number <= io.C_in.number @[Tile.scala 32:26]
    mac.io.C.nan <= io.C_in.nan @[Tile.scala 32:26]
    mac.io.C.zero <= io.C_in.zero @[Tile.scala 32:26]
    reg C : {zero : UInt<1>, nan : UInt<1>, number : SInt<129>}, clock @[Tile.scala 34:32]
    C.number <= mac.io.out.number @[Tile.scala 34:32]
    C.nan <= mac.io.out.nan @[Tile.scala 34:32]
    C.zero <= mac.io.out.zero @[Tile.scala 34:32]
    io.A_out.fraction <= A.fraction @[Tile.scala 36:26]
    io.A_out.exponent <= A.exponent @[Tile.scala 36:26]
    io.A_out.sign <= A.sign @[Tile.scala 36:26]
    io.A_out.nan <= A.nan @[Tile.scala 36:26]
    io.A_out.zero <= A.zero @[Tile.scala 36:26]
    io.B_out.fraction <= B.fraction @[Tile.scala 37:26]
    io.B_out.exponent <= B.exponent @[Tile.scala 37:26]
    io.B_out.sign <= B.sign @[Tile.scala 37:26]
    io.B_out.nan <= B.nan @[Tile.scala 37:26]
    io.B_out.zero <= B.zero @[Tile.scala 37:26]
    io.C_out.number <= C.number @[Tile.scala 38:26]
    io.C_out.nan <= C.nan @[Tile.scala 38:26]
    io.C_out.zero <= C.zero @[Tile.scala 38:26]
    io.prop_out <= prop @[Tile.scala 39:29]
    
  module linearMultiplier_11 : 
    input clock : Clock
    input reset : Reset
    output io : {flip A : {zero : UInt<1>, nan : UInt<1>, sign : UInt<1>, exponent : SInt<6>, fraction : UInt<13>}, flip B : {zero : UInt<1>, nan : UInt<1>, sign : UInt<1>, exponent : SInt<6>, fraction : UInt<13>}, out : {zero : UInt<1>, nan : UInt<1>, number : SInt<129>}}
    
    node exponentSum = add(io.A.exponent, io.B.exponent) @[Multiplier.scala 15:41]
    node fractionProduct = mul(io.A.fraction, io.B.fraction) @[Multiplier.scala 16:45]
    node _T = add(asSInt(UInt<7>("h038")), exponentSum) @[Multiplier.scala 17:34]
    node shift = sub(_T, asSInt(UInt<6>("h018"))) @[Multiplier.scala 17:49]
    node _T_1 = lt(shift, asSInt(UInt<1>("h00"))) @[Multiplier.scala 18:32]
    node _T_2 = sub(asSInt(UInt<1>("h00")), shift) @[Multiplier.scala 18:59]
    node _T_3 = tail(_T_2, 1) @[Multiplier.scala 18:59]
    node _T_4 = asSInt(_T_3) @[Multiplier.scala 18:59]
    node _T_5 = asUInt(_T_4) @[Multiplier.scala 18:67]
    node _T_6 = dshr(fractionProduct, _T_5) @[Multiplier.scala 18:55]
    node _T_7 = asUInt(shift) @[Multiplier.scala 18:100]
    node _T_8 = dshl(fractionProduct, _T_7) @[Multiplier.scala 18:91]
    node number = mux(_T_1, _T_6, _T_8) @[Multiplier.scala 18:25]
    node _T_9 = or(io.A.zero, io.B.zero) @[Multiplier.scala 20:34]
    node _T_10 = sub(asSInt(UInt<1>("h00")), asSInt(UInt<6>("h018"))) @[Multiplier.scala 20:57]
    node _T_11 = tail(_T_10, 1) @[Multiplier.scala 20:57]
    node _T_12 = asSInt(_T_11) @[Multiplier.scala 20:57]
    node _T_13 = lt(shift, _T_12) @[Multiplier.scala 20:55]
    node _T_14 = or(_T_9, _T_13) @[Multiplier.scala 20:46]
    io.out.zero <= _T_14 @[Multiplier.scala 20:21]
    node _T_15 = or(io.A.nan, io.B.nan) @[Multiplier.scala 21:32]
    node _T_16 = geq(shift, asSInt(UInt<8>("h067"))) @[Multiplier.scala 21:52]
    node _T_17 = or(_T_15, _T_16) @[Multiplier.scala 21:43]
    io.out.nan <= _T_17 @[Multiplier.scala 21:20]
    node _T_18 = or(io.out.zero, io.out.nan) @[Multiplier.scala 22:42]
    node _T_19 = xor(io.A.sign, io.B.sign) @[Multiplier.scala 22:76]
    node _T_20 = bits(_T_19, 0, 0) @[Multiplier.scala 22:89]
    node _T_21 = asSInt(number) @[Multiplier.scala 22:105]
    node _T_22 = sub(asSInt(UInt<1>("h00")), _T_21) @[Multiplier.scala 22:97]
    node _T_23 = tail(_T_22, 1) @[Multiplier.scala 22:97]
    node _T_24 = asSInt(_T_23) @[Multiplier.scala 22:97]
    node _T_25 = asSInt(number) @[Multiplier.scala 22:120]
    node _T_26 = mux(_T_20, _T_24, _T_25) @[Multiplier.scala 22:64]
    node _T_27 = mux(_T_18, asSInt(UInt<1>("h00")), _T_26) @[Multiplier.scala 22:29]
    io.out.number <= _T_27 @[Multiplier.scala 22:23]
    
  module linearMultiplierMAC_11 : 
    input clock : Clock
    input reset : Reset
    output io : {flip A : {zero : UInt<1>, nan : UInt<1>, sign : UInt<1>, exponent : SInt<6>, fraction : UInt<13>}, flip B : {zero : UInt<1>, nan : UInt<1>, sign : UInt<1>, exponent : SInt<6>, fraction : UInt<13>}, flip C : {zero : UInt<1>, nan : UInt<1>, number : SInt<129>}, out : {zero : UInt<1>, nan : UInt<1>, number : SInt<129>}}
    
    inst multiplier of linearMultiplier_11 @[Multiplier.scala 33:32]
    multiplier.clock <= clock
    multiplier.reset <= reset
    multiplier.io.A.fraction <= io.A.fraction @[Multiplier.scala 34:25]
    multiplier.io.A.exponent <= io.A.exponent @[Multiplier.scala 34:25]
    multiplier.io.A.sign <= io.A.sign @[Multiplier.scala 34:25]
    multiplier.io.A.nan <= io.A.nan @[Multiplier.scala 34:25]
    multiplier.io.A.zero <= io.A.zero @[Multiplier.scala 34:25]
    multiplier.io.B.fraction <= io.B.fraction @[Multiplier.scala 35:25]
    multiplier.io.B.exponent <= io.B.exponent @[Multiplier.scala 35:25]
    multiplier.io.B.sign <= io.B.sign @[Multiplier.scala 35:25]
    multiplier.io.B.nan <= io.B.nan @[Multiplier.scala 35:25]
    multiplier.io.B.zero <= io.B.zero @[Multiplier.scala 35:25]
    node _T = add(multiplier.io.out.number, io.C.number) @[Multiplier.scala 36:44]
    node _T_1 = tail(_T, 1) @[Multiplier.scala 36:44]
    node sum = asSInt(_T_1) @[Multiplier.scala 36:44]
    node _T_2 = and(multiplier.io.out.zero, io.C.zero) @[Multiplier.scala 37:48]
    node _T_3 = bits(io.C.number, 128, 128) @[Multiplier.scala 37:76]
    node _T_4 = bits(multiplier.io.out.number, 128, 128) @[Multiplier.scala 37:127]
    node _T_5 = eq(_T_3, _T_4) @[Multiplier.scala 37:99]
    node _T_6 = bits(io.C.number, 128, 128) @[Multiplier.scala 37:166]
    node _T_7 = eq(_T_6, UInt<1>("h01")) @[Multiplier.scala 37:189]
    node _T_8 = and(_T_5, _T_7) @[Multiplier.scala 37:151]
    node _T_9 = bits(sum, 128, 128) @[Multiplier.scala 37:205]
    node _T_10 = eq(_T_9, UInt<1>("h00")) @[Multiplier.scala 37:228]
    node _T_11 = and(_T_8, _T_10) @[Multiplier.scala 37:198]
    node _T_12 = or(_T_2, _T_11) @[Multiplier.scala 37:61]
    io.out.zero <= _T_12 @[Multiplier.scala 37:21]
    node _T_13 = or(multiplier.io.out.nan, io.C.nan) @[Multiplier.scala 38:45]
    node _T_14 = bits(io.C.number, 128, 128) @[Multiplier.scala 38:71]
    node _T_15 = bits(multiplier.io.out.number, 128, 128) @[Multiplier.scala 38:122]
    node _T_16 = eq(_T_14, _T_15) @[Multiplier.scala 38:94]
    node _T_17 = bits(io.C.number, 128, 128) @[Multiplier.scala 38:161]
    node _T_18 = eq(_T_17, UInt<1>("h00")) @[Multiplier.scala 38:184]
    node _T_19 = and(_T_16, _T_18) @[Multiplier.scala 38:146]
    node _T_20 = bits(sum, 128, 128) @[Multiplier.scala 38:200]
    node _T_21 = eq(_T_20, UInt<1>("h01")) @[Multiplier.scala 38:223]
    node _T_22 = and(_T_19, _T_21) @[Multiplier.scala 38:193]
    node _T_23 = or(_T_13, _T_22) @[Multiplier.scala 38:56]
    io.out.nan <= _T_23 @[Multiplier.scala 38:20]
    io.out.number <= sum @[Multiplier.scala 39:23]
    
  module linearTile_11 : 
    input clock : Clock
    input reset : Reset
    output io : {flip A_in : {zero : UInt<1>, nan : UInt<1>, sign : UInt<1>, exponent : SInt<6>, fraction : UInt<13>}, flip B_in : {zero : UInt<1>, nan : UInt<1>, sign : UInt<1>, exponent : SInt<6>, fraction : UInt<13>}, flip C_in : {zero : UInt<1>, nan : UInt<1>, number : SInt<129>}, flip prop_in : UInt<1>, A_out : {zero : UInt<1>, nan : UInt<1>, sign : UInt<1>, exponent : SInt<6>, fraction : UInt<13>}, B_out : {zero : UInt<1>, nan : UInt<1>, sign : UInt<1>, exponent : SInt<6>, fraction : UInt<13>}, C_out : {zero : UInt<1>, nan : UInt<1>, number : SInt<129>}, prop_out : UInt<1>}
    
    node _T = not(io.prop_in) @[Tile.scala 22:45]
    reg A0 : {zero : UInt<1>, nan : UInt<1>, sign : UInt<1>, exponent : SInt<6>, fraction : UInt<13>}, clock @[Reg.scala 15:16]
    when _T : @[Reg.scala 16:19]
      A0.fraction <= io.A_in.fraction @[Reg.scala 16:23]
      A0.exponent <= io.A_in.exponent @[Reg.scala 16:23]
      A0.sign <= io.A_in.sign @[Reg.scala 16:23]
      A0.nan <= io.A_in.nan @[Reg.scala 16:23]
      A0.zero <= io.A_in.zero @[Reg.scala 16:23]
      skip @[Reg.scala 16:19]
    reg A1 : {zero : UInt<1>, nan : UInt<1>, sign : UInt<1>, exponent : SInt<6>, fraction : UInt<13>}, clock @[Reg.scala 15:16]
    when io.prop_in : @[Reg.scala 16:19]
      A1.fraction <= io.A_in.fraction @[Reg.scala 16:23]
      A1.exponent <= io.A_in.exponent @[Reg.scala 16:23]
      A1.sign <= io.A_in.sign @[Reg.scala 16:23]
      A1.nan <= io.A_in.nan @[Reg.scala 16:23]
      A1.zero <= io.A_in.zero @[Reg.scala 16:23]
      skip @[Reg.scala 16:19]
    node _T_1 = mux(io.prop_in, A1, A0) @[Tile.scala 25:36]
    reg A : {zero : UInt<1>, nan : UInt<1>, sign : UInt<1>, exponent : SInt<6>, fraction : UInt<13>}, clock @[Tile.scala 25:32]
    A.fraction <= _T_1.fraction @[Tile.scala 25:32]
    A.exponent <= _T_1.exponent @[Tile.scala 25:32]
    A.sign <= _T_1.sign @[Tile.scala 25:32]
    A.nan <= _T_1.nan @[Tile.scala 25:32]
    A.zero <= _T_1.zero @[Tile.scala 25:32]
    reg B : {zero : UInt<1>, nan : UInt<1>, sign : UInt<1>, exponent : SInt<6>, fraction : UInt<13>}, clock @[Tile.scala 26:32]
    B.fraction <= io.B_in.fraction @[Tile.scala 26:32]
    B.exponent <= io.B_in.exponent @[Tile.scala 26:32]
    B.sign <= io.B_in.sign @[Tile.scala 26:32]
    B.nan <= io.B_in.nan @[Tile.scala 26:32]
    B.zero <= io.B_in.zero @[Tile.scala 26:32]
    reg prop : UInt<1>, clock @[Tile.scala 27:35]
    prop <= io.prop_in @[Tile.scala 27:35]
    inst mac of linearMultiplierMAC_11 @[Tile.scala 29:33]
    mac.clock <= clock
    mac.reset <= reset
    node _T_2 = mux(io.prop_in, A0, A1) @[Tile.scala 30:32]
    mac.io.A.fraction <= _T_2.fraction @[Tile.scala 30:26]
    mac.io.A.exponent <= _T_2.exponent @[Tile.scala 30:26]
    mac.io.A.sign <= _T_2.sign @[Tile.scala 30:26]
    mac.io.A.nan <= _T_2.nan @[Tile.scala 30:26]
    mac.io.A.zero <= _T_2.zero @[Tile.scala 30:26]
    mac.io.B.fraction <= io.B_in.fraction @[Tile.scala 31:26]
    mac.io.B.exponent <= io.B_in.exponent @[Tile.scala 31:26]
    mac.io.B.sign <= io.B_in.sign @[Tile.scala 31:26]
    mac.io.B.nan <= io.B_in.nan @[Tile.scala 31:26]
    mac.io.B.zero <= io.B_in.zero @[Tile.scala 31:26]
    mac.io.C.number <= io.C_in.number @[Tile.scala 32:26]
    mac.io.C.nan <= io.C_in.nan @[Tile.scala 32:26]
    mac.io.C.zero <= io.C_in.zero @[Tile.scala 32:26]
    reg C : {zero : UInt<1>, nan : UInt<1>, number : SInt<129>}, clock @[Tile.scala 34:32]
    C.number <= mac.io.out.number @[Tile.scala 34:32]
    C.nan <= mac.io.out.nan @[Tile.scala 34:32]
    C.zero <= mac.io.out.zero @[Tile.scala 34:32]
    io.A_out.fraction <= A.fraction @[Tile.scala 36:26]
    io.A_out.exponent <= A.exponent @[Tile.scala 36:26]
    io.A_out.sign <= A.sign @[Tile.scala 36:26]
    io.A_out.nan <= A.nan @[Tile.scala 36:26]
    io.A_out.zero <= A.zero @[Tile.scala 36:26]
    io.B_out.fraction <= B.fraction @[Tile.scala 37:26]
    io.B_out.exponent <= B.exponent @[Tile.scala 37:26]
    io.B_out.sign <= B.sign @[Tile.scala 37:26]
    io.B_out.nan <= B.nan @[Tile.scala 37:26]
    io.B_out.zero <= B.zero @[Tile.scala 37:26]
    io.C_out.number <= C.number @[Tile.scala 38:26]
    io.C_out.nan <= C.nan @[Tile.scala 38:26]
    io.C_out.zero <= C.zero @[Tile.scala 38:26]
    io.prop_out <= prop @[Tile.scala 39:29]
    
  module linearMultiplier_12 : 
    input clock : Clock
    input reset : Reset
    output io : {flip A : {zero : UInt<1>, nan : UInt<1>, sign : UInt<1>, exponent : SInt<6>, fraction : UInt<13>}, flip B : {zero : UInt<1>, nan : UInt<1>, sign : UInt<1>, exponent : SInt<6>, fraction : UInt<13>}, out : {zero : UInt<1>, nan : UInt<1>, number : SInt<129>}}
    
    node exponentSum = add(io.A.exponent, io.B.exponent) @[Multiplier.scala 15:41]
    node fractionProduct = mul(io.A.fraction, io.B.fraction) @[Multiplier.scala 16:45]
    node _T = add(asSInt(UInt<7>("h038")), exponentSum) @[Multiplier.scala 17:34]
    node shift = sub(_T, asSInt(UInt<6>("h018"))) @[Multiplier.scala 17:49]
    node _T_1 = lt(shift, asSInt(UInt<1>("h00"))) @[Multiplier.scala 18:32]
    node _T_2 = sub(asSInt(UInt<1>("h00")), shift) @[Multiplier.scala 18:59]
    node _T_3 = tail(_T_2, 1) @[Multiplier.scala 18:59]
    node _T_4 = asSInt(_T_3) @[Multiplier.scala 18:59]
    node _T_5 = asUInt(_T_4) @[Multiplier.scala 18:67]
    node _T_6 = dshr(fractionProduct, _T_5) @[Multiplier.scala 18:55]
    node _T_7 = asUInt(shift) @[Multiplier.scala 18:100]
    node _T_8 = dshl(fractionProduct, _T_7) @[Multiplier.scala 18:91]
    node number = mux(_T_1, _T_6, _T_8) @[Multiplier.scala 18:25]
    node _T_9 = or(io.A.zero, io.B.zero) @[Multiplier.scala 20:34]
    node _T_10 = sub(asSInt(UInt<1>("h00")), asSInt(UInt<6>("h018"))) @[Multiplier.scala 20:57]
    node _T_11 = tail(_T_10, 1) @[Multiplier.scala 20:57]
    node _T_12 = asSInt(_T_11) @[Multiplier.scala 20:57]
    node _T_13 = lt(shift, _T_12) @[Multiplier.scala 20:55]
    node _T_14 = or(_T_9, _T_13) @[Multiplier.scala 20:46]
    io.out.zero <= _T_14 @[Multiplier.scala 20:21]
    node _T_15 = or(io.A.nan, io.B.nan) @[Multiplier.scala 21:32]
    node _T_16 = geq(shift, asSInt(UInt<8>("h067"))) @[Multiplier.scala 21:52]
    node _T_17 = or(_T_15, _T_16) @[Multiplier.scala 21:43]
    io.out.nan <= _T_17 @[Multiplier.scala 21:20]
    node _T_18 = or(io.out.zero, io.out.nan) @[Multiplier.scala 22:42]
    node _T_19 = xor(io.A.sign, io.B.sign) @[Multiplier.scala 22:76]
    node _T_20 = bits(_T_19, 0, 0) @[Multiplier.scala 22:89]
    node _T_21 = asSInt(number) @[Multiplier.scala 22:105]
    node _T_22 = sub(asSInt(UInt<1>("h00")), _T_21) @[Multiplier.scala 22:97]
    node _T_23 = tail(_T_22, 1) @[Multiplier.scala 22:97]
    node _T_24 = asSInt(_T_23) @[Multiplier.scala 22:97]
    node _T_25 = asSInt(number) @[Multiplier.scala 22:120]
    node _T_26 = mux(_T_20, _T_24, _T_25) @[Multiplier.scala 22:64]
    node _T_27 = mux(_T_18, asSInt(UInt<1>("h00")), _T_26) @[Multiplier.scala 22:29]
    io.out.number <= _T_27 @[Multiplier.scala 22:23]
    
  module linearMultiplierMAC_12 : 
    input clock : Clock
    input reset : Reset
    output io : {flip A : {zero : UInt<1>, nan : UInt<1>, sign : UInt<1>, exponent : SInt<6>, fraction : UInt<13>}, flip B : {zero : UInt<1>, nan : UInt<1>, sign : UInt<1>, exponent : SInt<6>, fraction : UInt<13>}, flip C : {zero : UInt<1>, nan : UInt<1>, number : SInt<129>}, out : {zero : UInt<1>, nan : UInt<1>, number : SInt<129>}}
    
    inst multiplier of linearMultiplier_12 @[Multiplier.scala 33:32]
    multiplier.clock <= clock
    multiplier.reset <= reset
    multiplier.io.A.fraction <= io.A.fraction @[Multiplier.scala 34:25]
    multiplier.io.A.exponent <= io.A.exponent @[Multiplier.scala 34:25]
    multiplier.io.A.sign <= io.A.sign @[Multiplier.scala 34:25]
    multiplier.io.A.nan <= io.A.nan @[Multiplier.scala 34:25]
    multiplier.io.A.zero <= io.A.zero @[Multiplier.scala 34:25]
    multiplier.io.B.fraction <= io.B.fraction @[Multiplier.scala 35:25]
    multiplier.io.B.exponent <= io.B.exponent @[Multiplier.scala 35:25]
    multiplier.io.B.sign <= io.B.sign @[Multiplier.scala 35:25]
    multiplier.io.B.nan <= io.B.nan @[Multiplier.scala 35:25]
    multiplier.io.B.zero <= io.B.zero @[Multiplier.scala 35:25]
    node _T = add(multiplier.io.out.number, io.C.number) @[Multiplier.scala 36:44]
    node _T_1 = tail(_T, 1) @[Multiplier.scala 36:44]
    node sum = asSInt(_T_1) @[Multiplier.scala 36:44]
    node _T_2 = and(multiplier.io.out.zero, io.C.zero) @[Multiplier.scala 37:48]
    node _T_3 = bits(io.C.number, 128, 128) @[Multiplier.scala 37:76]
    node _T_4 = bits(multiplier.io.out.number, 128, 128) @[Multiplier.scala 37:127]
    node _T_5 = eq(_T_3, _T_4) @[Multiplier.scala 37:99]
    node _T_6 = bits(io.C.number, 128, 128) @[Multiplier.scala 37:166]
    node _T_7 = eq(_T_6, UInt<1>("h01")) @[Multiplier.scala 37:189]
    node _T_8 = and(_T_5, _T_7) @[Multiplier.scala 37:151]
    node _T_9 = bits(sum, 128, 128) @[Multiplier.scala 37:205]
    node _T_10 = eq(_T_9, UInt<1>("h00")) @[Multiplier.scala 37:228]
    node _T_11 = and(_T_8, _T_10) @[Multiplier.scala 37:198]
    node _T_12 = or(_T_2, _T_11) @[Multiplier.scala 37:61]
    io.out.zero <= _T_12 @[Multiplier.scala 37:21]
    node _T_13 = or(multiplier.io.out.nan, io.C.nan) @[Multiplier.scala 38:45]
    node _T_14 = bits(io.C.number, 128, 128) @[Multiplier.scala 38:71]
    node _T_15 = bits(multiplier.io.out.number, 128, 128) @[Multiplier.scala 38:122]
    node _T_16 = eq(_T_14, _T_15) @[Multiplier.scala 38:94]
    node _T_17 = bits(io.C.number, 128, 128) @[Multiplier.scala 38:161]
    node _T_18 = eq(_T_17, UInt<1>("h00")) @[Multiplier.scala 38:184]
    node _T_19 = and(_T_16, _T_18) @[Multiplier.scala 38:146]
    node _T_20 = bits(sum, 128, 128) @[Multiplier.scala 38:200]
    node _T_21 = eq(_T_20, UInt<1>("h01")) @[Multiplier.scala 38:223]
    node _T_22 = and(_T_19, _T_21) @[Multiplier.scala 38:193]
    node _T_23 = or(_T_13, _T_22) @[Multiplier.scala 38:56]
    io.out.nan <= _T_23 @[Multiplier.scala 38:20]
    io.out.number <= sum @[Multiplier.scala 39:23]
    
  module linearTile_12 : 
    input clock : Clock
    input reset : Reset
    output io : {flip A_in : {zero : UInt<1>, nan : UInt<1>, sign : UInt<1>, exponent : SInt<6>, fraction : UInt<13>}, flip B_in : {zero : UInt<1>, nan : UInt<1>, sign : UInt<1>, exponent : SInt<6>, fraction : UInt<13>}, flip C_in : {zero : UInt<1>, nan : UInt<1>, number : SInt<129>}, flip prop_in : UInt<1>, A_out : {zero : UInt<1>, nan : UInt<1>, sign : UInt<1>, exponent : SInt<6>, fraction : UInt<13>}, B_out : {zero : UInt<1>, nan : UInt<1>, sign : UInt<1>, exponent : SInt<6>, fraction : UInt<13>}, C_out : {zero : UInt<1>, nan : UInt<1>, number : SInt<129>}, prop_out : UInt<1>}
    
    node _T = not(io.prop_in) @[Tile.scala 22:45]
    reg A0 : {zero : UInt<1>, nan : UInt<1>, sign : UInt<1>, exponent : SInt<6>, fraction : UInt<13>}, clock @[Reg.scala 15:16]
    when _T : @[Reg.scala 16:19]
      A0.fraction <= io.A_in.fraction @[Reg.scala 16:23]
      A0.exponent <= io.A_in.exponent @[Reg.scala 16:23]
      A0.sign <= io.A_in.sign @[Reg.scala 16:23]
      A0.nan <= io.A_in.nan @[Reg.scala 16:23]
      A0.zero <= io.A_in.zero @[Reg.scala 16:23]
      skip @[Reg.scala 16:19]
    reg A1 : {zero : UInt<1>, nan : UInt<1>, sign : UInt<1>, exponent : SInt<6>, fraction : UInt<13>}, clock @[Reg.scala 15:16]
    when io.prop_in : @[Reg.scala 16:19]
      A1.fraction <= io.A_in.fraction @[Reg.scala 16:23]
      A1.exponent <= io.A_in.exponent @[Reg.scala 16:23]
      A1.sign <= io.A_in.sign @[Reg.scala 16:23]
      A1.nan <= io.A_in.nan @[Reg.scala 16:23]
      A1.zero <= io.A_in.zero @[Reg.scala 16:23]
      skip @[Reg.scala 16:19]
    node _T_1 = mux(io.prop_in, A1, A0) @[Tile.scala 25:36]
    reg A : {zero : UInt<1>, nan : UInt<1>, sign : UInt<1>, exponent : SInt<6>, fraction : UInt<13>}, clock @[Tile.scala 25:32]
    A.fraction <= _T_1.fraction @[Tile.scala 25:32]
    A.exponent <= _T_1.exponent @[Tile.scala 25:32]
    A.sign <= _T_1.sign @[Tile.scala 25:32]
    A.nan <= _T_1.nan @[Tile.scala 25:32]
    A.zero <= _T_1.zero @[Tile.scala 25:32]
    reg B : {zero : UInt<1>, nan : UInt<1>, sign : UInt<1>, exponent : SInt<6>, fraction : UInt<13>}, clock @[Tile.scala 26:32]
    B.fraction <= io.B_in.fraction @[Tile.scala 26:32]
    B.exponent <= io.B_in.exponent @[Tile.scala 26:32]
    B.sign <= io.B_in.sign @[Tile.scala 26:32]
    B.nan <= io.B_in.nan @[Tile.scala 26:32]
    B.zero <= io.B_in.zero @[Tile.scala 26:32]
    reg prop : UInt<1>, clock @[Tile.scala 27:35]
    prop <= io.prop_in @[Tile.scala 27:35]
    inst mac of linearMultiplierMAC_12 @[Tile.scala 29:33]
    mac.clock <= clock
    mac.reset <= reset
    node _T_2 = mux(io.prop_in, A0, A1) @[Tile.scala 30:32]
    mac.io.A.fraction <= _T_2.fraction @[Tile.scala 30:26]
    mac.io.A.exponent <= _T_2.exponent @[Tile.scala 30:26]
    mac.io.A.sign <= _T_2.sign @[Tile.scala 30:26]
    mac.io.A.nan <= _T_2.nan @[Tile.scala 30:26]
    mac.io.A.zero <= _T_2.zero @[Tile.scala 30:26]
    mac.io.B.fraction <= io.B_in.fraction @[Tile.scala 31:26]
    mac.io.B.exponent <= io.B_in.exponent @[Tile.scala 31:26]
    mac.io.B.sign <= io.B_in.sign @[Tile.scala 31:26]
    mac.io.B.nan <= io.B_in.nan @[Tile.scala 31:26]
    mac.io.B.zero <= io.B_in.zero @[Tile.scala 31:26]
    mac.io.C.number <= io.C_in.number @[Tile.scala 32:26]
    mac.io.C.nan <= io.C_in.nan @[Tile.scala 32:26]
    mac.io.C.zero <= io.C_in.zero @[Tile.scala 32:26]
    reg C : {zero : UInt<1>, nan : UInt<1>, number : SInt<129>}, clock @[Tile.scala 34:32]
    C.number <= mac.io.out.number @[Tile.scala 34:32]
    C.nan <= mac.io.out.nan @[Tile.scala 34:32]
    C.zero <= mac.io.out.zero @[Tile.scala 34:32]
    io.A_out.fraction <= A.fraction @[Tile.scala 36:26]
    io.A_out.exponent <= A.exponent @[Tile.scala 36:26]
    io.A_out.sign <= A.sign @[Tile.scala 36:26]
    io.A_out.nan <= A.nan @[Tile.scala 36:26]
    io.A_out.zero <= A.zero @[Tile.scala 36:26]
    io.B_out.fraction <= B.fraction @[Tile.scala 37:26]
    io.B_out.exponent <= B.exponent @[Tile.scala 37:26]
    io.B_out.sign <= B.sign @[Tile.scala 37:26]
    io.B_out.nan <= B.nan @[Tile.scala 37:26]
    io.B_out.zero <= B.zero @[Tile.scala 37:26]
    io.C_out.number <= C.number @[Tile.scala 38:26]
    io.C_out.nan <= C.nan @[Tile.scala 38:26]
    io.C_out.zero <= C.zero @[Tile.scala 38:26]
    io.prop_out <= prop @[Tile.scala 39:29]
    
  module linearMultiplier_13 : 
    input clock : Clock
    input reset : Reset
    output io : {flip A : {zero : UInt<1>, nan : UInt<1>, sign : UInt<1>, exponent : SInt<6>, fraction : UInt<13>}, flip B : {zero : UInt<1>, nan : UInt<1>, sign : UInt<1>, exponent : SInt<6>, fraction : UInt<13>}, out : {zero : UInt<1>, nan : UInt<1>, number : SInt<129>}}
    
    node exponentSum = add(io.A.exponent, io.B.exponent) @[Multiplier.scala 15:41]
    node fractionProduct = mul(io.A.fraction, io.B.fraction) @[Multiplier.scala 16:45]
    node _T = add(asSInt(UInt<7>("h038")), exponentSum) @[Multiplier.scala 17:34]
    node shift = sub(_T, asSInt(UInt<6>("h018"))) @[Multiplier.scala 17:49]
    node _T_1 = lt(shift, asSInt(UInt<1>("h00"))) @[Multiplier.scala 18:32]
    node _T_2 = sub(asSInt(UInt<1>("h00")), shift) @[Multiplier.scala 18:59]
    node _T_3 = tail(_T_2, 1) @[Multiplier.scala 18:59]
    node _T_4 = asSInt(_T_3) @[Multiplier.scala 18:59]
    node _T_5 = asUInt(_T_4) @[Multiplier.scala 18:67]
    node _T_6 = dshr(fractionProduct, _T_5) @[Multiplier.scala 18:55]
    node _T_7 = asUInt(shift) @[Multiplier.scala 18:100]
    node _T_8 = dshl(fractionProduct, _T_7) @[Multiplier.scala 18:91]
    node number = mux(_T_1, _T_6, _T_8) @[Multiplier.scala 18:25]
    node _T_9 = or(io.A.zero, io.B.zero) @[Multiplier.scala 20:34]
    node _T_10 = sub(asSInt(UInt<1>("h00")), asSInt(UInt<6>("h018"))) @[Multiplier.scala 20:57]
    node _T_11 = tail(_T_10, 1) @[Multiplier.scala 20:57]
    node _T_12 = asSInt(_T_11) @[Multiplier.scala 20:57]
    node _T_13 = lt(shift, _T_12) @[Multiplier.scala 20:55]
    node _T_14 = or(_T_9, _T_13) @[Multiplier.scala 20:46]
    io.out.zero <= _T_14 @[Multiplier.scala 20:21]
    node _T_15 = or(io.A.nan, io.B.nan) @[Multiplier.scala 21:32]
    node _T_16 = geq(shift, asSInt(UInt<8>("h067"))) @[Multiplier.scala 21:52]
    node _T_17 = or(_T_15, _T_16) @[Multiplier.scala 21:43]
    io.out.nan <= _T_17 @[Multiplier.scala 21:20]
    node _T_18 = or(io.out.zero, io.out.nan) @[Multiplier.scala 22:42]
    node _T_19 = xor(io.A.sign, io.B.sign) @[Multiplier.scala 22:76]
    node _T_20 = bits(_T_19, 0, 0) @[Multiplier.scala 22:89]
    node _T_21 = asSInt(number) @[Multiplier.scala 22:105]
    node _T_22 = sub(asSInt(UInt<1>("h00")), _T_21) @[Multiplier.scala 22:97]
    node _T_23 = tail(_T_22, 1) @[Multiplier.scala 22:97]
    node _T_24 = asSInt(_T_23) @[Multiplier.scala 22:97]
    node _T_25 = asSInt(number) @[Multiplier.scala 22:120]
    node _T_26 = mux(_T_20, _T_24, _T_25) @[Multiplier.scala 22:64]
    node _T_27 = mux(_T_18, asSInt(UInt<1>("h00")), _T_26) @[Multiplier.scala 22:29]
    io.out.number <= _T_27 @[Multiplier.scala 22:23]
    
  module linearMultiplierMAC_13 : 
    input clock : Clock
    input reset : Reset
    output io : {flip A : {zero : UInt<1>, nan : UInt<1>, sign : UInt<1>, exponent : SInt<6>, fraction : UInt<13>}, flip B : {zero : UInt<1>, nan : UInt<1>, sign : UInt<1>, exponent : SInt<6>, fraction : UInt<13>}, flip C : {zero : UInt<1>, nan : UInt<1>, number : SInt<129>}, out : {zero : UInt<1>, nan : UInt<1>, number : SInt<129>}}
    
    inst multiplier of linearMultiplier_13 @[Multiplier.scala 33:32]
    multiplier.clock <= clock
    multiplier.reset <= reset
    multiplier.io.A.fraction <= io.A.fraction @[Multiplier.scala 34:25]
    multiplier.io.A.exponent <= io.A.exponent @[Multiplier.scala 34:25]
    multiplier.io.A.sign <= io.A.sign @[Multiplier.scala 34:25]
    multiplier.io.A.nan <= io.A.nan @[Multiplier.scala 34:25]
    multiplier.io.A.zero <= io.A.zero @[Multiplier.scala 34:25]
    multiplier.io.B.fraction <= io.B.fraction @[Multiplier.scala 35:25]
    multiplier.io.B.exponent <= io.B.exponent @[Multiplier.scala 35:25]
    multiplier.io.B.sign <= io.B.sign @[Multiplier.scala 35:25]
    multiplier.io.B.nan <= io.B.nan @[Multiplier.scala 35:25]
    multiplier.io.B.zero <= io.B.zero @[Multiplier.scala 35:25]
    node _T = add(multiplier.io.out.number, io.C.number) @[Multiplier.scala 36:44]
    node _T_1 = tail(_T, 1) @[Multiplier.scala 36:44]
    node sum = asSInt(_T_1) @[Multiplier.scala 36:44]
    node _T_2 = and(multiplier.io.out.zero, io.C.zero) @[Multiplier.scala 37:48]
    node _T_3 = bits(io.C.number, 128, 128) @[Multiplier.scala 37:76]
    node _T_4 = bits(multiplier.io.out.number, 128, 128) @[Multiplier.scala 37:127]
    node _T_5 = eq(_T_3, _T_4) @[Multiplier.scala 37:99]
    node _T_6 = bits(io.C.number, 128, 128) @[Multiplier.scala 37:166]
    node _T_7 = eq(_T_6, UInt<1>("h01")) @[Multiplier.scala 37:189]
    node _T_8 = and(_T_5, _T_7) @[Multiplier.scala 37:151]
    node _T_9 = bits(sum, 128, 128) @[Multiplier.scala 37:205]
    node _T_10 = eq(_T_9, UInt<1>("h00")) @[Multiplier.scala 37:228]
    node _T_11 = and(_T_8, _T_10) @[Multiplier.scala 37:198]
    node _T_12 = or(_T_2, _T_11) @[Multiplier.scala 37:61]
    io.out.zero <= _T_12 @[Multiplier.scala 37:21]
    node _T_13 = or(multiplier.io.out.nan, io.C.nan) @[Multiplier.scala 38:45]
    node _T_14 = bits(io.C.number, 128, 128) @[Multiplier.scala 38:71]
    node _T_15 = bits(multiplier.io.out.number, 128, 128) @[Multiplier.scala 38:122]
    node _T_16 = eq(_T_14, _T_15) @[Multiplier.scala 38:94]
    node _T_17 = bits(io.C.number, 128, 128) @[Multiplier.scala 38:161]
    node _T_18 = eq(_T_17, UInt<1>("h00")) @[Multiplier.scala 38:184]
    node _T_19 = and(_T_16, _T_18) @[Multiplier.scala 38:146]
    node _T_20 = bits(sum, 128, 128) @[Multiplier.scala 38:200]
    node _T_21 = eq(_T_20, UInt<1>("h01")) @[Multiplier.scala 38:223]
    node _T_22 = and(_T_19, _T_21) @[Multiplier.scala 38:193]
    node _T_23 = or(_T_13, _T_22) @[Multiplier.scala 38:56]
    io.out.nan <= _T_23 @[Multiplier.scala 38:20]
    io.out.number <= sum @[Multiplier.scala 39:23]
    
  module linearTile_13 : 
    input clock : Clock
    input reset : Reset
    output io : {flip A_in : {zero : UInt<1>, nan : UInt<1>, sign : UInt<1>, exponent : SInt<6>, fraction : UInt<13>}, flip B_in : {zero : UInt<1>, nan : UInt<1>, sign : UInt<1>, exponent : SInt<6>, fraction : UInt<13>}, flip C_in : {zero : UInt<1>, nan : UInt<1>, number : SInt<129>}, flip prop_in : UInt<1>, A_out : {zero : UInt<1>, nan : UInt<1>, sign : UInt<1>, exponent : SInt<6>, fraction : UInt<13>}, B_out : {zero : UInt<1>, nan : UInt<1>, sign : UInt<1>, exponent : SInt<6>, fraction : UInt<13>}, C_out : {zero : UInt<1>, nan : UInt<1>, number : SInt<129>}, prop_out : UInt<1>}
    
    node _T = not(io.prop_in) @[Tile.scala 22:45]
    reg A0 : {zero : UInt<1>, nan : UInt<1>, sign : UInt<1>, exponent : SInt<6>, fraction : UInt<13>}, clock @[Reg.scala 15:16]
    when _T : @[Reg.scala 16:19]
      A0.fraction <= io.A_in.fraction @[Reg.scala 16:23]
      A0.exponent <= io.A_in.exponent @[Reg.scala 16:23]
      A0.sign <= io.A_in.sign @[Reg.scala 16:23]
      A0.nan <= io.A_in.nan @[Reg.scala 16:23]
      A0.zero <= io.A_in.zero @[Reg.scala 16:23]
      skip @[Reg.scala 16:19]
    reg A1 : {zero : UInt<1>, nan : UInt<1>, sign : UInt<1>, exponent : SInt<6>, fraction : UInt<13>}, clock @[Reg.scala 15:16]
    when io.prop_in : @[Reg.scala 16:19]
      A1.fraction <= io.A_in.fraction @[Reg.scala 16:23]
      A1.exponent <= io.A_in.exponent @[Reg.scala 16:23]
      A1.sign <= io.A_in.sign @[Reg.scala 16:23]
      A1.nan <= io.A_in.nan @[Reg.scala 16:23]
      A1.zero <= io.A_in.zero @[Reg.scala 16:23]
      skip @[Reg.scala 16:19]
    node _T_1 = mux(io.prop_in, A1, A0) @[Tile.scala 25:36]
    reg A : {zero : UInt<1>, nan : UInt<1>, sign : UInt<1>, exponent : SInt<6>, fraction : UInt<13>}, clock @[Tile.scala 25:32]
    A.fraction <= _T_1.fraction @[Tile.scala 25:32]
    A.exponent <= _T_1.exponent @[Tile.scala 25:32]
    A.sign <= _T_1.sign @[Tile.scala 25:32]
    A.nan <= _T_1.nan @[Tile.scala 25:32]
    A.zero <= _T_1.zero @[Tile.scala 25:32]
    reg B : {zero : UInt<1>, nan : UInt<1>, sign : UInt<1>, exponent : SInt<6>, fraction : UInt<13>}, clock @[Tile.scala 26:32]
    B.fraction <= io.B_in.fraction @[Tile.scala 26:32]
    B.exponent <= io.B_in.exponent @[Tile.scala 26:32]
    B.sign <= io.B_in.sign @[Tile.scala 26:32]
    B.nan <= io.B_in.nan @[Tile.scala 26:32]
    B.zero <= io.B_in.zero @[Tile.scala 26:32]
    reg prop : UInt<1>, clock @[Tile.scala 27:35]
    prop <= io.prop_in @[Tile.scala 27:35]
    inst mac of linearMultiplierMAC_13 @[Tile.scala 29:33]
    mac.clock <= clock
    mac.reset <= reset
    node _T_2 = mux(io.prop_in, A0, A1) @[Tile.scala 30:32]
    mac.io.A.fraction <= _T_2.fraction @[Tile.scala 30:26]
    mac.io.A.exponent <= _T_2.exponent @[Tile.scala 30:26]
    mac.io.A.sign <= _T_2.sign @[Tile.scala 30:26]
    mac.io.A.nan <= _T_2.nan @[Tile.scala 30:26]
    mac.io.A.zero <= _T_2.zero @[Tile.scala 30:26]
    mac.io.B.fraction <= io.B_in.fraction @[Tile.scala 31:26]
    mac.io.B.exponent <= io.B_in.exponent @[Tile.scala 31:26]
    mac.io.B.sign <= io.B_in.sign @[Tile.scala 31:26]
    mac.io.B.nan <= io.B_in.nan @[Tile.scala 31:26]
    mac.io.B.zero <= io.B_in.zero @[Tile.scala 31:26]
    mac.io.C.number <= io.C_in.number @[Tile.scala 32:26]
    mac.io.C.nan <= io.C_in.nan @[Tile.scala 32:26]
    mac.io.C.zero <= io.C_in.zero @[Tile.scala 32:26]
    reg C : {zero : UInt<1>, nan : UInt<1>, number : SInt<129>}, clock @[Tile.scala 34:32]
    C.number <= mac.io.out.number @[Tile.scala 34:32]
    C.nan <= mac.io.out.nan @[Tile.scala 34:32]
    C.zero <= mac.io.out.zero @[Tile.scala 34:32]
    io.A_out.fraction <= A.fraction @[Tile.scala 36:26]
    io.A_out.exponent <= A.exponent @[Tile.scala 36:26]
    io.A_out.sign <= A.sign @[Tile.scala 36:26]
    io.A_out.nan <= A.nan @[Tile.scala 36:26]
    io.A_out.zero <= A.zero @[Tile.scala 36:26]
    io.B_out.fraction <= B.fraction @[Tile.scala 37:26]
    io.B_out.exponent <= B.exponent @[Tile.scala 37:26]
    io.B_out.sign <= B.sign @[Tile.scala 37:26]
    io.B_out.nan <= B.nan @[Tile.scala 37:26]
    io.B_out.zero <= B.zero @[Tile.scala 37:26]
    io.C_out.number <= C.number @[Tile.scala 38:26]
    io.C_out.nan <= C.nan @[Tile.scala 38:26]
    io.C_out.zero <= C.zero @[Tile.scala 38:26]
    io.prop_out <= prop @[Tile.scala 39:29]
    
  module linearMultiplier_14 : 
    input clock : Clock
    input reset : Reset
    output io : {flip A : {zero : UInt<1>, nan : UInt<1>, sign : UInt<1>, exponent : SInt<6>, fraction : UInt<13>}, flip B : {zero : UInt<1>, nan : UInt<1>, sign : UInt<1>, exponent : SInt<6>, fraction : UInt<13>}, out : {zero : UInt<1>, nan : UInt<1>, number : SInt<129>}}
    
    node exponentSum = add(io.A.exponent, io.B.exponent) @[Multiplier.scala 15:41]
    node fractionProduct = mul(io.A.fraction, io.B.fraction) @[Multiplier.scala 16:45]
    node _T = add(asSInt(UInt<7>("h038")), exponentSum) @[Multiplier.scala 17:34]
    node shift = sub(_T, asSInt(UInt<6>("h018"))) @[Multiplier.scala 17:49]
    node _T_1 = lt(shift, asSInt(UInt<1>("h00"))) @[Multiplier.scala 18:32]
    node _T_2 = sub(asSInt(UInt<1>("h00")), shift) @[Multiplier.scala 18:59]
    node _T_3 = tail(_T_2, 1) @[Multiplier.scala 18:59]
    node _T_4 = asSInt(_T_3) @[Multiplier.scala 18:59]
    node _T_5 = asUInt(_T_4) @[Multiplier.scala 18:67]
    node _T_6 = dshr(fractionProduct, _T_5) @[Multiplier.scala 18:55]
    node _T_7 = asUInt(shift) @[Multiplier.scala 18:100]
    node _T_8 = dshl(fractionProduct, _T_7) @[Multiplier.scala 18:91]
    node number = mux(_T_1, _T_6, _T_8) @[Multiplier.scala 18:25]
    node _T_9 = or(io.A.zero, io.B.zero) @[Multiplier.scala 20:34]
    node _T_10 = sub(asSInt(UInt<1>("h00")), asSInt(UInt<6>("h018"))) @[Multiplier.scala 20:57]
    node _T_11 = tail(_T_10, 1) @[Multiplier.scala 20:57]
    node _T_12 = asSInt(_T_11) @[Multiplier.scala 20:57]
    node _T_13 = lt(shift, _T_12) @[Multiplier.scala 20:55]
    node _T_14 = or(_T_9, _T_13) @[Multiplier.scala 20:46]
    io.out.zero <= _T_14 @[Multiplier.scala 20:21]
    node _T_15 = or(io.A.nan, io.B.nan) @[Multiplier.scala 21:32]
    node _T_16 = geq(shift, asSInt(UInt<8>("h067"))) @[Multiplier.scala 21:52]
    node _T_17 = or(_T_15, _T_16) @[Multiplier.scala 21:43]
    io.out.nan <= _T_17 @[Multiplier.scala 21:20]
    node _T_18 = or(io.out.zero, io.out.nan) @[Multiplier.scala 22:42]
    node _T_19 = xor(io.A.sign, io.B.sign) @[Multiplier.scala 22:76]
    node _T_20 = bits(_T_19, 0, 0) @[Multiplier.scala 22:89]
    node _T_21 = asSInt(number) @[Multiplier.scala 22:105]
    node _T_22 = sub(asSInt(UInt<1>("h00")), _T_21) @[Multiplier.scala 22:97]
    node _T_23 = tail(_T_22, 1) @[Multiplier.scala 22:97]
    node _T_24 = asSInt(_T_23) @[Multiplier.scala 22:97]
    node _T_25 = asSInt(number) @[Multiplier.scala 22:120]
    node _T_26 = mux(_T_20, _T_24, _T_25) @[Multiplier.scala 22:64]
    node _T_27 = mux(_T_18, asSInt(UInt<1>("h00")), _T_26) @[Multiplier.scala 22:29]
    io.out.number <= _T_27 @[Multiplier.scala 22:23]
    
  module linearMultiplierMAC_14 : 
    input clock : Clock
    input reset : Reset
    output io : {flip A : {zero : UInt<1>, nan : UInt<1>, sign : UInt<1>, exponent : SInt<6>, fraction : UInt<13>}, flip B : {zero : UInt<1>, nan : UInt<1>, sign : UInt<1>, exponent : SInt<6>, fraction : UInt<13>}, flip C : {zero : UInt<1>, nan : UInt<1>, number : SInt<129>}, out : {zero : UInt<1>, nan : UInt<1>, number : SInt<129>}}
    
    inst multiplier of linearMultiplier_14 @[Multiplier.scala 33:32]
    multiplier.clock <= clock
    multiplier.reset <= reset
    multiplier.io.A.fraction <= io.A.fraction @[Multiplier.scala 34:25]
    multiplier.io.A.exponent <= io.A.exponent @[Multiplier.scala 34:25]
    multiplier.io.A.sign <= io.A.sign @[Multiplier.scala 34:25]
    multiplier.io.A.nan <= io.A.nan @[Multiplier.scala 34:25]
    multiplier.io.A.zero <= io.A.zero @[Multiplier.scala 34:25]
    multiplier.io.B.fraction <= io.B.fraction @[Multiplier.scala 35:25]
    multiplier.io.B.exponent <= io.B.exponent @[Multiplier.scala 35:25]
    multiplier.io.B.sign <= io.B.sign @[Multiplier.scala 35:25]
    multiplier.io.B.nan <= io.B.nan @[Multiplier.scala 35:25]
    multiplier.io.B.zero <= io.B.zero @[Multiplier.scala 35:25]
    node _T = add(multiplier.io.out.number, io.C.number) @[Multiplier.scala 36:44]
    node _T_1 = tail(_T, 1) @[Multiplier.scala 36:44]
    node sum = asSInt(_T_1) @[Multiplier.scala 36:44]
    node _T_2 = and(multiplier.io.out.zero, io.C.zero) @[Multiplier.scala 37:48]
    node _T_3 = bits(io.C.number, 128, 128) @[Multiplier.scala 37:76]
    node _T_4 = bits(multiplier.io.out.number, 128, 128) @[Multiplier.scala 37:127]
    node _T_5 = eq(_T_3, _T_4) @[Multiplier.scala 37:99]
    node _T_6 = bits(io.C.number, 128, 128) @[Multiplier.scala 37:166]
    node _T_7 = eq(_T_6, UInt<1>("h01")) @[Multiplier.scala 37:189]
    node _T_8 = and(_T_5, _T_7) @[Multiplier.scala 37:151]
    node _T_9 = bits(sum, 128, 128) @[Multiplier.scala 37:205]
    node _T_10 = eq(_T_9, UInt<1>("h00")) @[Multiplier.scala 37:228]
    node _T_11 = and(_T_8, _T_10) @[Multiplier.scala 37:198]
    node _T_12 = or(_T_2, _T_11) @[Multiplier.scala 37:61]
    io.out.zero <= _T_12 @[Multiplier.scala 37:21]
    node _T_13 = or(multiplier.io.out.nan, io.C.nan) @[Multiplier.scala 38:45]
    node _T_14 = bits(io.C.number, 128, 128) @[Multiplier.scala 38:71]
    node _T_15 = bits(multiplier.io.out.number, 128, 128) @[Multiplier.scala 38:122]
    node _T_16 = eq(_T_14, _T_15) @[Multiplier.scala 38:94]
    node _T_17 = bits(io.C.number, 128, 128) @[Multiplier.scala 38:161]
    node _T_18 = eq(_T_17, UInt<1>("h00")) @[Multiplier.scala 38:184]
    node _T_19 = and(_T_16, _T_18) @[Multiplier.scala 38:146]
    node _T_20 = bits(sum, 128, 128) @[Multiplier.scala 38:200]
    node _T_21 = eq(_T_20, UInt<1>("h01")) @[Multiplier.scala 38:223]
    node _T_22 = and(_T_19, _T_21) @[Multiplier.scala 38:193]
    node _T_23 = or(_T_13, _T_22) @[Multiplier.scala 38:56]
    io.out.nan <= _T_23 @[Multiplier.scala 38:20]
    io.out.number <= sum @[Multiplier.scala 39:23]
    
  module linearTile_14 : 
    input clock : Clock
    input reset : Reset
    output io : {flip A_in : {zero : UInt<1>, nan : UInt<1>, sign : UInt<1>, exponent : SInt<6>, fraction : UInt<13>}, flip B_in : {zero : UInt<1>, nan : UInt<1>, sign : UInt<1>, exponent : SInt<6>, fraction : UInt<13>}, flip C_in : {zero : UInt<1>, nan : UInt<1>, number : SInt<129>}, flip prop_in : UInt<1>, A_out : {zero : UInt<1>, nan : UInt<1>, sign : UInt<1>, exponent : SInt<6>, fraction : UInt<13>}, B_out : {zero : UInt<1>, nan : UInt<1>, sign : UInt<1>, exponent : SInt<6>, fraction : UInt<13>}, C_out : {zero : UInt<1>, nan : UInt<1>, number : SInt<129>}, prop_out : UInt<1>}
    
    node _T = not(io.prop_in) @[Tile.scala 22:45]
    reg A0 : {zero : UInt<1>, nan : UInt<1>, sign : UInt<1>, exponent : SInt<6>, fraction : UInt<13>}, clock @[Reg.scala 15:16]
    when _T : @[Reg.scala 16:19]
      A0.fraction <= io.A_in.fraction @[Reg.scala 16:23]
      A0.exponent <= io.A_in.exponent @[Reg.scala 16:23]
      A0.sign <= io.A_in.sign @[Reg.scala 16:23]
      A0.nan <= io.A_in.nan @[Reg.scala 16:23]
      A0.zero <= io.A_in.zero @[Reg.scala 16:23]
      skip @[Reg.scala 16:19]
    reg A1 : {zero : UInt<1>, nan : UInt<1>, sign : UInt<1>, exponent : SInt<6>, fraction : UInt<13>}, clock @[Reg.scala 15:16]
    when io.prop_in : @[Reg.scala 16:19]
      A1.fraction <= io.A_in.fraction @[Reg.scala 16:23]
      A1.exponent <= io.A_in.exponent @[Reg.scala 16:23]
      A1.sign <= io.A_in.sign @[Reg.scala 16:23]
      A1.nan <= io.A_in.nan @[Reg.scala 16:23]
      A1.zero <= io.A_in.zero @[Reg.scala 16:23]
      skip @[Reg.scala 16:19]
    node _T_1 = mux(io.prop_in, A1, A0) @[Tile.scala 25:36]
    reg A : {zero : UInt<1>, nan : UInt<1>, sign : UInt<1>, exponent : SInt<6>, fraction : UInt<13>}, clock @[Tile.scala 25:32]
    A.fraction <= _T_1.fraction @[Tile.scala 25:32]
    A.exponent <= _T_1.exponent @[Tile.scala 25:32]
    A.sign <= _T_1.sign @[Tile.scala 25:32]
    A.nan <= _T_1.nan @[Tile.scala 25:32]
    A.zero <= _T_1.zero @[Tile.scala 25:32]
    reg B : {zero : UInt<1>, nan : UInt<1>, sign : UInt<1>, exponent : SInt<6>, fraction : UInt<13>}, clock @[Tile.scala 26:32]
    B.fraction <= io.B_in.fraction @[Tile.scala 26:32]
    B.exponent <= io.B_in.exponent @[Tile.scala 26:32]
    B.sign <= io.B_in.sign @[Tile.scala 26:32]
    B.nan <= io.B_in.nan @[Tile.scala 26:32]
    B.zero <= io.B_in.zero @[Tile.scala 26:32]
    reg prop : UInt<1>, clock @[Tile.scala 27:35]
    prop <= io.prop_in @[Tile.scala 27:35]
    inst mac of linearMultiplierMAC_14 @[Tile.scala 29:33]
    mac.clock <= clock
    mac.reset <= reset
    node _T_2 = mux(io.prop_in, A0, A1) @[Tile.scala 30:32]
    mac.io.A.fraction <= _T_2.fraction @[Tile.scala 30:26]
    mac.io.A.exponent <= _T_2.exponent @[Tile.scala 30:26]
    mac.io.A.sign <= _T_2.sign @[Tile.scala 30:26]
    mac.io.A.nan <= _T_2.nan @[Tile.scala 30:26]
    mac.io.A.zero <= _T_2.zero @[Tile.scala 30:26]
    mac.io.B.fraction <= io.B_in.fraction @[Tile.scala 31:26]
    mac.io.B.exponent <= io.B_in.exponent @[Tile.scala 31:26]
    mac.io.B.sign <= io.B_in.sign @[Tile.scala 31:26]
    mac.io.B.nan <= io.B_in.nan @[Tile.scala 31:26]
    mac.io.B.zero <= io.B_in.zero @[Tile.scala 31:26]
    mac.io.C.number <= io.C_in.number @[Tile.scala 32:26]
    mac.io.C.nan <= io.C_in.nan @[Tile.scala 32:26]
    mac.io.C.zero <= io.C_in.zero @[Tile.scala 32:26]
    reg C : {zero : UInt<1>, nan : UInt<1>, number : SInt<129>}, clock @[Tile.scala 34:32]
    C.number <= mac.io.out.number @[Tile.scala 34:32]
    C.nan <= mac.io.out.nan @[Tile.scala 34:32]
    C.zero <= mac.io.out.zero @[Tile.scala 34:32]
    io.A_out.fraction <= A.fraction @[Tile.scala 36:26]
    io.A_out.exponent <= A.exponent @[Tile.scala 36:26]
    io.A_out.sign <= A.sign @[Tile.scala 36:26]
    io.A_out.nan <= A.nan @[Tile.scala 36:26]
    io.A_out.zero <= A.zero @[Tile.scala 36:26]
    io.B_out.fraction <= B.fraction @[Tile.scala 37:26]
    io.B_out.exponent <= B.exponent @[Tile.scala 37:26]
    io.B_out.sign <= B.sign @[Tile.scala 37:26]
    io.B_out.nan <= B.nan @[Tile.scala 37:26]
    io.B_out.zero <= B.zero @[Tile.scala 37:26]
    io.C_out.number <= C.number @[Tile.scala 38:26]
    io.C_out.nan <= C.nan @[Tile.scala 38:26]
    io.C_out.zero <= C.zero @[Tile.scala 38:26]
    io.prop_out <= prop @[Tile.scala 39:29]
    
  module linearMultiplier_15 : 
    input clock : Clock
    input reset : Reset
    output io : {flip A : {zero : UInt<1>, nan : UInt<1>, sign : UInt<1>, exponent : SInt<6>, fraction : UInt<13>}, flip B : {zero : UInt<1>, nan : UInt<1>, sign : UInt<1>, exponent : SInt<6>, fraction : UInt<13>}, out : {zero : UInt<1>, nan : UInt<1>, number : SInt<129>}}
    
    node exponentSum = add(io.A.exponent, io.B.exponent) @[Multiplier.scala 15:41]
    node fractionProduct = mul(io.A.fraction, io.B.fraction) @[Multiplier.scala 16:45]
    node _T = add(asSInt(UInt<7>("h038")), exponentSum) @[Multiplier.scala 17:34]
    node shift = sub(_T, asSInt(UInt<6>("h018"))) @[Multiplier.scala 17:49]
    node _T_1 = lt(shift, asSInt(UInt<1>("h00"))) @[Multiplier.scala 18:32]
    node _T_2 = sub(asSInt(UInt<1>("h00")), shift) @[Multiplier.scala 18:59]
    node _T_3 = tail(_T_2, 1) @[Multiplier.scala 18:59]
    node _T_4 = asSInt(_T_3) @[Multiplier.scala 18:59]
    node _T_5 = asUInt(_T_4) @[Multiplier.scala 18:67]
    node _T_6 = dshr(fractionProduct, _T_5) @[Multiplier.scala 18:55]
    node _T_7 = asUInt(shift) @[Multiplier.scala 18:100]
    node _T_8 = dshl(fractionProduct, _T_7) @[Multiplier.scala 18:91]
    node number = mux(_T_1, _T_6, _T_8) @[Multiplier.scala 18:25]
    node _T_9 = or(io.A.zero, io.B.zero) @[Multiplier.scala 20:34]
    node _T_10 = sub(asSInt(UInt<1>("h00")), asSInt(UInt<6>("h018"))) @[Multiplier.scala 20:57]
    node _T_11 = tail(_T_10, 1) @[Multiplier.scala 20:57]
    node _T_12 = asSInt(_T_11) @[Multiplier.scala 20:57]
    node _T_13 = lt(shift, _T_12) @[Multiplier.scala 20:55]
    node _T_14 = or(_T_9, _T_13) @[Multiplier.scala 20:46]
    io.out.zero <= _T_14 @[Multiplier.scala 20:21]
    node _T_15 = or(io.A.nan, io.B.nan) @[Multiplier.scala 21:32]
    node _T_16 = geq(shift, asSInt(UInt<8>("h067"))) @[Multiplier.scala 21:52]
    node _T_17 = or(_T_15, _T_16) @[Multiplier.scala 21:43]
    io.out.nan <= _T_17 @[Multiplier.scala 21:20]
    node _T_18 = or(io.out.zero, io.out.nan) @[Multiplier.scala 22:42]
    node _T_19 = xor(io.A.sign, io.B.sign) @[Multiplier.scala 22:76]
    node _T_20 = bits(_T_19, 0, 0) @[Multiplier.scala 22:89]
    node _T_21 = asSInt(number) @[Multiplier.scala 22:105]
    node _T_22 = sub(asSInt(UInt<1>("h00")), _T_21) @[Multiplier.scala 22:97]
    node _T_23 = tail(_T_22, 1) @[Multiplier.scala 22:97]
    node _T_24 = asSInt(_T_23) @[Multiplier.scala 22:97]
    node _T_25 = asSInt(number) @[Multiplier.scala 22:120]
    node _T_26 = mux(_T_20, _T_24, _T_25) @[Multiplier.scala 22:64]
    node _T_27 = mux(_T_18, asSInt(UInt<1>("h00")), _T_26) @[Multiplier.scala 22:29]
    io.out.number <= _T_27 @[Multiplier.scala 22:23]
    
  module linearMultiplierMAC_15 : 
    input clock : Clock
    input reset : Reset
    output io : {flip A : {zero : UInt<1>, nan : UInt<1>, sign : UInt<1>, exponent : SInt<6>, fraction : UInt<13>}, flip B : {zero : UInt<1>, nan : UInt<1>, sign : UInt<1>, exponent : SInt<6>, fraction : UInt<13>}, flip C : {zero : UInt<1>, nan : UInt<1>, number : SInt<129>}, out : {zero : UInt<1>, nan : UInt<1>, number : SInt<129>}}
    
    inst multiplier of linearMultiplier_15 @[Multiplier.scala 33:32]
    multiplier.clock <= clock
    multiplier.reset <= reset
    multiplier.io.A.fraction <= io.A.fraction @[Multiplier.scala 34:25]
    multiplier.io.A.exponent <= io.A.exponent @[Multiplier.scala 34:25]
    multiplier.io.A.sign <= io.A.sign @[Multiplier.scala 34:25]
    multiplier.io.A.nan <= io.A.nan @[Multiplier.scala 34:25]
    multiplier.io.A.zero <= io.A.zero @[Multiplier.scala 34:25]
    multiplier.io.B.fraction <= io.B.fraction @[Multiplier.scala 35:25]
    multiplier.io.B.exponent <= io.B.exponent @[Multiplier.scala 35:25]
    multiplier.io.B.sign <= io.B.sign @[Multiplier.scala 35:25]
    multiplier.io.B.nan <= io.B.nan @[Multiplier.scala 35:25]
    multiplier.io.B.zero <= io.B.zero @[Multiplier.scala 35:25]
    node _T = add(multiplier.io.out.number, io.C.number) @[Multiplier.scala 36:44]
    node _T_1 = tail(_T, 1) @[Multiplier.scala 36:44]
    node sum = asSInt(_T_1) @[Multiplier.scala 36:44]
    node _T_2 = and(multiplier.io.out.zero, io.C.zero) @[Multiplier.scala 37:48]
    node _T_3 = bits(io.C.number, 128, 128) @[Multiplier.scala 37:76]
    node _T_4 = bits(multiplier.io.out.number, 128, 128) @[Multiplier.scala 37:127]
    node _T_5 = eq(_T_3, _T_4) @[Multiplier.scala 37:99]
    node _T_6 = bits(io.C.number, 128, 128) @[Multiplier.scala 37:166]
    node _T_7 = eq(_T_6, UInt<1>("h01")) @[Multiplier.scala 37:189]
    node _T_8 = and(_T_5, _T_7) @[Multiplier.scala 37:151]
    node _T_9 = bits(sum, 128, 128) @[Multiplier.scala 37:205]
    node _T_10 = eq(_T_9, UInt<1>("h00")) @[Multiplier.scala 37:228]
    node _T_11 = and(_T_8, _T_10) @[Multiplier.scala 37:198]
    node _T_12 = or(_T_2, _T_11) @[Multiplier.scala 37:61]
    io.out.zero <= _T_12 @[Multiplier.scala 37:21]
    node _T_13 = or(multiplier.io.out.nan, io.C.nan) @[Multiplier.scala 38:45]
    node _T_14 = bits(io.C.number, 128, 128) @[Multiplier.scala 38:71]
    node _T_15 = bits(multiplier.io.out.number, 128, 128) @[Multiplier.scala 38:122]
    node _T_16 = eq(_T_14, _T_15) @[Multiplier.scala 38:94]
    node _T_17 = bits(io.C.number, 128, 128) @[Multiplier.scala 38:161]
    node _T_18 = eq(_T_17, UInt<1>("h00")) @[Multiplier.scala 38:184]
    node _T_19 = and(_T_16, _T_18) @[Multiplier.scala 38:146]
    node _T_20 = bits(sum, 128, 128) @[Multiplier.scala 38:200]
    node _T_21 = eq(_T_20, UInt<1>("h01")) @[Multiplier.scala 38:223]
    node _T_22 = and(_T_19, _T_21) @[Multiplier.scala 38:193]
    node _T_23 = or(_T_13, _T_22) @[Multiplier.scala 38:56]
    io.out.nan <= _T_23 @[Multiplier.scala 38:20]
    io.out.number <= sum @[Multiplier.scala 39:23]
    
  module linearTile_15 : 
    input clock : Clock
    input reset : Reset
    output io : {flip A_in : {zero : UInt<1>, nan : UInt<1>, sign : UInt<1>, exponent : SInt<6>, fraction : UInt<13>}, flip B_in : {zero : UInt<1>, nan : UInt<1>, sign : UInt<1>, exponent : SInt<6>, fraction : UInt<13>}, flip C_in : {zero : UInt<1>, nan : UInt<1>, number : SInt<129>}, flip prop_in : UInt<1>, A_out : {zero : UInt<1>, nan : UInt<1>, sign : UInt<1>, exponent : SInt<6>, fraction : UInt<13>}, B_out : {zero : UInt<1>, nan : UInt<1>, sign : UInt<1>, exponent : SInt<6>, fraction : UInt<13>}, C_out : {zero : UInt<1>, nan : UInt<1>, number : SInt<129>}, prop_out : UInt<1>}
    
    node _T = not(io.prop_in) @[Tile.scala 22:45]
    reg A0 : {zero : UInt<1>, nan : UInt<1>, sign : UInt<1>, exponent : SInt<6>, fraction : UInt<13>}, clock @[Reg.scala 15:16]
    when _T : @[Reg.scala 16:19]
      A0.fraction <= io.A_in.fraction @[Reg.scala 16:23]
      A0.exponent <= io.A_in.exponent @[Reg.scala 16:23]
      A0.sign <= io.A_in.sign @[Reg.scala 16:23]
      A0.nan <= io.A_in.nan @[Reg.scala 16:23]
      A0.zero <= io.A_in.zero @[Reg.scala 16:23]
      skip @[Reg.scala 16:19]
    reg A1 : {zero : UInt<1>, nan : UInt<1>, sign : UInt<1>, exponent : SInt<6>, fraction : UInt<13>}, clock @[Reg.scala 15:16]
    when io.prop_in : @[Reg.scala 16:19]
      A1.fraction <= io.A_in.fraction @[Reg.scala 16:23]
      A1.exponent <= io.A_in.exponent @[Reg.scala 16:23]
      A1.sign <= io.A_in.sign @[Reg.scala 16:23]
      A1.nan <= io.A_in.nan @[Reg.scala 16:23]
      A1.zero <= io.A_in.zero @[Reg.scala 16:23]
      skip @[Reg.scala 16:19]
    node _T_1 = mux(io.prop_in, A1, A0) @[Tile.scala 25:36]
    reg A : {zero : UInt<1>, nan : UInt<1>, sign : UInt<1>, exponent : SInt<6>, fraction : UInt<13>}, clock @[Tile.scala 25:32]
    A.fraction <= _T_1.fraction @[Tile.scala 25:32]
    A.exponent <= _T_1.exponent @[Tile.scala 25:32]
    A.sign <= _T_1.sign @[Tile.scala 25:32]
    A.nan <= _T_1.nan @[Tile.scala 25:32]
    A.zero <= _T_1.zero @[Tile.scala 25:32]
    reg B : {zero : UInt<1>, nan : UInt<1>, sign : UInt<1>, exponent : SInt<6>, fraction : UInt<13>}, clock @[Tile.scala 26:32]
    B.fraction <= io.B_in.fraction @[Tile.scala 26:32]
    B.exponent <= io.B_in.exponent @[Tile.scala 26:32]
    B.sign <= io.B_in.sign @[Tile.scala 26:32]
    B.nan <= io.B_in.nan @[Tile.scala 26:32]
    B.zero <= io.B_in.zero @[Tile.scala 26:32]
    reg prop : UInt<1>, clock @[Tile.scala 27:35]
    prop <= io.prop_in @[Tile.scala 27:35]
    inst mac of linearMultiplierMAC_15 @[Tile.scala 29:33]
    mac.clock <= clock
    mac.reset <= reset
    node _T_2 = mux(io.prop_in, A0, A1) @[Tile.scala 30:32]
    mac.io.A.fraction <= _T_2.fraction @[Tile.scala 30:26]
    mac.io.A.exponent <= _T_2.exponent @[Tile.scala 30:26]
    mac.io.A.sign <= _T_2.sign @[Tile.scala 30:26]
    mac.io.A.nan <= _T_2.nan @[Tile.scala 30:26]
    mac.io.A.zero <= _T_2.zero @[Tile.scala 30:26]
    mac.io.B.fraction <= io.B_in.fraction @[Tile.scala 31:26]
    mac.io.B.exponent <= io.B_in.exponent @[Tile.scala 31:26]
    mac.io.B.sign <= io.B_in.sign @[Tile.scala 31:26]
    mac.io.B.nan <= io.B_in.nan @[Tile.scala 31:26]
    mac.io.B.zero <= io.B_in.zero @[Tile.scala 31:26]
    mac.io.C.number <= io.C_in.number @[Tile.scala 32:26]
    mac.io.C.nan <= io.C_in.nan @[Tile.scala 32:26]
    mac.io.C.zero <= io.C_in.zero @[Tile.scala 32:26]
    reg C : {zero : UInt<1>, nan : UInt<1>, number : SInt<129>}, clock @[Tile.scala 34:32]
    C.number <= mac.io.out.number @[Tile.scala 34:32]
    C.nan <= mac.io.out.nan @[Tile.scala 34:32]
    C.zero <= mac.io.out.zero @[Tile.scala 34:32]
    io.A_out.fraction <= A.fraction @[Tile.scala 36:26]
    io.A_out.exponent <= A.exponent @[Tile.scala 36:26]
    io.A_out.sign <= A.sign @[Tile.scala 36:26]
    io.A_out.nan <= A.nan @[Tile.scala 36:26]
    io.A_out.zero <= A.zero @[Tile.scala 36:26]
    io.B_out.fraction <= B.fraction @[Tile.scala 37:26]
    io.B_out.exponent <= B.exponent @[Tile.scala 37:26]
    io.B_out.sign <= B.sign @[Tile.scala 37:26]
    io.B_out.nan <= B.nan @[Tile.scala 37:26]
    io.B_out.zero <= B.zero @[Tile.scala 37:26]
    io.C_out.number <= C.number @[Tile.scala 38:26]
    io.C_out.nan <= C.nan @[Tile.scala 38:26]
    io.C_out.zero <= C.zero @[Tile.scala 38:26]
    io.prop_out <= prop @[Tile.scala 39:29]
    
  module toPositUnpacked : 
    input clock : Clock
    input reset : Reset
    output io : {flip in : UInt<16>, out : {zero : UInt<1>, nan : UInt<1>, sign : UInt<1>, exponent : SInt<6>, fraction : UInt<13>}}
    
    wire others : UInt<15> @[Conversion.scala 13:26]
    wire leading : UInt<5> @[Conversion.scala 14:27]
    wire regime : SInt<6> @[Conversion.scala 15:26]
    wire exponentFraction : UInt<13> @[Conversion.scala 16:36]
    wire exponent : UInt<1> @[Conversion.scala 17:28]
    wire fraction : UInt<13> @[Conversion.scala 18:28]
    node _T = bits(io.in, 14, 0) @[Conversion.scala 20:25]
    node _T_1 = bits(io.out.sign, 0, 0) @[Bitwise.scala 71:15]
    node _T_2 = mux(_T_1, UInt<15>("h07fff"), UInt<15>("h00")) @[Bitwise.scala 71:12]
    node _T_3 = xor(_T, _T_2) @[Conversion.scala 20:43]
    node _T_4 = add(_T_3, io.out.sign) @[Conversion.scala 20:78]
    node _T_5 = tail(_T_4, 1) @[Conversion.scala 20:78]
    others <= _T_5 @[Conversion.scala 20:16]
    node _T_6 = bits(others, 14, 14) @[Conversion.scala 21:30]
    node _T_7 = not(others) @[Conversion.scala 21:77]
    node _T_8 = bits(_T_7, 7, 0) @[Bitwise.scala 108:18]
    node _T_9 = shl(UInt<4>("h0f"), 4) @[Bitwise.scala 101:47]
    node _T_10 = xor(UInt<8>("h0ff"), _T_9) @[Bitwise.scala 101:21]
    node _T_11 = shr(_T_8, 4) @[Bitwise.scala 102:21]
    node _T_12 = and(_T_11, _T_10) @[Bitwise.scala 102:31]
    node _T_13 = bits(_T_8, 3, 0) @[Bitwise.scala 102:46]
    node _T_14 = shl(_T_13, 4) @[Bitwise.scala 102:65]
    node _T_15 = not(_T_10) @[Bitwise.scala 102:77]
    node _T_16 = and(_T_14, _T_15) @[Bitwise.scala 102:75]
    node _T_17 = or(_T_12, _T_16) @[Bitwise.scala 102:39]
    node _T_18 = bits(_T_10, 5, 0) @[Bitwise.scala 101:28]
    node _T_19 = shl(_T_18, 2) @[Bitwise.scala 101:47]
    node _T_20 = xor(_T_10, _T_19) @[Bitwise.scala 101:21]
    node _T_21 = shr(_T_17, 2) @[Bitwise.scala 102:21]
    node _T_22 = and(_T_21, _T_20) @[Bitwise.scala 102:31]
    node _T_23 = bits(_T_17, 5, 0) @[Bitwise.scala 102:46]
    node _T_24 = shl(_T_23, 2) @[Bitwise.scala 102:65]
    node _T_25 = not(_T_20) @[Bitwise.scala 102:77]
    node _T_26 = and(_T_24, _T_25) @[Bitwise.scala 102:75]
    node _T_27 = or(_T_22, _T_26) @[Bitwise.scala 102:39]
    node _T_28 = bits(_T_20, 6, 0) @[Bitwise.scala 101:28]
    node _T_29 = shl(_T_28, 1) @[Bitwise.scala 101:47]
    node _T_30 = xor(_T_20, _T_29) @[Bitwise.scala 101:21]
    node _T_31 = shr(_T_27, 1) @[Bitwise.scala 102:21]
    node _T_32 = and(_T_31, _T_30) @[Bitwise.scala 102:31]
    node _T_33 = bits(_T_27, 6, 0) @[Bitwise.scala 102:46]
    node _T_34 = shl(_T_33, 1) @[Bitwise.scala 102:65]
    node _T_35 = not(_T_30) @[Bitwise.scala 102:77]
    node _T_36 = and(_T_34, _T_35) @[Bitwise.scala 102:75]
    node _T_37 = or(_T_32, _T_36) @[Bitwise.scala 102:39]
    node _T_38 = bits(_T_7, 14, 8) @[Bitwise.scala 108:44]
    node _T_39 = bits(_T_38, 3, 0) @[Bitwise.scala 108:18]
    node _T_40 = bits(_T_39, 1, 0) @[Bitwise.scala 108:18]
    node _T_41 = bits(_T_40, 0, 0) @[Bitwise.scala 108:18]
    node _T_42 = bits(_T_40, 1, 1) @[Bitwise.scala 108:44]
    node _T_43 = cat(_T_41, _T_42) @[Cat.scala 29:58]
    node _T_44 = bits(_T_39, 3, 2) @[Bitwise.scala 108:44]
    node _T_45 = bits(_T_44, 0, 0) @[Bitwise.scala 108:18]
    node _T_46 = bits(_T_44, 1, 1) @[Bitwise.scala 108:44]
    node _T_47 = cat(_T_45, _T_46) @[Cat.scala 29:58]
    node _T_48 = cat(_T_43, _T_47) @[Cat.scala 29:58]
    node _T_49 = bits(_T_38, 6, 4) @[Bitwise.scala 108:44]
    node _T_50 = bits(_T_49, 1, 0) @[Bitwise.scala 108:18]
    node _T_51 = bits(_T_50, 0, 0) @[Bitwise.scala 108:18]
    node _T_52 = bits(_T_50, 1, 1) @[Bitwise.scala 108:44]
    node _T_53 = cat(_T_51, _T_52) @[Cat.scala 29:58]
    node _T_54 = bits(_T_49, 2, 2) @[Bitwise.scala 108:44]
    node _T_55 = cat(_T_53, _T_54) @[Cat.scala 29:58]
    node _T_56 = cat(_T_48, _T_55) @[Cat.scala 29:58]
    node _T_57 = cat(_T_37, _T_56) @[Cat.scala 29:58]
    node _T_58 = bits(_T_57, 0, 0) @[OneHot.scala 47:40]
    node _T_59 = bits(_T_57, 1, 1) @[OneHot.scala 47:40]
    node _T_60 = bits(_T_57, 2, 2) @[OneHot.scala 47:40]
    node _T_61 = bits(_T_57, 3, 3) @[OneHot.scala 47:40]
    node _T_62 = bits(_T_57, 4, 4) @[OneHot.scala 47:40]
    node _T_63 = bits(_T_57, 5, 5) @[OneHot.scala 47:40]
    node _T_64 = bits(_T_57, 6, 6) @[OneHot.scala 47:40]
    node _T_65 = bits(_T_57, 7, 7) @[OneHot.scala 47:40]
    node _T_66 = bits(_T_57, 8, 8) @[OneHot.scala 47:40]
    node _T_67 = bits(_T_57, 9, 9) @[OneHot.scala 47:40]
    node _T_68 = bits(_T_57, 10, 10) @[OneHot.scala 47:40]
    node _T_69 = bits(_T_57, 11, 11) @[OneHot.scala 47:40]
    node _T_70 = bits(_T_57, 12, 12) @[OneHot.scala 47:40]
    node _T_71 = bits(_T_57, 13, 13) @[OneHot.scala 47:40]
    node _T_72 = bits(_T_57, 14, 14) @[OneHot.scala 47:40]
    node _T_73 = mux(_T_71, UInt<4>("h0d"), UInt<4>("h0e")) @[Mux.scala 47:69]
    node _T_74 = mux(_T_70, UInt<4>("h0c"), _T_73) @[Mux.scala 47:69]
    node _T_75 = mux(_T_69, UInt<4>("h0b"), _T_74) @[Mux.scala 47:69]
    node _T_76 = mux(_T_68, UInt<4>("h0a"), _T_75) @[Mux.scala 47:69]
    node _T_77 = mux(_T_67, UInt<4>("h09"), _T_76) @[Mux.scala 47:69]
    node _T_78 = mux(_T_66, UInt<4>("h08"), _T_77) @[Mux.scala 47:69]
    node _T_79 = mux(_T_65, UInt<3>("h07"), _T_78) @[Mux.scala 47:69]
    node _T_80 = mux(_T_64, UInt<3>("h06"), _T_79) @[Mux.scala 47:69]
    node _T_81 = mux(_T_63, UInt<3>("h05"), _T_80) @[Mux.scala 47:69]
    node _T_82 = mux(_T_62, UInt<3>("h04"), _T_81) @[Mux.scala 47:69]
    node _T_83 = mux(_T_61, UInt<2>("h03"), _T_82) @[Mux.scala 47:69]
    node _T_84 = mux(_T_60, UInt<2>("h02"), _T_83) @[Mux.scala 47:69]
    node _T_85 = mux(_T_59, UInt<1>("h01"), _T_84) @[Mux.scala 47:69]
    node _T_86 = mux(_T_58, UInt<1>("h00"), _T_85) @[Mux.scala 47:69]
    node _T_87 = bits(others, 7, 0) @[Bitwise.scala 108:18]
    node _T_88 = shl(UInt<4>("h0f"), 4) @[Bitwise.scala 101:47]
    node _T_89 = xor(UInt<8>("h0ff"), _T_88) @[Bitwise.scala 101:21]
    node _T_90 = shr(_T_87, 4) @[Bitwise.scala 102:21]
    node _T_91 = and(_T_90, _T_89) @[Bitwise.scala 102:31]
    node _T_92 = bits(_T_87, 3, 0) @[Bitwise.scala 102:46]
    node _T_93 = shl(_T_92, 4) @[Bitwise.scala 102:65]
    node _T_94 = not(_T_89) @[Bitwise.scala 102:77]
    node _T_95 = and(_T_93, _T_94) @[Bitwise.scala 102:75]
    node _T_96 = or(_T_91, _T_95) @[Bitwise.scala 102:39]
    node _T_97 = bits(_T_89, 5, 0) @[Bitwise.scala 101:28]
    node _T_98 = shl(_T_97, 2) @[Bitwise.scala 101:47]
    node _T_99 = xor(_T_89, _T_98) @[Bitwise.scala 101:21]
    node _T_100 = shr(_T_96, 2) @[Bitwise.scala 102:21]
    node _T_101 = and(_T_100, _T_99) @[Bitwise.scala 102:31]
    node _T_102 = bits(_T_96, 5, 0) @[Bitwise.scala 102:46]
    node _T_103 = shl(_T_102, 2) @[Bitwise.scala 102:65]
    node _T_104 = not(_T_99) @[Bitwise.scala 102:77]
    node _T_105 = and(_T_103, _T_104) @[Bitwise.scala 102:75]
    node _T_106 = or(_T_101, _T_105) @[Bitwise.scala 102:39]
    node _T_107 = bits(_T_99, 6, 0) @[Bitwise.scala 101:28]
    node _T_108 = shl(_T_107, 1) @[Bitwise.scala 101:47]
    node _T_109 = xor(_T_99, _T_108) @[Bitwise.scala 101:21]
    node _T_110 = shr(_T_106, 1) @[Bitwise.scala 102:21]
    node _T_111 = and(_T_110, _T_109) @[Bitwise.scala 102:31]
    node _T_112 = bits(_T_106, 6, 0) @[Bitwise.scala 102:46]
    node _T_113 = shl(_T_112, 1) @[Bitwise.scala 102:65]
    node _T_114 = not(_T_109) @[Bitwise.scala 102:77]
    node _T_115 = and(_T_113, _T_114) @[Bitwise.scala 102:75]
    node _T_116 = or(_T_111, _T_115) @[Bitwise.scala 102:39]
    node _T_117 = bits(others, 14, 8) @[Bitwise.scala 108:44]
    node _T_118 = bits(_T_117, 3, 0) @[Bitwise.scala 108:18]
    node _T_119 = bits(_T_118, 1, 0) @[Bitwise.scala 108:18]
    node _T_120 = bits(_T_119, 0, 0) @[Bitwise.scala 108:18]
    node _T_121 = bits(_T_119, 1, 1) @[Bitwise.scala 108:44]
    node _T_122 = cat(_T_120, _T_121) @[Cat.scala 29:58]
    node _T_123 = bits(_T_118, 3, 2) @[Bitwise.scala 108:44]
    node _T_124 = bits(_T_123, 0, 0) @[Bitwise.scala 108:18]
    node _T_125 = bits(_T_123, 1, 1) @[Bitwise.scala 108:44]
    node _T_126 = cat(_T_124, _T_125) @[Cat.scala 29:58]
    node _T_127 = cat(_T_122, _T_126) @[Cat.scala 29:58]
    node _T_128 = bits(_T_117, 6, 4) @[Bitwise.scala 108:44]
    node _T_129 = bits(_T_128, 1, 0) @[Bitwise.scala 108:18]
    node _T_130 = bits(_T_129, 0, 0) @[Bitwise.scala 108:18]
    node _T_131 = bits(_T_129, 1, 1) @[Bitwise.scala 108:44]
    node _T_132 = cat(_T_130, _T_131) @[Cat.scala 29:58]
    node _T_133 = bits(_T_128, 2, 2) @[Bitwise.scala 108:44]
    node _T_134 = cat(_T_132, _T_133) @[Cat.scala 29:58]
    node _T_135 = cat(_T_127, _T_134) @[Cat.scala 29:58]
    node _T_136 = cat(_T_116, _T_135) @[Cat.scala 29:58]
    node _T_137 = bits(_T_136, 0, 0) @[OneHot.scala 47:40]
    node _T_138 = bits(_T_136, 1, 1) @[OneHot.scala 47:40]
    node _T_139 = bits(_T_136, 2, 2) @[OneHot.scala 47:40]
    node _T_140 = bits(_T_136, 3, 3) @[OneHot.scala 47:40]
    node _T_141 = bits(_T_136, 4, 4) @[OneHot.scala 47:40]
    node _T_142 = bits(_T_136, 5, 5) @[OneHot.scala 47:40]
    node _T_143 = bits(_T_136, 6, 6) @[OneHot.scala 47:40]
    node _T_144 = bits(_T_136, 7, 7) @[OneHot.scala 47:40]
    node _T_145 = bits(_T_136, 8, 8) @[OneHot.scala 47:40]
    node _T_146 = bits(_T_136, 9, 9) @[OneHot.scala 47:40]
    node _T_147 = bits(_T_136, 10, 10) @[OneHot.scala 47:40]
    node _T_148 = bits(_T_136, 11, 11) @[OneHot.scala 47:40]
    node _T_149 = bits(_T_136, 12, 12) @[OneHot.scala 47:40]
    node _T_150 = bits(_T_136, 13, 13) @[OneHot.scala 47:40]
    node _T_151 = bits(_T_136, 14, 14) @[OneHot.scala 47:40]
    node _T_152 = mux(_T_150, UInt<4>("h0d"), UInt<4>("h0e")) @[Mux.scala 47:69]
    node _T_153 = mux(_T_149, UInt<4>("h0c"), _T_152) @[Mux.scala 47:69]
    node _T_154 = mux(_T_148, UInt<4>("h0b"), _T_153) @[Mux.scala 47:69]
    node _T_155 = mux(_T_147, UInt<4>("h0a"), _T_154) @[Mux.scala 47:69]
    node _T_156 = mux(_T_146, UInt<4>("h09"), _T_155) @[Mux.scala 47:69]
    node _T_157 = mux(_T_145, UInt<4>("h08"), _T_156) @[Mux.scala 47:69]
    node _T_158 = mux(_T_144, UInt<3>("h07"), _T_157) @[Mux.scala 47:69]
    node _T_159 = mux(_T_143, UInt<3>("h06"), _T_158) @[Mux.scala 47:69]
    node _T_160 = mux(_T_142, UInt<3>("h05"), _T_159) @[Mux.scala 47:69]
    node _T_161 = mux(_T_141, UInt<3>("h04"), _T_160) @[Mux.scala 47:69]
    node _T_162 = mux(_T_140, UInt<2>("h03"), _T_161) @[Mux.scala 47:69]
    node _T_163 = mux(_T_139, UInt<2>("h02"), _T_162) @[Mux.scala 47:69]
    node _T_164 = mux(_T_138, UInt<1>("h01"), _T_163) @[Mux.scala 47:69]
    node _T_165 = mux(_T_137, UInt<1>("h00"), _T_164) @[Mux.scala 47:69]
    node _T_166 = mux(_T_6, _T_86, _T_165) @[Conversion.scala 21:23]
    node _T_167 = eq(others, UInt<15>("h07fff")) @[Conversion.scala 21:132]
    node _T_168 = neq(others, UInt<1>("h00")) @[Conversion.scala 21:147]
    node _T_169 = not(_T_168) @[Conversion.scala 21:139]
    node _T_170 = or(_T_167, _T_169) @[Conversion.scala 21:137]
    node _T_171 = add(_T_166, _T_170) @[Conversion.scala 21:122]
    node _T_172 = tail(_T_171, 1) @[Conversion.scala 21:122]
    leading <= _T_172 @[Conversion.scala 21:17]
    node _T_173 = bits(others, 14, 14) @[Conversion.scala 22:29]
    node _T_174 = asSInt(leading) @[Conversion.scala 22:60]
    node _T_175 = sub(_T_174, asSInt(UInt<2>("h01"))) @[Conversion.scala 22:67]
    node _T_176 = tail(_T_175, 1) @[Conversion.scala 22:67]
    node _T_177 = asSInt(_T_176) @[Conversion.scala 22:67]
    node _T_178 = asSInt(leading) @[Conversion.scala 22:83]
    node _T_179 = sub(asSInt(UInt<1>("h00")), _T_178) @[Conversion.scala 22:74]
    node _T_180 = tail(_T_179, 1) @[Conversion.scala 22:74]
    node _T_181 = asSInt(_T_180) @[Conversion.scala 22:74]
    node _T_182 = mux(_T_173, _T_177, _T_181) @[Conversion.scala 22:22]
    regime <= _T_182 @[Conversion.scala 22:16]
    node _T_183 = sub(leading, UInt<1>("h01")) @[Conversion.scala 23:48]
    node _T_184 = tail(_T_183, 1) @[Conversion.scala 23:48]
    node _T_185 = dshl(others, _T_184) @[Conversion.scala 23:36]
    exponentFraction <= _T_185 @[Conversion.scala 23:26]
    node _T_186 = bits(exponentFraction, 12, 12) @[Conversion.scala 24:37]
    exponent <= _T_186 @[Conversion.scala 24:18]
    node _T_187 = bits(exponentFraction, 11, 0) @[Conversion.scala 25:46]
    node _T_188 = cat(UInt<1>("h01"), _T_187) @[Cat.scala 29:58]
    fraction <= _T_188 @[Conversion.scala 25:18]
    node _T_189 = bits(io.in, 15, 15) @[Conversion.scala 27:30]
    node _T_190 = not(_T_189) @[Conversion.scala 27:24]
    node _T_191 = bits(io.in, 14, 0) @[Conversion.scala 27:54]
    node _T_192 = neq(_T_191, UInt<1>("h00")) @[Conversion.scala 27:71]
    node _T_193 = not(_T_192) @[Conversion.scala 27:47]
    node _T_194 = and(_T_190, _T_193) @[Conversion.scala 27:45]
    io.out.zero <= _T_194 @[Conversion.scala 27:21]
    node _T_195 = bits(io.in, 15, 15) @[Conversion.scala 28:28]
    node _T_196 = bits(io.in, 14, 0) @[Conversion.scala 28:52]
    node _T_197 = neq(_T_196, UInt<1>("h00")) @[Conversion.scala 28:69]
    node _T_198 = not(_T_197) @[Conversion.scala 28:45]
    node _T_199 = and(_T_195, _T_198) @[Conversion.scala 28:43]
    io.out.nan <= _T_199 @[Conversion.scala 28:20]
    node _T_200 = bits(io.in, 15, 15) @[Conversion.scala 29:29]
    io.out.sign <= _T_200 @[Conversion.scala 29:21]
    node _T_201 = dshl(regime, UInt<1>("h01")) @[Conversion.scala 30:36]
    node _T_202 = cvt(exponent) @[Conversion.scala 30:99]
    node _T_203 = add(_T_201, _T_202) @[Conversion.scala 30:88]
    node _T_204 = tail(_T_203, 1) @[Conversion.scala 30:88]
    node _T_205 = asSInt(_T_204) @[Conversion.scala 30:88]
    io.out.exponent <= _T_205 @[Conversion.scala 30:25]
    io.out.fraction <= fraction @[Conversion.scala 31:25]
    
  module toPositUnpacked_1 : 
    input clock : Clock
    input reset : Reset
    output io : {flip in : UInt<16>, out : {zero : UInt<1>, nan : UInt<1>, sign : UInt<1>, exponent : SInt<6>, fraction : UInt<13>}}
    
    wire others : UInt<15> @[Conversion.scala 13:26]
    wire leading : UInt<5> @[Conversion.scala 14:27]
    wire regime : SInt<6> @[Conversion.scala 15:26]
    wire exponentFraction : UInt<13> @[Conversion.scala 16:36]
    wire exponent : UInt<1> @[Conversion.scala 17:28]
    wire fraction : UInt<13> @[Conversion.scala 18:28]
    node _T = bits(io.in, 14, 0) @[Conversion.scala 20:25]
    node _T_1 = bits(io.out.sign, 0, 0) @[Bitwise.scala 71:15]
    node _T_2 = mux(_T_1, UInt<15>("h07fff"), UInt<15>("h00")) @[Bitwise.scala 71:12]
    node _T_3 = xor(_T, _T_2) @[Conversion.scala 20:43]
    node _T_4 = add(_T_3, io.out.sign) @[Conversion.scala 20:78]
    node _T_5 = tail(_T_4, 1) @[Conversion.scala 20:78]
    others <= _T_5 @[Conversion.scala 20:16]
    node _T_6 = bits(others, 14, 14) @[Conversion.scala 21:30]
    node _T_7 = not(others) @[Conversion.scala 21:77]
    node _T_8 = bits(_T_7, 7, 0) @[Bitwise.scala 108:18]
    node _T_9 = shl(UInt<4>("h0f"), 4) @[Bitwise.scala 101:47]
    node _T_10 = xor(UInt<8>("h0ff"), _T_9) @[Bitwise.scala 101:21]
    node _T_11 = shr(_T_8, 4) @[Bitwise.scala 102:21]
    node _T_12 = and(_T_11, _T_10) @[Bitwise.scala 102:31]
    node _T_13 = bits(_T_8, 3, 0) @[Bitwise.scala 102:46]
    node _T_14 = shl(_T_13, 4) @[Bitwise.scala 102:65]
    node _T_15 = not(_T_10) @[Bitwise.scala 102:77]
    node _T_16 = and(_T_14, _T_15) @[Bitwise.scala 102:75]
    node _T_17 = or(_T_12, _T_16) @[Bitwise.scala 102:39]
    node _T_18 = bits(_T_10, 5, 0) @[Bitwise.scala 101:28]
    node _T_19 = shl(_T_18, 2) @[Bitwise.scala 101:47]
    node _T_20 = xor(_T_10, _T_19) @[Bitwise.scala 101:21]
    node _T_21 = shr(_T_17, 2) @[Bitwise.scala 102:21]
    node _T_22 = and(_T_21, _T_20) @[Bitwise.scala 102:31]
    node _T_23 = bits(_T_17, 5, 0) @[Bitwise.scala 102:46]
    node _T_24 = shl(_T_23, 2) @[Bitwise.scala 102:65]
    node _T_25 = not(_T_20) @[Bitwise.scala 102:77]
    node _T_26 = and(_T_24, _T_25) @[Bitwise.scala 102:75]
    node _T_27 = or(_T_22, _T_26) @[Bitwise.scala 102:39]
    node _T_28 = bits(_T_20, 6, 0) @[Bitwise.scala 101:28]
    node _T_29 = shl(_T_28, 1) @[Bitwise.scala 101:47]
    node _T_30 = xor(_T_20, _T_29) @[Bitwise.scala 101:21]
    node _T_31 = shr(_T_27, 1) @[Bitwise.scala 102:21]
    node _T_32 = and(_T_31, _T_30) @[Bitwise.scala 102:31]
    node _T_33 = bits(_T_27, 6, 0) @[Bitwise.scala 102:46]
    node _T_34 = shl(_T_33, 1) @[Bitwise.scala 102:65]
    node _T_35 = not(_T_30) @[Bitwise.scala 102:77]
    node _T_36 = and(_T_34, _T_35) @[Bitwise.scala 102:75]
    node _T_37 = or(_T_32, _T_36) @[Bitwise.scala 102:39]
    node _T_38 = bits(_T_7, 14, 8) @[Bitwise.scala 108:44]
    node _T_39 = bits(_T_38, 3, 0) @[Bitwise.scala 108:18]
    node _T_40 = bits(_T_39, 1, 0) @[Bitwise.scala 108:18]
    node _T_41 = bits(_T_40, 0, 0) @[Bitwise.scala 108:18]
    node _T_42 = bits(_T_40, 1, 1) @[Bitwise.scala 108:44]
    node _T_43 = cat(_T_41, _T_42) @[Cat.scala 29:58]
    node _T_44 = bits(_T_39, 3, 2) @[Bitwise.scala 108:44]
    node _T_45 = bits(_T_44, 0, 0) @[Bitwise.scala 108:18]
    node _T_46 = bits(_T_44, 1, 1) @[Bitwise.scala 108:44]
    node _T_47 = cat(_T_45, _T_46) @[Cat.scala 29:58]
    node _T_48 = cat(_T_43, _T_47) @[Cat.scala 29:58]
    node _T_49 = bits(_T_38, 6, 4) @[Bitwise.scala 108:44]
    node _T_50 = bits(_T_49, 1, 0) @[Bitwise.scala 108:18]
    node _T_51 = bits(_T_50, 0, 0) @[Bitwise.scala 108:18]
    node _T_52 = bits(_T_50, 1, 1) @[Bitwise.scala 108:44]
    node _T_53 = cat(_T_51, _T_52) @[Cat.scala 29:58]
    node _T_54 = bits(_T_49, 2, 2) @[Bitwise.scala 108:44]
    node _T_55 = cat(_T_53, _T_54) @[Cat.scala 29:58]
    node _T_56 = cat(_T_48, _T_55) @[Cat.scala 29:58]
    node _T_57 = cat(_T_37, _T_56) @[Cat.scala 29:58]
    node _T_58 = bits(_T_57, 0, 0) @[OneHot.scala 47:40]
    node _T_59 = bits(_T_57, 1, 1) @[OneHot.scala 47:40]
    node _T_60 = bits(_T_57, 2, 2) @[OneHot.scala 47:40]
    node _T_61 = bits(_T_57, 3, 3) @[OneHot.scala 47:40]
    node _T_62 = bits(_T_57, 4, 4) @[OneHot.scala 47:40]
    node _T_63 = bits(_T_57, 5, 5) @[OneHot.scala 47:40]
    node _T_64 = bits(_T_57, 6, 6) @[OneHot.scala 47:40]
    node _T_65 = bits(_T_57, 7, 7) @[OneHot.scala 47:40]
    node _T_66 = bits(_T_57, 8, 8) @[OneHot.scala 47:40]
    node _T_67 = bits(_T_57, 9, 9) @[OneHot.scala 47:40]
    node _T_68 = bits(_T_57, 10, 10) @[OneHot.scala 47:40]
    node _T_69 = bits(_T_57, 11, 11) @[OneHot.scala 47:40]
    node _T_70 = bits(_T_57, 12, 12) @[OneHot.scala 47:40]
    node _T_71 = bits(_T_57, 13, 13) @[OneHot.scala 47:40]
    node _T_72 = bits(_T_57, 14, 14) @[OneHot.scala 47:40]
    node _T_73 = mux(_T_71, UInt<4>("h0d"), UInt<4>("h0e")) @[Mux.scala 47:69]
    node _T_74 = mux(_T_70, UInt<4>("h0c"), _T_73) @[Mux.scala 47:69]
    node _T_75 = mux(_T_69, UInt<4>("h0b"), _T_74) @[Mux.scala 47:69]
    node _T_76 = mux(_T_68, UInt<4>("h0a"), _T_75) @[Mux.scala 47:69]
    node _T_77 = mux(_T_67, UInt<4>("h09"), _T_76) @[Mux.scala 47:69]
    node _T_78 = mux(_T_66, UInt<4>("h08"), _T_77) @[Mux.scala 47:69]
    node _T_79 = mux(_T_65, UInt<3>("h07"), _T_78) @[Mux.scala 47:69]
    node _T_80 = mux(_T_64, UInt<3>("h06"), _T_79) @[Mux.scala 47:69]
    node _T_81 = mux(_T_63, UInt<3>("h05"), _T_80) @[Mux.scala 47:69]
    node _T_82 = mux(_T_62, UInt<3>("h04"), _T_81) @[Mux.scala 47:69]
    node _T_83 = mux(_T_61, UInt<2>("h03"), _T_82) @[Mux.scala 47:69]
    node _T_84 = mux(_T_60, UInt<2>("h02"), _T_83) @[Mux.scala 47:69]
    node _T_85 = mux(_T_59, UInt<1>("h01"), _T_84) @[Mux.scala 47:69]
    node _T_86 = mux(_T_58, UInt<1>("h00"), _T_85) @[Mux.scala 47:69]
    node _T_87 = bits(others, 7, 0) @[Bitwise.scala 108:18]
    node _T_88 = shl(UInt<4>("h0f"), 4) @[Bitwise.scala 101:47]
    node _T_89 = xor(UInt<8>("h0ff"), _T_88) @[Bitwise.scala 101:21]
    node _T_90 = shr(_T_87, 4) @[Bitwise.scala 102:21]
    node _T_91 = and(_T_90, _T_89) @[Bitwise.scala 102:31]
    node _T_92 = bits(_T_87, 3, 0) @[Bitwise.scala 102:46]
    node _T_93 = shl(_T_92, 4) @[Bitwise.scala 102:65]
    node _T_94 = not(_T_89) @[Bitwise.scala 102:77]
    node _T_95 = and(_T_93, _T_94) @[Bitwise.scala 102:75]
    node _T_96 = or(_T_91, _T_95) @[Bitwise.scala 102:39]
    node _T_97 = bits(_T_89, 5, 0) @[Bitwise.scala 101:28]
    node _T_98 = shl(_T_97, 2) @[Bitwise.scala 101:47]
    node _T_99 = xor(_T_89, _T_98) @[Bitwise.scala 101:21]
    node _T_100 = shr(_T_96, 2) @[Bitwise.scala 102:21]
    node _T_101 = and(_T_100, _T_99) @[Bitwise.scala 102:31]
    node _T_102 = bits(_T_96, 5, 0) @[Bitwise.scala 102:46]
    node _T_103 = shl(_T_102, 2) @[Bitwise.scala 102:65]
    node _T_104 = not(_T_99) @[Bitwise.scala 102:77]
    node _T_105 = and(_T_103, _T_104) @[Bitwise.scala 102:75]
    node _T_106 = or(_T_101, _T_105) @[Bitwise.scala 102:39]
    node _T_107 = bits(_T_99, 6, 0) @[Bitwise.scala 101:28]
    node _T_108 = shl(_T_107, 1) @[Bitwise.scala 101:47]
    node _T_109 = xor(_T_99, _T_108) @[Bitwise.scala 101:21]
    node _T_110 = shr(_T_106, 1) @[Bitwise.scala 102:21]
    node _T_111 = and(_T_110, _T_109) @[Bitwise.scala 102:31]
    node _T_112 = bits(_T_106, 6, 0) @[Bitwise.scala 102:46]
    node _T_113 = shl(_T_112, 1) @[Bitwise.scala 102:65]
    node _T_114 = not(_T_109) @[Bitwise.scala 102:77]
    node _T_115 = and(_T_113, _T_114) @[Bitwise.scala 102:75]
    node _T_116 = or(_T_111, _T_115) @[Bitwise.scala 102:39]
    node _T_117 = bits(others, 14, 8) @[Bitwise.scala 108:44]
    node _T_118 = bits(_T_117, 3, 0) @[Bitwise.scala 108:18]
    node _T_119 = bits(_T_118, 1, 0) @[Bitwise.scala 108:18]
    node _T_120 = bits(_T_119, 0, 0) @[Bitwise.scala 108:18]
    node _T_121 = bits(_T_119, 1, 1) @[Bitwise.scala 108:44]
    node _T_122 = cat(_T_120, _T_121) @[Cat.scala 29:58]
    node _T_123 = bits(_T_118, 3, 2) @[Bitwise.scala 108:44]
    node _T_124 = bits(_T_123, 0, 0) @[Bitwise.scala 108:18]
    node _T_125 = bits(_T_123, 1, 1) @[Bitwise.scala 108:44]
    node _T_126 = cat(_T_124, _T_125) @[Cat.scala 29:58]
    node _T_127 = cat(_T_122, _T_126) @[Cat.scala 29:58]
    node _T_128 = bits(_T_117, 6, 4) @[Bitwise.scala 108:44]
    node _T_129 = bits(_T_128, 1, 0) @[Bitwise.scala 108:18]
    node _T_130 = bits(_T_129, 0, 0) @[Bitwise.scala 108:18]
    node _T_131 = bits(_T_129, 1, 1) @[Bitwise.scala 108:44]
    node _T_132 = cat(_T_130, _T_131) @[Cat.scala 29:58]
    node _T_133 = bits(_T_128, 2, 2) @[Bitwise.scala 108:44]
    node _T_134 = cat(_T_132, _T_133) @[Cat.scala 29:58]
    node _T_135 = cat(_T_127, _T_134) @[Cat.scala 29:58]
    node _T_136 = cat(_T_116, _T_135) @[Cat.scala 29:58]
    node _T_137 = bits(_T_136, 0, 0) @[OneHot.scala 47:40]
    node _T_138 = bits(_T_136, 1, 1) @[OneHot.scala 47:40]
    node _T_139 = bits(_T_136, 2, 2) @[OneHot.scala 47:40]
    node _T_140 = bits(_T_136, 3, 3) @[OneHot.scala 47:40]
    node _T_141 = bits(_T_136, 4, 4) @[OneHot.scala 47:40]
    node _T_142 = bits(_T_136, 5, 5) @[OneHot.scala 47:40]
    node _T_143 = bits(_T_136, 6, 6) @[OneHot.scala 47:40]
    node _T_144 = bits(_T_136, 7, 7) @[OneHot.scala 47:40]
    node _T_145 = bits(_T_136, 8, 8) @[OneHot.scala 47:40]
    node _T_146 = bits(_T_136, 9, 9) @[OneHot.scala 47:40]
    node _T_147 = bits(_T_136, 10, 10) @[OneHot.scala 47:40]
    node _T_148 = bits(_T_136, 11, 11) @[OneHot.scala 47:40]
    node _T_149 = bits(_T_136, 12, 12) @[OneHot.scala 47:40]
    node _T_150 = bits(_T_136, 13, 13) @[OneHot.scala 47:40]
    node _T_151 = bits(_T_136, 14, 14) @[OneHot.scala 47:40]
    node _T_152 = mux(_T_150, UInt<4>("h0d"), UInt<4>("h0e")) @[Mux.scala 47:69]
    node _T_153 = mux(_T_149, UInt<4>("h0c"), _T_152) @[Mux.scala 47:69]
    node _T_154 = mux(_T_148, UInt<4>("h0b"), _T_153) @[Mux.scala 47:69]
    node _T_155 = mux(_T_147, UInt<4>("h0a"), _T_154) @[Mux.scala 47:69]
    node _T_156 = mux(_T_146, UInt<4>("h09"), _T_155) @[Mux.scala 47:69]
    node _T_157 = mux(_T_145, UInt<4>("h08"), _T_156) @[Mux.scala 47:69]
    node _T_158 = mux(_T_144, UInt<3>("h07"), _T_157) @[Mux.scala 47:69]
    node _T_159 = mux(_T_143, UInt<3>("h06"), _T_158) @[Mux.scala 47:69]
    node _T_160 = mux(_T_142, UInt<3>("h05"), _T_159) @[Mux.scala 47:69]
    node _T_161 = mux(_T_141, UInt<3>("h04"), _T_160) @[Mux.scala 47:69]
    node _T_162 = mux(_T_140, UInt<2>("h03"), _T_161) @[Mux.scala 47:69]
    node _T_163 = mux(_T_139, UInt<2>("h02"), _T_162) @[Mux.scala 47:69]
    node _T_164 = mux(_T_138, UInt<1>("h01"), _T_163) @[Mux.scala 47:69]
    node _T_165 = mux(_T_137, UInt<1>("h00"), _T_164) @[Mux.scala 47:69]
    node _T_166 = mux(_T_6, _T_86, _T_165) @[Conversion.scala 21:23]
    node _T_167 = eq(others, UInt<15>("h07fff")) @[Conversion.scala 21:132]
    node _T_168 = neq(others, UInt<1>("h00")) @[Conversion.scala 21:147]
    node _T_169 = not(_T_168) @[Conversion.scala 21:139]
    node _T_170 = or(_T_167, _T_169) @[Conversion.scala 21:137]
    node _T_171 = add(_T_166, _T_170) @[Conversion.scala 21:122]
    node _T_172 = tail(_T_171, 1) @[Conversion.scala 21:122]
    leading <= _T_172 @[Conversion.scala 21:17]
    node _T_173 = bits(others, 14, 14) @[Conversion.scala 22:29]
    node _T_174 = asSInt(leading) @[Conversion.scala 22:60]
    node _T_175 = sub(_T_174, asSInt(UInt<2>("h01"))) @[Conversion.scala 22:67]
    node _T_176 = tail(_T_175, 1) @[Conversion.scala 22:67]
    node _T_177 = asSInt(_T_176) @[Conversion.scala 22:67]
    node _T_178 = asSInt(leading) @[Conversion.scala 22:83]
    node _T_179 = sub(asSInt(UInt<1>("h00")), _T_178) @[Conversion.scala 22:74]
    node _T_180 = tail(_T_179, 1) @[Conversion.scala 22:74]
    node _T_181 = asSInt(_T_180) @[Conversion.scala 22:74]
    node _T_182 = mux(_T_173, _T_177, _T_181) @[Conversion.scala 22:22]
    regime <= _T_182 @[Conversion.scala 22:16]
    node _T_183 = sub(leading, UInt<1>("h01")) @[Conversion.scala 23:48]
    node _T_184 = tail(_T_183, 1) @[Conversion.scala 23:48]
    node _T_185 = dshl(others, _T_184) @[Conversion.scala 23:36]
    exponentFraction <= _T_185 @[Conversion.scala 23:26]
    node _T_186 = bits(exponentFraction, 12, 12) @[Conversion.scala 24:37]
    exponent <= _T_186 @[Conversion.scala 24:18]
    node _T_187 = bits(exponentFraction, 11, 0) @[Conversion.scala 25:46]
    node _T_188 = cat(UInt<1>("h01"), _T_187) @[Cat.scala 29:58]
    fraction <= _T_188 @[Conversion.scala 25:18]
    node _T_189 = bits(io.in, 15, 15) @[Conversion.scala 27:30]
    node _T_190 = not(_T_189) @[Conversion.scala 27:24]
    node _T_191 = bits(io.in, 14, 0) @[Conversion.scala 27:54]
    node _T_192 = neq(_T_191, UInt<1>("h00")) @[Conversion.scala 27:71]
    node _T_193 = not(_T_192) @[Conversion.scala 27:47]
    node _T_194 = and(_T_190, _T_193) @[Conversion.scala 27:45]
    io.out.zero <= _T_194 @[Conversion.scala 27:21]
    node _T_195 = bits(io.in, 15, 15) @[Conversion.scala 28:28]
    node _T_196 = bits(io.in, 14, 0) @[Conversion.scala 28:52]
    node _T_197 = neq(_T_196, UInt<1>("h00")) @[Conversion.scala 28:69]
    node _T_198 = not(_T_197) @[Conversion.scala 28:45]
    node _T_199 = and(_T_195, _T_198) @[Conversion.scala 28:43]
    io.out.nan <= _T_199 @[Conversion.scala 28:20]
    node _T_200 = bits(io.in, 15, 15) @[Conversion.scala 29:29]
    io.out.sign <= _T_200 @[Conversion.scala 29:21]
    node _T_201 = dshl(regime, UInt<1>("h01")) @[Conversion.scala 30:36]
    node _T_202 = cvt(exponent) @[Conversion.scala 30:99]
    node _T_203 = add(_T_201, _T_202) @[Conversion.scala 30:88]
    node _T_204 = tail(_T_203, 1) @[Conversion.scala 30:88]
    node _T_205 = asSInt(_T_204) @[Conversion.scala 30:88]
    io.out.exponent <= _T_205 @[Conversion.scala 30:25]
    io.out.fraction <= fraction @[Conversion.scala 31:25]
    
  module toPositUnpacked_2 : 
    input clock : Clock
    input reset : Reset
    output io : {flip in : UInt<16>, out : {zero : UInt<1>, nan : UInt<1>, sign : UInt<1>, exponent : SInt<6>, fraction : UInt<13>}}
    
    wire others : UInt<15> @[Conversion.scala 13:26]
    wire leading : UInt<5> @[Conversion.scala 14:27]
    wire regime : SInt<6> @[Conversion.scala 15:26]
    wire exponentFraction : UInt<13> @[Conversion.scala 16:36]
    wire exponent : UInt<1> @[Conversion.scala 17:28]
    wire fraction : UInt<13> @[Conversion.scala 18:28]
    node _T = bits(io.in, 14, 0) @[Conversion.scala 20:25]
    node _T_1 = bits(io.out.sign, 0, 0) @[Bitwise.scala 71:15]
    node _T_2 = mux(_T_1, UInt<15>("h07fff"), UInt<15>("h00")) @[Bitwise.scala 71:12]
    node _T_3 = xor(_T, _T_2) @[Conversion.scala 20:43]
    node _T_4 = add(_T_3, io.out.sign) @[Conversion.scala 20:78]
    node _T_5 = tail(_T_4, 1) @[Conversion.scala 20:78]
    others <= _T_5 @[Conversion.scala 20:16]
    node _T_6 = bits(others, 14, 14) @[Conversion.scala 21:30]
    node _T_7 = not(others) @[Conversion.scala 21:77]
    node _T_8 = bits(_T_7, 7, 0) @[Bitwise.scala 108:18]
    node _T_9 = shl(UInt<4>("h0f"), 4) @[Bitwise.scala 101:47]
    node _T_10 = xor(UInt<8>("h0ff"), _T_9) @[Bitwise.scala 101:21]
    node _T_11 = shr(_T_8, 4) @[Bitwise.scala 102:21]
    node _T_12 = and(_T_11, _T_10) @[Bitwise.scala 102:31]
    node _T_13 = bits(_T_8, 3, 0) @[Bitwise.scala 102:46]
    node _T_14 = shl(_T_13, 4) @[Bitwise.scala 102:65]
    node _T_15 = not(_T_10) @[Bitwise.scala 102:77]
    node _T_16 = and(_T_14, _T_15) @[Bitwise.scala 102:75]
    node _T_17 = or(_T_12, _T_16) @[Bitwise.scala 102:39]
    node _T_18 = bits(_T_10, 5, 0) @[Bitwise.scala 101:28]
    node _T_19 = shl(_T_18, 2) @[Bitwise.scala 101:47]
    node _T_20 = xor(_T_10, _T_19) @[Bitwise.scala 101:21]
    node _T_21 = shr(_T_17, 2) @[Bitwise.scala 102:21]
    node _T_22 = and(_T_21, _T_20) @[Bitwise.scala 102:31]
    node _T_23 = bits(_T_17, 5, 0) @[Bitwise.scala 102:46]
    node _T_24 = shl(_T_23, 2) @[Bitwise.scala 102:65]
    node _T_25 = not(_T_20) @[Bitwise.scala 102:77]
    node _T_26 = and(_T_24, _T_25) @[Bitwise.scala 102:75]
    node _T_27 = or(_T_22, _T_26) @[Bitwise.scala 102:39]
    node _T_28 = bits(_T_20, 6, 0) @[Bitwise.scala 101:28]
    node _T_29 = shl(_T_28, 1) @[Bitwise.scala 101:47]
    node _T_30 = xor(_T_20, _T_29) @[Bitwise.scala 101:21]
    node _T_31 = shr(_T_27, 1) @[Bitwise.scala 102:21]
    node _T_32 = and(_T_31, _T_30) @[Bitwise.scala 102:31]
    node _T_33 = bits(_T_27, 6, 0) @[Bitwise.scala 102:46]
    node _T_34 = shl(_T_33, 1) @[Bitwise.scala 102:65]
    node _T_35 = not(_T_30) @[Bitwise.scala 102:77]
    node _T_36 = and(_T_34, _T_35) @[Bitwise.scala 102:75]
    node _T_37 = or(_T_32, _T_36) @[Bitwise.scala 102:39]
    node _T_38 = bits(_T_7, 14, 8) @[Bitwise.scala 108:44]
    node _T_39 = bits(_T_38, 3, 0) @[Bitwise.scala 108:18]
    node _T_40 = bits(_T_39, 1, 0) @[Bitwise.scala 108:18]
    node _T_41 = bits(_T_40, 0, 0) @[Bitwise.scala 108:18]
    node _T_42 = bits(_T_40, 1, 1) @[Bitwise.scala 108:44]
    node _T_43 = cat(_T_41, _T_42) @[Cat.scala 29:58]
    node _T_44 = bits(_T_39, 3, 2) @[Bitwise.scala 108:44]
    node _T_45 = bits(_T_44, 0, 0) @[Bitwise.scala 108:18]
    node _T_46 = bits(_T_44, 1, 1) @[Bitwise.scala 108:44]
    node _T_47 = cat(_T_45, _T_46) @[Cat.scala 29:58]
    node _T_48 = cat(_T_43, _T_47) @[Cat.scala 29:58]
    node _T_49 = bits(_T_38, 6, 4) @[Bitwise.scala 108:44]
    node _T_50 = bits(_T_49, 1, 0) @[Bitwise.scala 108:18]
    node _T_51 = bits(_T_50, 0, 0) @[Bitwise.scala 108:18]
    node _T_52 = bits(_T_50, 1, 1) @[Bitwise.scala 108:44]
    node _T_53 = cat(_T_51, _T_52) @[Cat.scala 29:58]
    node _T_54 = bits(_T_49, 2, 2) @[Bitwise.scala 108:44]
    node _T_55 = cat(_T_53, _T_54) @[Cat.scala 29:58]
    node _T_56 = cat(_T_48, _T_55) @[Cat.scala 29:58]
    node _T_57 = cat(_T_37, _T_56) @[Cat.scala 29:58]
    node _T_58 = bits(_T_57, 0, 0) @[OneHot.scala 47:40]
    node _T_59 = bits(_T_57, 1, 1) @[OneHot.scala 47:40]
    node _T_60 = bits(_T_57, 2, 2) @[OneHot.scala 47:40]
    node _T_61 = bits(_T_57, 3, 3) @[OneHot.scala 47:40]
    node _T_62 = bits(_T_57, 4, 4) @[OneHot.scala 47:40]
    node _T_63 = bits(_T_57, 5, 5) @[OneHot.scala 47:40]
    node _T_64 = bits(_T_57, 6, 6) @[OneHot.scala 47:40]
    node _T_65 = bits(_T_57, 7, 7) @[OneHot.scala 47:40]
    node _T_66 = bits(_T_57, 8, 8) @[OneHot.scala 47:40]
    node _T_67 = bits(_T_57, 9, 9) @[OneHot.scala 47:40]
    node _T_68 = bits(_T_57, 10, 10) @[OneHot.scala 47:40]
    node _T_69 = bits(_T_57, 11, 11) @[OneHot.scala 47:40]
    node _T_70 = bits(_T_57, 12, 12) @[OneHot.scala 47:40]
    node _T_71 = bits(_T_57, 13, 13) @[OneHot.scala 47:40]
    node _T_72 = bits(_T_57, 14, 14) @[OneHot.scala 47:40]
    node _T_73 = mux(_T_71, UInt<4>("h0d"), UInt<4>("h0e")) @[Mux.scala 47:69]
    node _T_74 = mux(_T_70, UInt<4>("h0c"), _T_73) @[Mux.scala 47:69]
    node _T_75 = mux(_T_69, UInt<4>("h0b"), _T_74) @[Mux.scala 47:69]
    node _T_76 = mux(_T_68, UInt<4>("h0a"), _T_75) @[Mux.scala 47:69]
    node _T_77 = mux(_T_67, UInt<4>("h09"), _T_76) @[Mux.scala 47:69]
    node _T_78 = mux(_T_66, UInt<4>("h08"), _T_77) @[Mux.scala 47:69]
    node _T_79 = mux(_T_65, UInt<3>("h07"), _T_78) @[Mux.scala 47:69]
    node _T_80 = mux(_T_64, UInt<3>("h06"), _T_79) @[Mux.scala 47:69]
    node _T_81 = mux(_T_63, UInt<3>("h05"), _T_80) @[Mux.scala 47:69]
    node _T_82 = mux(_T_62, UInt<3>("h04"), _T_81) @[Mux.scala 47:69]
    node _T_83 = mux(_T_61, UInt<2>("h03"), _T_82) @[Mux.scala 47:69]
    node _T_84 = mux(_T_60, UInt<2>("h02"), _T_83) @[Mux.scala 47:69]
    node _T_85 = mux(_T_59, UInt<1>("h01"), _T_84) @[Mux.scala 47:69]
    node _T_86 = mux(_T_58, UInt<1>("h00"), _T_85) @[Mux.scala 47:69]
    node _T_87 = bits(others, 7, 0) @[Bitwise.scala 108:18]
    node _T_88 = shl(UInt<4>("h0f"), 4) @[Bitwise.scala 101:47]
    node _T_89 = xor(UInt<8>("h0ff"), _T_88) @[Bitwise.scala 101:21]
    node _T_90 = shr(_T_87, 4) @[Bitwise.scala 102:21]
    node _T_91 = and(_T_90, _T_89) @[Bitwise.scala 102:31]
    node _T_92 = bits(_T_87, 3, 0) @[Bitwise.scala 102:46]
    node _T_93 = shl(_T_92, 4) @[Bitwise.scala 102:65]
    node _T_94 = not(_T_89) @[Bitwise.scala 102:77]
    node _T_95 = and(_T_93, _T_94) @[Bitwise.scala 102:75]
    node _T_96 = or(_T_91, _T_95) @[Bitwise.scala 102:39]
    node _T_97 = bits(_T_89, 5, 0) @[Bitwise.scala 101:28]
    node _T_98 = shl(_T_97, 2) @[Bitwise.scala 101:47]
    node _T_99 = xor(_T_89, _T_98) @[Bitwise.scala 101:21]
    node _T_100 = shr(_T_96, 2) @[Bitwise.scala 102:21]
    node _T_101 = and(_T_100, _T_99) @[Bitwise.scala 102:31]
    node _T_102 = bits(_T_96, 5, 0) @[Bitwise.scala 102:46]
    node _T_103 = shl(_T_102, 2) @[Bitwise.scala 102:65]
    node _T_104 = not(_T_99) @[Bitwise.scala 102:77]
    node _T_105 = and(_T_103, _T_104) @[Bitwise.scala 102:75]
    node _T_106 = or(_T_101, _T_105) @[Bitwise.scala 102:39]
    node _T_107 = bits(_T_99, 6, 0) @[Bitwise.scala 101:28]
    node _T_108 = shl(_T_107, 1) @[Bitwise.scala 101:47]
    node _T_109 = xor(_T_99, _T_108) @[Bitwise.scala 101:21]
    node _T_110 = shr(_T_106, 1) @[Bitwise.scala 102:21]
    node _T_111 = and(_T_110, _T_109) @[Bitwise.scala 102:31]
    node _T_112 = bits(_T_106, 6, 0) @[Bitwise.scala 102:46]
    node _T_113 = shl(_T_112, 1) @[Bitwise.scala 102:65]
    node _T_114 = not(_T_109) @[Bitwise.scala 102:77]
    node _T_115 = and(_T_113, _T_114) @[Bitwise.scala 102:75]
    node _T_116 = or(_T_111, _T_115) @[Bitwise.scala 102:39]
    node _T_117 = bits(others, 14, 8) @[Bitwise.scala 108:44]
    node _T_118 = bits(_T_117, 3, 0) @[Bitwise.scala 108:18]
    node _T_119 = bits(_T_118, 1, 0) @[Bitwise.scala 108:18]
    node _T_120 = bits(_T_119, 0, 0) @[Bitwise.scala 108:18]
    node _T_121 = bits(_T_119, 1, 1) @[Bitwise.scala 108:44]
    node _T_122 = cat(_T_120, _T_121) @[Cat.scala 29:58]
    node _T_123 = bits(_T_118, 3, 2) @[Bitwise.scala 108:44]
    node _T_124 = bits(_T_123, 0, 0) @[Bitwise.scala 108:18]
    node _T_125 = bits(_T_123, 1, 1) @[Bitwise.scala 108:44]
    node _T_126 = cat(_T_124, _T_125) @[Cat.scala 29:58]
    node _T_127 = cat(_T_122, _T_126) @[Cat.scala 29:58]
    node _T_128 = bits(_T_117, 6, 4) @[Bitwise.scala 108:44]
    node _T_129 = bits(_T_128, 1, 0) @[Bitwise.scala 108:18]
    node _T_130 = bits(_T_129, 0, 0) @[Bitwise.scala 108:18]
    node _T_131 = bits(_T_129, 1, 1) @[Bitwise.scala 108:44]
    node _T_132 = cat(_T_130, _T_131) @[Cat.scala 29:58]
    node _T_133 = bits(_T_128, 2, 2) @[Bitwise.scala 108:44]
    node _T_134 = cat(_T_132, _T_133) @[Cat.scala 29:58]
    node _T_135 = cat(_T_127, _T_134) @[Cat.scala 29:58]
    node _T_136 = cat(_T_116, _T_135) @[Cat.scala 29:58]
    node _T_137 = bits(_T_136, 0, 0) @[OneHot.scala 47:40]
    node _T_138 = bits(_T_136, 1, 1) @[OneHot.scala 47:40]
    node _T_139 = bits(_T_136, 2, 2) @[OneHot.scala 47:40]
    node _T_140 = bits(_T_136, 3, 3) @[OneHot.scala 47:40]
    node _T_141 = bits(_T_136, 4, 4) @[OneHot.scala 47:40]
    node _T_142 = bits(_T_136, 5, 5) @[OneHot.scala 47:40]
    node _T_143 = bits(_T_136, 6, 6) @[OneHot.scala 47:40]
    node _T_144 = bits(_T_136, 7, 7) @[OneHot.scala 47:40]
    node _T_145 = bits(_T_136, 8, 8) @[OneHot.scala 47:40]
    node _T_146 = bits(_T_136, 9, 9) @[OneHot.scala 47:40]
    node _T_147 = bits(_T_136, 10, 10) @[OneHot.scala 47:40]
    node _T_148 = bits(_T_136, 11, 11) @[OneHot.scala 47:40]
    node _T_149 = bits(_T_136, 12, 12) @[OneHot.scala 47:40]
    node _T_150 = bits(_T_136, 13, 13) @[OneHot.scala 47:40]
    node _T_151 = bits(_T_136, 14, 14) @[OneHot.scala 47:40]
    node _T_152 = mux(_T_150, UInt<4>("h0d"), UInt<4>("h0e")) @[Mux.scala 47:69]
    node _T_153 = mux(_T_149, UInt<4>("h0c"), _T_152) @[Mux.scala 47:69]
    node _T_154 = mux(_T_148, UInt<4>("h0b"), _T_153) @[Mux.scala 47:69]
    node _T_155 = mux(_T_147, UInt<4>("h0a"), _T_154) @[Mux.scala 47:69]
    node _T_156 = mux(_T_146, UInt<4>("h09"), _T_155) @[Mux.scala 47:69]
    node _T_157 = mux(_T_145, UInt<4>("h08"), _T_156) @[Mux.scala 47:69]
    node _T_158 = mux(_T_144, UInt<3>("h07"), _T_157) @[Mux.scala 47:69]
    node _T_159 = mux(_T_143, UInt<3>("h06"), _T_158) @[Mux.scala 47:69]
    node _T_160 = mux(_T_142, UInt<3>("h05"), _T_159) @[Mux.scala 47:69]
    node _T_161 = mux(_T_141, UInt<3>("h04"), _T_160) @[Mux.scala 47:69]
    node _T_162 = mux(_T_140, UInt<2>("h03"), _T_161) @[Mux.scala 47:69]
    node _T_163 = mux(_T_139, UInt<2>("h02"), _T_162) @[Mux.scala 47:69]
    node _T_164 = mux(_T_138, UInt<1>("h01"), _T_163) @[Mux.scala 47:69]
    node _T_165 = mux(_T_137, UInt<1>("h00"), _T_164) @[Mux.scala 47:69]
    node _T_166 = mux(_T_6, _T_86, _T_165) @[Conversion.scala 21:23]
    node _T_167 = eq(others, UInt<15>("h07fff")) @[Conversion.scala 21:132]
    node _T_168 = neq(others, UInt<1>("h00")) @[Conversion.scala 21:147]
    node _T_169 = not(_T_168) @[Conversion.scala 21:139]
    node _T_170 = or(_T_167, _T_169) @[Conversion.scala 21:137]
    node _T_171 = add(_T_166, _T_170) @[Conversion.scala 21:122]
    node _T_172 = tail(_T_171, 1) @[Conversion.scala 21:122]
    leading <= _T_172 @[Conversion.scala 21:17]
    node _T_173 = bits(others, 14, 14) @[Conversion.scala 22:29]
    node _T_174 = asSInt(leading) @[Conversion.scala 22:60]
    node _T_175 = sub(_T_174, asSInt(UInt<2>("h01"))) @[Conversion.scala 22:67]
    node _T_176 = tail(_T_175, 1) @[Conversion.scala 22:67]
    node _T_177 = asSInt(_T_176) @[Conversion.scala 22:67]
    node _T_178 = asSInt(leading) @[Conversion.scala 22:83]
    node _T_179 = sub(asSInt(UInt<1>("h00")), _T_178) @[Conversion.scala 22:74]
    node _T_180 = tail(_T_179, 1) @[Conversion.scala 22:74]
    node _T_181 = asSInt(_T_180) @[Conversion.scala 22:74]
    node _T_182 = mux(_T_173, _T_177, _T_181) @[Conversion.scala 22:22]
    regime <= _T_182 @[Conversion.scala 22:16]
    node _T_183 = sub(leading, UInt<1>("h01")) @[Conversion.scala 23:48]
    node _T_184 = tail(_T_183, 1) @[Conversion.scala 23:48]
    node _T_185 = dshl(others, _T_184) @[Conversion.scala 23:36]
    exponentFraction <= _T_185 @[Conversion.scala 23:26]
    node _T_186 = bits(exponentFraction, 12, 12) @[Conversion.scala 24:37]
    exponent <= _T_186 @[Conversion.scala 24:18]
    node _T_187 = bits(exponentFraction, 11, 0) @[Conversion.scala 25:46]
    node _T_188 = cat(UInt<1>("h01"), _T_187) @[Cat.scala 29:58]
    fraction <= _T_188 @[Conversion.scala 25:18]
    node _T_189 = bits(io.in, 15, 15) @[Conversion.scala 27:30]
    node _T_190 = not(_T_189) @[Conversion.scala 27:24]
    node _T_191 = bits(io.in, 14, 0) @[Conversion.scala 27:54]
    node _T_192 = neq(_T_191, UInt<1>("h00")) @[Conversion.scala 27:71]
    node _T_193 = not(_T_192) @[Conversion.scala 27:47]
    node _T_194 = and(_T_190, _T_193) @[Conversion.scala 27:45]
    io.out.zero <= _T_194 @[Conversion.scala 27:21]
    node _T_195 = bits(io.in, 15, 15) @[Conversion.scala 28:28]
    node _T_196 = bits(io.in, 14, 0) @[Conversion.scala 28:52]
    node _T_197 = neq(_T_196, UInt<1>("h00")) @[Conversion.scala 28:69]
    node _T_198 = not(_T_197) @[Conversion.scala 28:45]
    node _T_199 = and(_T_195, _T_198) @[Conversion.scala 28:43]
    io.out.nan <= _T_199 @[Conversion.scala 28:20]
    node _T_200 = bits(io.in, 15, 15) @[Conversion.scala 29:29]
    io.out.sign <= _T_200 @[Conversion.scala 29:21]
    node _T_201 = dshl(regime, UInt<1>("h01")) @[Conversion.scala 30:36]
    node _T_202 = cvt(exponent) @[Conversion.scala 30:99]
    node _T_203 = add(_T_201, _T_202) @[Conversion.scala 30:88]
    node _T_204 = tail(_T_203, 1) @[Conversion.scala 30:88]
    node _T_205 = asSInt(_T_204) @[Conversion.scala 30:88]
    io.out.exponent <= _T_205 @[Conversion.scala 30:25]
    io.out.fraction <= fraction @[Conversion.scala 31:25]
    
  module toPositUnpacked_3 : 
    input clock : Clock
    input reset : Reset
    output io : {flip in : UInt<16>, out : {zero : UInt<1>, nan : UInt<1>, sign : UInt<1>, exponent : SInt<6>, fraction : UInt<13>}}
    
    wire others : UInt<15> @[Conversion.scala 13:26]
    wire leading : UInt<5> @[Conversion.scala 14:27]
    wire regime : SInt<6> @[Conversion.scala 15:26]
    wire exponentFraction : UInt<13> @[Conversion.scala 16:36]
    wire exponent : UInt<1> @[Conversion.scala 17:28]
    wire fraction : UInt<13> @[Conversion.scala 18:28]
    node _T = bits(io.in, 14, 0) @[Conversion.scala 20:25]
    node _T_1 = bits(io.out.sign, 0, 0) @[Bitwise.scala 71:15]
    node _T_2 = mux(_T_1, UInt<15>("h07fff"), UInt<15>("h00")) @[Bitwise.scala 71:12]
    node _T_3 = xor(_T, _T_2) @[Conversion.scala 20:43]
    node _T_4 = add(_T_3, io.out.sign) @[Conversion.scala 20:78]
    node _T_5 = tail(_T_4, 1) @[Conversion.scala 20:78]
    others <= _T_5 @[Conversion.scala 20:16]
    node _T_6 = bits(others, 14, 14) @[Conversion.scala 21:30]
    node _T_7 = not(others) @[Conversion.scala 21:77]
    node _T_8 = bits(_T_7, 7, 0) @[Bitwise.scala 108:18]
    node _T_9 = shl(UInt<4>("h0f"), 4) @[Bitwise.scala 101:47]
    node _T_10 = xor(UInt<8>("h0ff"), _T_9) @[Bitwise.scala 101:21]
    node _T_11 = shr(_T_8, 4) @[Bitwise.scala 102:21]
    node _T_12 = and(_T_11, _T_10) @[Bitwise.scala 102:31]
    node _T_13 = bits(_T_8, 3, 0) @[Bitwise.scala 102:46]
    node _T_14 = shl(_T_13, 4) @[Bitwise.scala 102:65]
    node _T_15 = not(_T_10) @[Bitwise.scala 102:77]
    node _T_16 = and(_T_14, _T_15) @[Bitwise.scala 102:75]
    node _T_17 = or(_T_12, _T_16) @[Bitwise.scala 102:39]
    node _T_18 = bits(_T_10, 5, 0) @[Bitwise.scala 101:28]
    node _T_19 = shl(_T_18, 2) @[Bitwise.scala 101:47]
    node _T_20 = xor(_T_10, _T_19) @[Bitwise.scala 101:21]
    node _T_21 = shr(_T_17, 2) @[Bitwise.scala 102:21]
    node _T_22 = and(_T_21, _T_20) @[Bitwise.scala 102:31]
    node _T_23 = bits(_T_17, 5, 0) @[Bitwise.scala 102:46]
    node _T_24 = shl(_T_23, 2) @[Bitwise.scala 102:65]
    node _T_25 = not(_T_20) @[Bitwise.scala 102:77]
    node _T_26 = and(_T_24, _T_25) @[Bitwise.scala 102:75]
    node _T_27 = or(_T_22, _T_26) @[Bitwise.scala 102:39]
    node _T_28 = bits(_T_20, 6, 0) @[Bitwise.scala 101:28]
    node _T_29 = shl(_T_28, 1) @[Bitwise.scala 101:47]
    node _T_30 = xor(_T_20, _T_29) @[Bitwise.scala 101:21]
    node _T_31 = shr(_T_27, 1) @[Bitwise.scala 102:21]
    node _T_32 = and(_T_31, _T_30) @[Bitwise.scala 102:31]
    node _T_33 = bits(_T_27, 6, 0) @[Bitwise.scala 102:46]
    node _T_34 = shl(_T_33, 1) @[Bitwise.scala 102:65]
    node _T_35 = not(_T_30) @[Bitwise.scala 102:77]
    node _T_36 = and(_T_34, _T_35) @[Bitwise.scala 102:75]
    node _T_37 = or(_T_32, _T_36) @[Bitwise.scala 102:39]
    node _T_38 = bits(_T_7, 14, 8) @[Bitwise.scala 108:44]
    node _T_39 = bits(_T_38, 3, 0) @[Bitwise.scala 108:18]
    node _T_40 = bits(_T_39, 1, 0) @[Bitwise.scala 108:18]
    node _T_41 = bits(_T_40, 0, 0) @[Bitwise.scala 108:18]
    node _T_42 = bits(_T_40, 1, 1) @[Bitwise.scala 108:44]
    node _T_43 = cat(_T_41, _T_42) @[Cat.scala 29:58]
    node _T_44 = bits(_T_39, 3, 2) @[Bitwise.scala 108:44]
    node _T_45 = bits(_T_44, 0, 0) @[Bitwise.scala 108:18]
    node _T_46 = bits(_T_44, 1, 1) @[Bitwise.scala 108:44]
    node _T_47 = cat(_T_45, _T_46) @[Cat.scala 29:58]
    node _T_48 = cat(_T_43, _T_47) @[Cat.scala 29:58]
    node _T_49 = bits(_T_38, 6, 4) @[Bitwise.scala 108:44]
    node _T_50 = bits(_T_49, 1, 0) @[Bitwise.scala 108:18]
    node _T_51 = bits(_T_50, 0, 0) @[Bitwise.scala 108:18]
    node _T_52 = bits(_T_50, 1, 1) @[Bitwise.scala 108:44]
    node _T_53 = cat(_T_51, _T_52) @[Cat.scala 29:58]
    node _T_54 = bits(_T_49, 2, 2) @[Bitwise.scala 108:44]
    node _T_55 = cat(_T_53, _T_54) @[Cat.scala 29:58]
    node _T_56 = cat(_T_48, _T_55) @[Cat.scala 29:58]
    node _T_57 = cat(_T_37, _T_56) @[Cat.scala 29:58]
    node _T_58 = bits(_T_57, 0, 0) @[OneHot.scala 47:40]
    node _T_59 = bits(_T_57, 1, 1) @[OneHot.scala 47:40]
    node _T_60 = bits(_T_57, 2, 2) @[OneHot.scala 47:40]
    node _T_61 = bits(_T_57, 3, 3) @[OneHot.scala 47:40]
    node _T_62 = bits(_T_57, 4, 4) @[OneHot.scala 47:40]
    node _T_63 = bits(_T_57, 5, 5) @[OneHot.scala 47:40]
    node _T_64 = bits(_T_57, 6, 6) @[OneHot.scala 47:40]
    node _T_65 = bits(_T_57, 7, 7) @[OneHot.scala 47:40]
    node _T_66 = bits(_T_57, 8, 8) @[OneHot.scala 47:40]
    node _T_67 = bits(_T_57, 9, 9) @[OneHot.scala 47:40]
    node _T_68 = bits(_T_57, 10, 10) @[OneHot.scala 47:40]
    node _T_69 = bits(_T_57, 11, 11) @[OneHot.scala 47:40]
    node _T_70 = bits(_T_57, 12, 12) @[OneHot.scala 47:40]
    node _T_71 = bits(_T_57, 13, 13) @[OneHot.scala 47:40]
    node _T_72 = bits(_T_57, 14, 14) @[OneHot.scala 47:40]
    node _T_73 = mux(_T_71, UInt<4>("h0d"), UInt<4>("h0e")) @[Mux.scala 47:69]
    node _T_74 = mux(_T_70, UInt<4>("h0c"), _T_73) @[Mux.scala 47:69]
    node _T_75 = mux(_T_69, UInt<4>("h0b"), _T_74) @[Mux.scala 47:69]
    node _T_76 = mux(_T_68, UInt<4>("h0a"), _T_75) @[Mux.scala 47:69]
    node _T_77 = mux(_T_67, UInt<4>("h09"), _T_76) @[Mux.scala 47:69]
    node _T_78 = mux(_T_66, UInt<4>("h08"), _T_77) @[Mux.scala 47:69]
    node _T_79 = mux(_T_65, UInt<3>("h07"), _T_78) @[Mux.scala 47:69]
    node _T_80 = mux(_T_64, UInt<3>("h06"), _T_79) @[Mux.scala 47:69]
    node _T_81 = mux(_T_63, UInt<3>("h05"), _T_80) @[Mux.scala 47:69]
    node _T_82 = mux(_T_62, UInt<3>("h04"), _T_81) @[Mux.scala 47:69]
    node _T_83 = mux(_T_61, UInt<2>("h03"), _T_82) @[Mux.scala 47:69]
    node _T_84 = mux(_T_60, UInt<2>("h02"), _T_83) @[Mux.scala 47:69]
    node _T_85 = mux(_T_59, UInt<1>("h01"), _T_84) @[Mux.scala 47:69]
    node _T_86 = mux(_T_58, UInt<1>("h00"), _T_85) @[Mux.scala 47:69]
    node _T_87 = bits(others, 7, 0) @[Bitwise.scala 108:18]
    node _T_88 = shl(UInt<4>("h0f"), 4) @[Bitwise.scala 101:47]
    node _T_89 = xor(UInt<8>("h0ff"), _T_88) @[Bitwise.scala 101:21]
    node _T_90 = shr(_T_87, 4) @[Bitwise.scala 102:21]
    node _T_91 = and(_T_90, _T_89) @[Bitwise.scala 102:31]
    node _T_92 = bits(_T_87, 3, 0) @[Bitwise.scala 102:46]
    node _T_93 = shl(_T_92, 4) @[Bitwise.scala 102:65]
    node _T_94 = not(_T_89) @[Bitwise.scala 102:77]
    node _T_95 = and(_T_93, _T_94) @[Bitwise.scala 102:75]
    node _T_96 = or(_T_91, _T_95) @[Bitwise.scala 102:39]
    node _T_97 = bits(_T_89, 5, 0) @[Bitwise.scala 101:28]
    node _T_98 = shl(_T_97, 2) @[Bitwise.scala 101:47]
    node _T_99 = xor(_T_89, _T_98) @[Bitwise.scala 101:21]
    node _T_100 = shr(_T_96, 2) @[Bitwise.scala 102:21]
    node _T_101 = and(_T_100, _T_99) @[Bitwise.scala 102:31]
    node _T_102 = bits(_T_96, 5, 0) @[Bitwise.scala 102:46]
    node _T_103 = shl(_T_102, 2) @[Bitwise.scala 102:65]
    node _T_104 = not(_T_99) @[Bitwise.scala 102:77]
    node _T_105 = and(_T_103, _T_104) @[Bitwise.scala 102:75]
    node _T_106 = or(_T_101, _T_105) @[Bitwise.scala 102:39]
    node _T_107 = bits(_T_99, 6, 0) @[Bitwise.scala 101:28]
    node _T_108 = shl(_T_107, 1) @[Bitwise.scala 101:47]
    node _T_109 = xor(_T_99, _T_108) @[Bitwise.scala 101:21]
    node _T_110 = shr(_T_106, 1) @[Bitwise.scala 102:21]
    node _T_111 = and(_T_110, _T_109) @[Bitwise.scala 102:31]
    node _T_112 = bits(_T_106, 6, 0) @[Bitwise.scala 102:46]
    node _T_113 = shl(_T_112, 1) @[Bitwise.scala 102:65]
    node _T_114 = not(_T_109) @[Bitwise.scala 102:77]
    node _T_115 = and(_T_113, _T_114) @[Bitwise.scala 102:75]
    node _T_116 = or(_T_111, _T_115) @[Bitwise.scala 102:39]
    node _T_117 = bits(others, 14, 8) @[Bitwise.scala 108:44]
    node _T_118 = bits(_T_117, 3, 0) @[Bitwise.scala 108:18]
    node _T_119 = bits(_T_118, 1, 0) @[Bitwise.scala 108:18]
    node _T_120 = bits(_T_119, 0, 0) @[Bitwise.scala 108:18]
    node _T_121 = bits(_T_119, 1, 1) @[Bitwise.scala 108:44]
    node _T_122 = cat(_T_120, _T_121) @[Cat.scala 29:58]
    node _T_123 = bits(_T_118, 3, 2) @[Bitwise.scala 108:44]
    node _T_124 = bits(_T_123, 0, 0) @[Bitwise.scala 108:18]
    node _T_125 = bits(_T_123, 1, 1) @[Bitwise.scala 108:44]
    node _T_126 = cat(_T_124, _T_125) @[Cat.scala 29:58]
    node _T_127 = cat(_T_122, _T_126) @[Cat.scala 29:58]
    node _T_128 = bits(_T_117, 6, 4) @[Bitwise.scala 108:44]
    node _T_129 = bits(_T_128, 1, 0) @[Bitwise.scala 108:18]
    node _T_130 = bits(_T_129, 0, 0) @[Bitwise.scala 108:18]
    node _T_131 = bits(_T_129, 1, 1) @[Bitwise.scala 108:44]
    node _T_132 = cat(_T_130, _T_131) @[Cat.scala 29:58]
    node _T_133 = bits(_T_128, 2, 2) @[Bitwise.scala 108:44]
    node _T_134 = cat(_T_132, _T_133) @[Cat.scala 29:58]
    node _T_135 = cat(_T_127, _T_134) @[Cat.scala 29:58]
    node _T_136 = cat(_T_116, _T_135) @[Cat.scala 29:58]
    node _T_137 = bits(_T_136, 0, 0) @[OneHot.scala 47:40]
    node _T_138 = bits(_T_136, 1, 1) @[OneHot.scala 47:40]
    node _T_139 = bits(_T_136, 2, 2) @[OneHot.scala 47:40]
    node _T_140 = bits(_T_136, 3, 3) @[OneHot.scala 47:40]
    node _T_141 = bits(_T_136, 4, 4) @[OneHot.scala 47:40]
    node _T_142 = bits(_T_136, 5, 5) @[OneHot.scala 47:40]
    node _T_143 = bits(_T_136, 6, 6) @[OneHot.scala 47:40]
    node _T_144 = bits(_T_136, 7, 7) @[OneHot.scala 47:40]
    node _T_145 = bits(_T_136, 8, 8) @[OneHot.scala 47:40]
    node _T_146 = bits(_T_136, 9, 9) @[OneHot.scala 47:40]
    node _T_147 = bits(_T_136, 10, 10) @[OneHot.scala 47:40]
    node _T_148 = bits(_T_136, 11, 11) @[OneHot.scala 47:40]
    node _T_149 = bits(_T_136, 12, 12) @[OneHot.scala 47:40]
    node _T_150 = bits(_T_136, 13, 13) @[OneHot.scala 47:40]
    node _T_151 = bits(_T_136, 14, 14) @[OneHot.scala 47:40]
    node _T_152 = mux(_T_150, UInt<4>("h0d"), UInt<4>("h0e")) @[Mux.scala 47:69]
    node _T_153 = mux(_T_149, UInt<4>("h0c"), _T_152) @[Mux.scala 47:69]
    node _T_154 = mux(_T_148, UInt<4>("h0b"), _T_153) @[Mux.scala 47:69]
    node _T_155 = mux(_T_147, UInt<4>("h0a"), _T_154) @[Mux.scala 47:69]
    node _T_156 = mux(_T_146, UInt<4>("h09"), _T_155) @[Mux.scala 47:69]
    node _T_157 = mux(_T_145, UInt<4>("h08"), _T_156) @[Mux.scala 47:69]
    node _T_158 = mux(_T_144, UInt<3>("h07"), _T_157) @[Mux.scala 47:69]
    node _T_159 = mux(_T_143, UInt<3>("h06"), _T_158) @[Mux.scala 47:69]
    node _T_160 = mux(_T_142, UInt<3>("h05"), _T_159) @[Mux.scala 47:69]
    node _T_161 = mux(_T_141, UInt<3>("h04"), _T_160) @[Mux.scala 47:69]
    node _T_162 = mux(_T_140, UInt<2>("h03"), _T_161) @[Mux.scala 47:69]
    node _T_163 = mux(_T_139, UInt<2>("h02"), _T_162) @[Mux.scala 47:69]
    node _T_164 = mux(_T_138, UInt<1>("h01"), _T_163) @[Mux.scala 47:69]
    node _T_165 = mux(_T_137, UInt<1>("h00"), _T_164) @[Mux.scala 47:69]
    node _T_166 = mux(_T_6, _T_86, _T_165) @[Conversion.scala 21:23]
    node _T_167 = eq(others, UInt<15>("h07fff")) @[Conversion.scala 21:132]
    node _T_168 = neq(others, UInt<1>("h00")) @[Conversion.scala 21:147]
    node _T_169 = not(_T_168) @[Conversion.scala 21:139]
    node _T_170 = or(_T_167, _T_169) @[Conversion.scala 21:137]
    node _T_171 = add(_T_166, _T_170) @[Conversion.scala 21:122]
    node _T_172 = tail(_T_171, 1) @[Conversion.scala 21:122]
    leading <= _T_172 @[Conversion.scala 21:17]
    node _T_173 = bits(others, 14, 14) @[Conversion.scala 22:29]
    node _T_174 = asSInt(leading) @[Conversion.scala 22:60]
    node _T_175 = sub(_T_174, asSInt(UInt<2>("h01"))) @[Conversion.scala 22:67]
    node _T_176 = tail(_T_175, 1) @[Conversion.scala 22:67]
    node _T_177 = asSInt(_T_176) @[Conversion.scala 22:67]
    node _T_178 = asSInt(leading) @[Conversion.scala 22:83]
    node _T_179 = sub(asSInt(UInt<1>("h00")), _T_178) @[Conversion.scala 22:74]
    node _T_180 = tail(_T_179, 1) @[Conversion.scala 22:74]
    node _T_181 = asSInt(_T_180) @[Conversion.scala 22:74]
    node _T_182 = mux(_T_173, _T_177, _T_181) @[Conversion.scala 22:22]
    regime <= _T_182 @[Conversion.scala 22:16]
    node _T_183 = sub(leading, UInt<1>("h01")) @[Conversion.scala 23:48]
    node _T_184 = tail(_T_183, 1) @[Conversion.scala 23:48]
    node _T_185 = dshl(others, _T_184) @[Conversion.scala 23:36]
    exponentFraction <= _T_185 @[Conversion.scala 23:26]
    node _T_186 = bits(exponentFraction, 12, 12) @[Conversion.scala 24:37]
    exponent <= _T_186 @[Conversion.scala 24:18]
    node _T_187 = bits(exponentFraction, 11, 0) @[Conversion.scala 25:46]
    node _T_188 = cat(UInt<1>("h01"), _T_187) @[Cat.scala 29:58]
    fraction <= _T_188 @[Conversion.scala 25:18]
    node _T_189 = bits(io.in, 15, 15) @[Conversion.scala 27:30]
    node _T_190 = not(_T_189) @[Conversion.scala 27:24]
    node _T_191 = bits(io.in, 14, 0) @[Conversion.scala 27:54]
    node _T_192 = neq(_T_191, UInt<1>("h00")) @[Conversion.scala 27:71]
    node _T_193 = not(_T_192) @[Conversion.scala 27:47]
    node _T_194 = and(_T_190, _T_193) @[Conversion.scala 27:45]
    io.out.zero <= _T_194 @[Conversion.scala 27:21]
    node _T_195 = bits(io.in, 15, 15) @[Conversion.scala 28:28]
    node _T_196 = bits(io.in, 14, 0) @[Conversion.scala 28:52]
    node _T_197 = neq(_T_196, UInt<1>("h00")) @[Conversion.scala 28:69]
    node _T_198 = not(_T_197) @[Conversion.scala 28:45]
    node _T_199 = and(_T_195, _T_198) @[Conversion.scala 28:43]
    io.out.nan <= _T_199 @[Conversion.scala 28:20]
    node _T_200 = bits(io.in, 15, 15) @[Conversion.scala 29:29]
    io.out.sign <= _T_200 @[Conversion.scala 29:21]
    node _T_201 = dshl(regime, UInt<1>("h01")) @[Conversion.scala 30:36]
    node _T_202 = cvt(exponent) @[Conversion.scala 30:99]
    node _T_203 = add(_T_201, _T_202) @[Conversion.scala 30:88]
    node _T_204 = tail(_T_203, 1) @[Conversion.scala 30:88]
    node _T_205 = asSInt(_T_204) @[Conversion.scala 30:88]
    io.out.exponent <= _T_205 @[Conversion.scala 30:25]
    io.out.fraction <= fraction @[Conversion.scala 31:25]
    
  module toPositUnpacked_4 : 
    input clock : Clock
    input reset : Reset
    output io : {flip in : UInt<16>, out : {zero : UInt<1>, nan : UInt<1>, sign : UInt<1>, exponent : SInt<6>, fraction : UInt<13>}}
    
    wire others : UInt<15> @[Conversion.scala 13:26]
    wire leading : UInt<5> @[Conversion.scala 14:27]
    wire regime : SInt<6> @[Conversion.scala 15:26]
    wire exponentFraction : UInt<13> @[Conversion.scala 16:36]
    wire exponent : UInt<1> @[Conversion.scala 17:28]
    wire fraction : UInt<13> @[Conversion.scala 18:28]
    node _T = bits(io.in, 14, 0) @[Conversion.scala 20:25]
    node _T_1 = bits(io.out.sign, 0, 0) @[Bitwise.scala 71:15]
    node _T_2 = mux(_T_1, UInt<15>("h07fff"), UInt<15>("h00")) @[Bitwise.scala 71:12]
    node _T_3 = xor(_T, _T_2) @[Conversion.scala 20:43]
    node _T_4 = add(_T_3, io.out.sign) @[Conversion.scala 20:78]
    node _T_5 = tail(_T_4, 1) @[Conversion.scala 20:78]
    others <= _T_5 @[Conversion.scala 20:16]
    node _T_6 = bits(others, 14, 14) @[Conversion.scala 21:30]
    node _T_7 = not(others) @[Conversion.scala 21:77]
    node _T_8 = bits(_T_7, 7, 0) @[Bitwise.scala 108:18]
    node _T_9 = shl(UInt<4>("h0f"), 4) @[Bitwise.scala 101:47]
    node _T_10 = xor(UInt<8>("h0ff"), _T_9) @[Bitwise.scala 101:21]
    node _T_11 = shr(_T_8, 4) @[Bitwise.scala 102:21]
    node _T_12 = and(_T_11, _T_10) @[Bitwise.scala 102:31]
    node _T_13 = bits(_T_8, 3, 0) @[Bitwise.scala 102:46]
    node _T_14 = shl(_T_13, 4) @[Bitwise.scala 102:65]
    node _T_15 = not(_T_10) @[Bitwise.scala 102:77]
    node _T_16 = and(_T_14, _T_15) @[Bitwise.scala 102:75]
    node _T_17 = or(_T_12, _T_16) @[Bitwise.scala 102:39]
    node _T_18 = bits(_T_10, 5, 0) @[Bitwise.scala 101:28]
    node _T_19 = shl(_T_18, 2) @[Bitwise.scala 101:47]
    node _T_20 = xor(_T_10, _T_19) @[Bitwise.scala 101:21]
    node _T_21 = shr(_T_17, 2) @[Bitwise.scala 102:21]
    node _T_22 = and(_T_21, _T_20) @[Bitwise.scala 102:31]
    node _T_23 = bits(_T_17, 5, 0) @[Bitwise.scala 102:46]
    node _T_24 = shl(_T_23, 2) @[Bitwise.scala 102:65]
    node _T_25 = not(_T_20) @[Bitwise.scala 102:77]
    node _T_26 = and(_T_24, _T_25) @[Bitwise.scala 102:75]
    node _T_27 = or(_T_22, _T_26) @[Bitwise.scala 102:39]
    node _T_28 = bits(_T_20, 6, 0) @[Bitwise.scala 101:28]
    node _T_29 = shl(_T_28, 1) @[Bitwise.scala 101:47]
    node _T_30 = xor(_T_20, _T_29) @[Bitwise.scala 101:21]
    node _T_31 = shr(_T_27, 1) @[Bitwise.scala 102:21]
    node _T_32 = and(_T_31, _T_30) @[Bitwise.scala 102:31]
    node _T_33 = bits(_T_27, 6, 0) @[Bitwise.scala 102:46]
    node _T_34 = shl(_T_33, 1) @[Bitwise.scala 102:65]
    node _T_35 = not(_T_30) @[Bitwise.scala 102:77]
    node _T_36 = and(_T_34, _T_35) @[Bitwise.scala 102:75]
    node _T_37 = or(_T_32, _T_36) @[Bitwise.scala 102:39]
    node _T_38 = bits(_T_7, 14, 8) @[Bitwise.scala 108:44]
    node _T_39 = bits(_T_38, 3, 0) @[Bitwise.scala 108:18]
    node _T_40 = bits(_T_39, 1, 0) @[Bitwise.scala 108:18]
    node _T_41 = bits(_T_40, 0, 0) @[Bitwise.scala 108:18]
    node _T_42 = bits(_T_40, 1, 1) @[Bitwise.scala 108:44]
    node _T_43 = cat(_T_41, _T_42) @[Cat.scala 29:58]
    node _T_44 = bits(_T_39, 3, 2) @[Bitwise.scala 108:44]
    node _T_45 = bits(_T_44, 0, 0) @[Bitwise.scala 108:18]
    node _T_46 = bits(_T_44, 1, 1) @[Bitwise.scala 108:44]
    node _T_47 = cat(_T_45, _T_46) @[Cat.scala 29:58]
    node _T_48 = cat(_T_43, _T_47) @[Cat.scala 29:58]
    node _T_49 = bits(_T_38, 6, 4) @[Bitwise.scala 108:44]
    node _T_50 = bits(_T_49, 1, 0) @[Bitwise.scala 108:18]
    node _T_51 = bits(_T_50, 0, 0) @[Bitwise.scala 108:18]
    node _T_52 = bits(_T_50, 1, 1) @[Bitwise.scala 108:44]
    node _T_53 = cat(_T_51, _T_52) @[Cat.scala 29:58]
    node _T_54 = bits(_T_49, 2, 2) @[Bitwise.scala 108:44]
    node _T_55 = cat(_T_53, _T_54) @[Cat.scala 29:58]
    node _T_56 = cat(_T_48, _T_55) @[Cat.scala 29:58]
    node _T_57 = cat(_T_37, _T_56) @[Cat.scala 29:58]
    node _T_58 = bits(_T_57, 0, 0) @[OneHot.scala 47:40]
    node _T_59 = bits(_T_57, 1, 1) @[OneHot.scala 47:40]
    node _T_60 = bits(_T_57, 2, 2) @[OneHot.scala 47:40]
    node _T_61 = bits(_T_57, 3, 3) @[OneHot.scala 47:40]
    node _T_62 = bits(_T_57, 4, 4) @[OneHot.scala 47:40]
    node _T_63 = bits(_T_57, 5, 5) @[OneHot.scala 47:40]
    node _T_64 = bits(_T_57, 6, 6) @[OneHot.scala 47:40]
    node _T_65 = bits(_T_57, 7, 7) @[OneHot.scala 47:40]
    node _T_66 = bits(_T_57, 8, 8) @[OneHot.scala 47:40]
    node _T_67 = bits(_T_57, 9, 9) @[OneHot.scala 47:40]
    node _T_68 = bits(_T_57, 10, 10) @[OneHot.scala 47:40]
    node _T_69 = bits(_T_57, 11, 11) @[OneHot.scala 47:40]
    node _T_70 = bits(_T_57, 12, 12) @[OneHot.scala 47:40]
    node _T_71 = bits(_T_57, 13, 13) @[OneHot.scala 47:40]
    node _T_72 = bits(_T_57, 14, 14) @[OneHot.scala 47:40]
    node _T_73 = mux(_T_71, UInt<4>("h0d"), UInt<4>("h0e")) @[Mux.scala 47:69]
    node _T_74 = mux(_T_70, UInt<4>("h0c"), _T_73) @[Mux.scala 47:69]
    node _T_75 = mux(_T_69, UInt<4>("h0b"), _T_74) @[Mux.scala 47:69]
    node _T_76 = mux(_T_68, UInt<4>("h0a"), _T_75) @[Mux.scala 47:69]
    node _T_77 = mux(_T_67, UInt<4>("h09"), _T_76) @[Mux.scala 47:69]
    node _T_78 = mux(_T_66, UInt<4>("h08"), _T_77) @[Mux.scala 47:69]
    node _T_79 = mux(_T_65, UInt<3>("h07"), _T_78) @[Mux.scala 47:69]
    node _T_80 = mux(_T_64, UInt<3>("h06"), _T_79) @[Mux.scala 47:69]
    node _T_81 = mux(_T_63, UInt<3>("h05"), _T_80) @[Mux.scala 47:69]
    node _T_82 = mux(_T_62, UInt<3>("h04"), _T_81) @[Mux.scala 47:69]
    node _T_83 = mux(_T_61, UInt<2>("h03"), _T_82) @[Mux.scala 47:69]
    node _T_84 = mux(_T_60, UInt<2>("h02"), _T_83) @[Mux.scala 47:69]
    node _T_85 = mux(_T_59, UInt<1>("h01"), _T_84) @[Mux.scala 47:69]
    node _T_86 = mux(_T_58, UInt<1>("h00"), _T_85) @[Mux.scala 47:69]
    node _T_87 = bits(others, 7, 0) @[Bitwise.scala 108:18]
    node _T_88 = shl(UInt<4>("h0f"), 4) @[Bitwise.scala 101:47]
    node _T_89 = xor(UInt<8>("h0ff"), _T_88) @[Bitwise.scala 101:21]
    node _T_90 = shr(_T_87, 4) @[Bitwise.scala 102:21]
    node _T_91 = and(_T_90, _T_89) @[Bitwise.scala 102:31]
    node _T_92 = bits(_T_87, 3, 0) @[Bitwise.scala 102:46]
    node _T_93 = shl(_T_92, 4) @[Bitwise.scala 102:65]
    node _T_94 = not(_T_89) @[Bitwise.scala 102:77]
    node _T_95 = and(_T_93, _T_94) @[Bitwise.scala 102:75]
    node _T_96 = or(_T_91, _T_95) @[Bitwise.scala 102:39]
    node _T_97 = bits(_T_89, 5, 0) @[Bitwise.scala 101:28]
    node _T_98 = shl(_T_97, 2) @[Bitwise.scala 101:47]
    node _T_99 = xor(_T_89, _T_98) @[Bitwise.scala 101:21]
    node _T_100 = shr(_T_96, 2) @[Bitwise.scala 102:21]
    node _T_101 = and(_T_100, _T_99) @[Bitwise.scala 102:31]
    node _T_102 = bits(_T_96, 5, 0) @[Bitwise.scala 102:46]
    node _T_103 = shl(_T_102, 2) @[Bitwise.scala 102:65]
    node _T_104 = not(_T_99) @[Bitwise.scala 102:77]
    node _T_105 = and(_T_103, _T_104) @[Bitwise.scala 102:75]
    node _T_106 = or(_T_101, _T_105) @[Bitwise.scala 102:39]
    node _T_107 = bits(_T_99, 6, 0) @[Bitwise.scala 101:28]
    node _T_108 = shl(_T_107, 1) @[Bitwise.scala 101:47]
    node _T_109 = xor(_T_99, _T_108) @[Bitwise.scala 101:21]
    node _T_110 = shr(_T_106, 1) @[Bitwise.scala 102:21]
    node _T_111 = and(_T_110, _T_109) @[Bitwise.scala 102:31]
    node _T_112 = bits(_T_106, 6, 0) @[Bitwise.scala 102:46]
    node _T_113 = shl(_T_112, 1) @[Bitwise.scala 102:65]
    node _T_114 = not(_T_109) @[Bitwise.scala 102:77]
    node _T_115 = and(_T_113, _T_114) @[Bitwise.scala 102:75]
    node _T_116 = or(_T_111, _T_115) @[Bitwise.scala 102:39]
    node _T_117 = bits(others, 14, 8) @[Bitwise.scala 108:44]
    node _T_118 = bits(_T_117, 3, 0) @[Bitwise.scala 108:18]
    node _T_119 = bits(_T_118, 1, 0) @[Bitwise.scala 108:18]
    node _T_120 = bits(_T_119, 0, 0) @[Bitwise.scala 108:18]
    node _T_121 = bits(_T_119, 1, 1) @[Bitwise.scala 108:44]
    node _T_122 = cat(_T_120, _T_121) @[Cat.scala 29:58]
    node _T_123 = bits(_T_118, 3, 2) @[Bitwise.scala 108:44]
    node _T_124 = bits(_T_123, 0, 0) @[Bitwise.scala 108:18]
    node _T_125 = bits(_T_123, 1, 1) @[Bitwise.scala 108:44]
    node _T_126 = cat(_T_124, _T_125) @[Cat.scala 29:58]
    node _T_127 = cat(_T_122, _T_126) @[Cat.scala 29:58]
    node _T_128 = bits(_T_117, 6, 4) @[Bitwise.scala 108:44]
    node _T_129 = bits(_T_128, 1, 0) @[Bitwise.scala 108:18]
    node _T_130 = bits(_T_129, 0, 0) @[Bitwise.scala 108:18]
    node _T_131 = bits(_T_129, 1, 1) @[Bitwise.scala 108:44]
    node _T_132 = cat(_T_130, _T_131) @[Cat.scala 29:58]
    node _T_133 = bits(_T_128, 2, 2) @[Bitwise.scala 108:44]
    node _T_134 = cat(_T_132, _T_133) @[Cat.scala 29:58]
    node _T_135 = cat(_T_127, _T_134) @[Cat.scala 29:58]
    node _T_136 = cat(_T_116, _T_135) @[Cat.scala 29:58]
    node _T_137 = bits(_T_136, 0, 0) @[OneHot.scala 47:40]
    node _T_138 = bits(_T_136, 1, 1) @[OneHot.scala 47:40]
    node _T_139 = bits(_T_136, 2, 2) @[OneHot.scala 47:40]
    node _T_140 = bits(_T_136, 3, 3) @[OneHot.scala 47:40]
    node _T_141 = bits(_T_136, 4, 4) @[OneHot.scala 47:40]
    node _T_142 = bits(_T_136, 5, 5) @[OneHot.scala 47:40]
    node _T_143 = bits(_T_136, 6, 6) @[OneHot.scala 47:40]
    node _T_144 = bits(_T_136, 7, 7) @[OneHot.scala 47:40]
    node _T_145 = bits(_T_136, 8, 8) @[OneHot.scala 47:40]
    node _T_146 = bits(_T_136, 9, 9) @[OneHot.scala 47:40]
    node _T_147 = bits(_T_136, 10, 10) @[OneHot.scala 47:40]
    node _T_148 = bits(_T_136, 11, 11) @[OneHot.scala 47:40]
    node _T_149 = bits(_T_136, 12, 12) @[OneHot.scala 47:40]
    node _T_150 = bits(_T_136, 13, 13) @[OneHot.scala 47:40]
    node _T_151 = bits(_T_136, 14, 14) @[OneHot.scala 47:40]
    node _T_152 = mux(_T_150, UInt<4>("h0d"), UInt<4>("h0e")) @[Mux.scala 47:69]
    node _T_153 = mux(_T_149, UInt<4>("h0c"), _T_152) @[Mux.scala 47:69]
    node _T_154 = mux(_T_148, UInt<4>("h0b"), _T_153) @[Mux.scala 47:69]
    node _T_155 = mux(_T_147, UInt<4>("h0a"), _T_154) @[Mux.scala 47:69]
    node _T_156 = mux(_T_146, UInt<4>("h09"), _T_155) @[Mux.scala 47:69]
    node _T_157 = mux(_T_145, UInt<4>("h08"), _T_156) @[Mux.scala 47:69]
    node _T_158 = mux(_T_144, UInt<3>("h07"), _T_157) @[Mux.scala 47:69]
    node _T_159 = mux(_T_143, UInt<3>("h06"), _T_158) @[Mux.scala 47:69]
    node _T_160 = mux(_T_142, UInt<3>("h05"), _T_159) @[Mux.scala 47:69]
    node _T_161 = mux(_T_141, UInt<3>("h04"), _T_160) @[Mux.scala 47:69]
    node _T_162 = mux(_T_140, UInt<2>("h03"), _T_161) @[Mux.scala 47:69]
    node _T_163 = mux(_T_139, UInt<2>("h02"), _T_162) @[Mux.scala 47:69]
    node _T_164 = mux(_T_138, UInt<1>("h01"), _T_163) @[Mux.scala 47:69]
    node _T_165 = mux(_T_137, UInt<1>("h00"), _T_164) @[Mux.scala 47:69]
    node _T_166 = mux(_T_6, _T_86, _T_165) @[Conversion.scala 21:23]
    node _T_167 = eq(others, UInt<15>("h07fff")) @[Conversion.scala 21:132]
    node _T_168 = neq(others, UInt<1>("h00")) @[Conversion.scala 21:147]
    node _T_169 = not(_T_168) @[Conversion.scala 21:139]
    node _T_170 = or(_T_167, _T_169) @[Conversion.scala 21:137]
    node _T_171 = add(_T_166, _T_170) @[Conversion.scala 21:122]
    node _T_172 = tail(_T_171, 1) @[Conversion.scala 21:122]
    leading <= _T_172 @[Conversion.scala 21:17]
    node _T_173 = bits(others, 14, 14) @[Conversion.scala 22:29]
    node _T_174 = asSInt(leading) @[Conversion.scala 22:60]
    node _T_175 = sub(_T_174, asSInt(UInt<2>("h01"))) @[Conversion.scala 22:67]
    node _T_176 = tail(_T_175, 1) @[Conversion.scala 22:67]
    node _T_177 = asSInt(_T_176) @[Conversion.scala 22:67]
    node _T_178 = asSInt(leading) @[Conversion.scala 22:83]
    node _T_179 = sub(asSInt(UInt<1>("h00")), _T_178) @[Conversion.scala 22:74]
    node _T_180 = tail(_T_179, 1) @[Conversion.scala 22:74]
    node _T_181 = asSInt(_T_180) @[Conversion.scala 22:74]
    node _T_182 = mux(_T_173, _T_177, _T_181) @[Conversion.scala 22:22]
    regime <= _T_182 @[Conversion.scala 22:16]
    node _T_183 = sub(leading, UInt<1>("h01")) @[Conversion.scala 23:48]
    node _T_184 = tail(_T_183, 1) @[Conversion.scala 23:48]
    node _T_185 = dshl(others, _T_184) @[Conversion.scala 23:36]
    exponentFraction <= _T_185 @[Conversion.scala 23:26]
    node _T_186 = bits(exponentFraction, 12, 12) @[Conversion.scala 24:37]
    exponent <= _T_186 @[Conversion.scala 24:18]
    node _T_187 = bits(exponentFraction, 11, 0) @[Conversion.scala 25:46]
    node _T_188 = cat(UInt<1>("h01"), _T_187) @[Cat.scala 29:58]
    fraction <= _T_188 @[Conversion.scala 25:18]
    node _T_189 = bits(io.in, 15, 15) @[Conversion.scala 27:30]
    node _T_190 = not(_T_189) @[Conversion.scala 27:24]
    node _T_191 = bits(io.in, 14, 0) @[Conversion.scala 27:54]
    node _T_192 = neq(_T_191, UInt<1>("h00")) @[Conversion.scala 27:71]
    node _T_193 = not(_T_192) @[Conversion.scala 27:47]
    node _T_194 = and(_T_190, _T_193) @[Conversion.scala 27:45]
    io.out.zero <= _T_194 @[Conversion.scala 27:21]
    node _T_195 = bits(io.in, 15, 15) @[Conversion.scala 28:28]
    node _T_196 = bits(io.in, 14, 0) @[Conversion.scala 28:52]
    node _T_197 = neq(_T_196, UInt<1>("h00")) @[Conversion.scala 28:69]
    node _T_198 = not(_T_197) @[Conversion.scala 28:45]
    node _T_199 = and(_T_195, _T_198) @[Conversion.scala 28:43]
    io.out.nan <= _T_199 @[Conversion.scala 28:20]
    node _T_200 = bits(io.in, 15, 15) @[Conversion.scala 29:29]
    io.out.sign <= _T_200 @[Conversion.scala 29:21]
    node _T_201 = dshl(regime, UInt<1>("h01")) @[Conversion.scala 30:36]
    node _T_202 = cvt(exponent) @[Conversion.scala 30:99]
    node _T_203 = add(_T_201, _T_202) @[Conversion.scala 30:88]
    node _T_204 = tail(_T_203, 1) @[Conversion.scala 30:88]
    node _T_205 = asSInt(_T_204) @[Conversion.scala 30:88]
    io.out.exponent <= _T_205 @[Conversion.scala 30:25]
    io.out.fraction <= fraction @[Conversion.scala 31:25]
    
  module toPositUnpacked_5 : 
    input clock : Clock
    input reset : Reset
    output io : {flip in : UInt<16>, out : {zero : UInt<1>, nan : UInt<1>, sign : UInt<1>, exponent : SInt<6>, fraction : UInt<13>}}
    
    wire others : UInt<15> @[Conversion.scala 13:26]
    wire leading : UInt<5> @[Conversion.scala 14:27]
    wire regime : SInt<6> @[Conversion.scala 15:26]
    wire exponentFraction : UInt<13> @[Conversion.scala 16:36]
    wire exponent : UInt<1> @[Conversion.scala 17:28]
    wire fraction : UInt<13> @[Conversion.scala 18:28]
    node _T = bits(io.in, 14, 0) @[Conversion.scala 20:25]
    node _T_1 = bits(io.out.sign, 0, 0) @[Bitwise.scala 71:15]
    node _T_2 = mux(_T_1, UInt<15>("h07fff"), UInt<15>("h00")) @[Bitwise.scala 71:12]
    node _T_3 = xor(_T, _T_2) @[Conversion.scala 20:43]
    node _T_4 = add(_T_3, io.out.sign) @[Conversion.scala 20:78]
    node _T_5 = tail(_T_4, 1) @[Conversion.scala 20:78]
    others <= _T_5 @[Conversion.scala 20:16]
    node _T_6 = bits(others, 14, 14) @[Conversion.scala 21:30]
    node _T_7 = not(others) @[Conversion.scala 21:77]
    node _T_8 = bits(_T_7, 7, 0) @[Bitwise.scala 108:18]
    node _T_9 = shl(UInt<4>("h0f"), 4) @[Bitwise.scala 101:47]
    node _T_10 = xor(UInt<8>("h0ff"), _T_9) @[Bitwise.scala 101:21]
    node _T_11 = shr(_T_8, 4) @[Bitwise.scala 102:21]
    node _T_12 = and(_T_11, _T_10) @[Bitwise.scala 102:31]
    node _T_13 = bits(_T_8, 3, 0) @[Bitwise.scala 102:46]
    node _T_14 = shl(_T_13, 4) @[Bitwise.scala 102:65]
    node _T_15 = not(_T_10) @[Bitwise.scala 102:77]
    node _T_16 = and(_T_14, _T_15) @[Bitwise.scala 102:75]
    node _T_17 = or(_T_12, _T_16) @[Bitwise.scala 102:39]
    node _T_18 = bits(_T_10, 5, 0) @[Bitwise.scala 101:28]
    node _T_19 = shl(_T_18, 2) @[Bitwise.scala 101:47]
    node _T_20 = xor(_T_10, _T_19) @[Bitwise.scala 101:21]
    node _T_21 = shr(_T_17, 2) @[Bitwise.scala 102:21]
    node _T_22 = and(_T_21, _T_20) @[Bitwise.scala 102:31]
    node _T_23 = bits(_T_17, 5, 0) @[Bitwise.scala 102:46]
    node _T_24 = shl(_T_23, 2) @[Bitwise.scala 102:65]
    node _T_25 = not(_T_20) @[Bitwise.scala 102:77]
    node _T_26 = and(_T_24, _T_25) @[Bitwise.scala 102:75]
    node _T_27 = or(_T_22, _T_26) @[Bitwise.scala 102:39]
    node _T_28 = bits(_T_20, 6, 0) @[Bitwise.scala 101:28]
    node _T_29 = shl(_T_28, 1) @[Bitwise.scala 101:47]
    node _T_30 = xor(_T_20, _T_29) @[Bitwise.scala 101:21]
    node _T_31 = shr(_T_27, 1) @[Bitwise.scala 102:21]
    node _T_32 = and(_T_31, _T_30) @[Bitwise.scala 102:31]
    node _T_33 = bits(_T_27, 6, 0) @[Bitwise.scala 102:46]
    node _T_34 = shl(_T_33, 1) @[Bitwise.scala 102:65]
    node _T_35 = not(_T_30) @[Bitwise.scala 102:77]
    node _T_36 = and(_T_34, _T_35) @[Bitwise.scala 102:75]
    node _T_37 = or(_T_32, _T_36) @[Bitwise.scala 102:39]
    node _T_38 = bits(_T_7, 14, 8) @[Bitwise.scala 108:44]
    node _T_39 = bits(_T_38, 3, 0) @[Bitwise.scala 108:18]
    node _T_40 = bits(_T_39, 1, 0) @[Bitwise.scala 108:18]
    node _T_41 = bits(_T_40, 0, 0) @[Bitwise.scala 108:18]
    node _T_42 = bits(_T_40, 1, 1) @[Bitwise.scala 108:44]
    node _T_43 = cat(_T_41, _T_42) @[Cat.scala 29:58]
    node _T_44 = bits(_T_39, 3, 2) @[Bitwise.scala 108:44]
    node _T_45 = bits(_T_44, 0, 0) @[Bitwise.scala 108:18]
    node _T_46 = bits(_T_44, 1, 1) @[Bitwise.scala 108:44]
    node _T_47 = cat(_T_45, _T_46) @[Cat.scala 29:58]
    node _T_48 = cat(_T_43, _T_47) @[Cat.scala 29:58]
    node _T_49 = bits(_T_38, 6, 4) @[Bitwise.scala 108:44]
    node _T_50 = bits(_T_49, 1, 0) @[Bitwise.scala 108:18]
    node _T_51 = bits(_T_50, 0, 0) @[Bitwise.scala 108:18]
    node _T_52 = bits(_T_50, 1, 1) @[Bitwise.scala 108:44]
    node _T_53 = cat(_T_51, _T_52) @[Cat.scala 29:58]
    node _T_54 = bits(_T_49, 2, 2) @[Bitwise.scala 108:44]
    node _T_55 = cat(_T_53, _T_54) @[Cat.scala 29:58]
    node _T_56 = cat(_T_48, _T_55) @[Cat.scala 29:58]
    node _T_57 = cat(_T_37, _T_56) @[Cat.scala 29:58]
    node _T_58 = bits(_T_57, 0, 0) @[OneHot.scala 47:40]
    node _T_59 = bits(_T_57, 1, 1) @[OneHot.scala 47:40]
    node _T_60 = bits(_T_57, 2, 2) @[OneHot.scala 47:40]
    node _T_61 = bits(_T_57, 3, 3) @[OneHot.scala 47:40]
    node _T_62 = bits(_T_57, 4, 4) @[OneHot.scala 47:40]
    node _T_63 = bits(_T_57, 5, 5) @[OneHot.scala 47:40]
    node _T_64 = bits(_T_57, 6, 6) @[OneHot.scala 47:40]
    node _T_65 = bits(_T_57, 7, 7) @[OneHot.scala 47:40]
    node _T_66 = bits(_T_57, 8, 8) @[OneHot.scala 47:40]
    node _T_67 = bits(_T_57, 9, 9) @[OneHot.scala 47:40]
    node _T_68 = bits(_T_57, 10, 10) @[OneHot.scala 47:40]
    node _T_69 = bits(_T_57, 11, 11) @[OneHot.scala 47:40]
    node _T_70 = bits(_T_57, 12, 12) @[OneHot.scala 47:40]
    node _T_71 = bits(_T_57, 13, 13) @[OneHot.scala 47:40]
    node _T_72 = bits(_T_57, 14, 14) @[OneHot.scala 47:40]
    node _T_73 = mux(_T_71, UInt<4>("h0d"), UInt<4>("h0e")) @[Mux.scala 47:69]
    node _T_74 = mux(_T_70, UInt<4>("h0c"), _T_73) @[Mux.scala 47:69]
    node _T_75 = mux(_T_69, UInt<4>("h0b"), _T_74) @[Mux.scala 47:69]
    node _T_76 = mux(_T_68, UInt<4>("h0a"), _T_75) @[Mux.scala 47:69]
    node _T_77 = mux(_T_67, UInt<4>("h09"), _T_76) @[Mux.scala 47:69]
    node _T_78 = mux(_T_66, UInt<4>("h08"), _T_77) @[Mux.scala 47:69]
    node _T_79 = mux(_T_65, UInt<3>("h07"), _T_78) @[Mux.scala 47:69]
    node _T_80 = mux(_T_64, UInt<3>("h06"), _T_79) @[Mux.scala 47:69]
    node _T_81 = mux(_T_63, UInt<3>("h05"), _T_80) @[Mux.scala 47:69]
    node _T_82 = mux(_T_62, UInt<3>("h04"), _T_81) @[Mux.scala 47:69]
    node _T_83 = mux(_T_61, UInt<2>("h03"), _T_82) @[Mux.scala 47:69]
    node _T_84 = mux(_T_60, UInt<2>("h02"), _T_83) @[Mux.scala 47:69]
    node _T_85 = mux(_T_59, UInt<1>("h01"), _T_84) @[Mux.scala 47:69]
    node _T_86 = mux(_T_58, UInt<1>("h00"), _T_85) @[Mux.scala 47:69]
    node _T_87 = bits(others, 7, 0) @[Bitwise.scala 108:18]
    node _T_88 = shl(UInt<4>("h0f"), 4) @[Bitwise.scala 101:47]
    node _T_89 = xor(UInt<8>("h0ff"), _T_88) @[Bitwise.scala 101:21]
    node _T_90 = shr(_T_87, 4) @[Bitwise.scala 102:21]
    node _T_91 = and(_T_90, _T_89) @[Bitwise.scala 102:31]
    node _T_92 = bits(_T_87, 3, 0) @[Bitwise.scala 102:46]
    node _T_93 = shl(_T_92, 4) @[Bitwise.scala 102:65]
    node _T_94 = not(_T_89) @[Bitwise.scala 102:77]
    node _T_95 = and(_T_93, _T_94) @[Bitwise.scala 102:75]
    node _T_96 = or(_T_91, _T_95) @[Bitwise.scala 102:39]
    node _T_97 = bits(_T_89, 5, 0) @[Bitwise.scala 101:28]
    node _T_98 = shl(_T_97, 2) @[Bitwise.scala 101:47]
    node _T_99 = xor(_T_89, _T_98) @[Bitwise.scala 101:21]
    node _T_100 = shr(_T_96, 2) @[Bitwise.scala 102:21]
    node _T_101 = and(_T_100, _T_99) @[Bitwise.scala 102:31]
    node _T_102 = bits(_T_96, 5, 0) @[Bitwise.scala 102:46]
    node _T_103 = shl(_T_102, 2) @[Bitwise.scala 102:65]
    node _T_104 = not(_T_99) @[Bitwise.scala 102:77]
    node _T_105 = and(_T_103, _T_104) @[Bitwise.scala 102:75]
    node _T_106 = or(_T_101, _T_105) @[Bitwise.scala 102:39]
    node _T_107 = bits(_T_99, 6, 0) @[Bitwise.scala 101:28]
    node _T_108 = shl(_T_107, 1) @[Bitwise.scala 101:47]
    node _T_109 = xor(_T_99, _T_108) @[Bitwise.scala 101:21]
    node _T_110 = shr(_T_106, 1) @[Bitwise.scala 102:21]
    node _T_111 = and(_T_110, _T_109) @[Bitwise.scala 102:31]
    node _T_112 = bits(_T_106, 6, 0) @[Bitwise.scala 102:46]
    node _T_113 = shl(_T_112, 1) @[Bitwise.scala 102:65]
    node _T_114 = not(_T_109) @[Bitwise.scala 102:77]
    node _T_115 = and(_T_113, _T_114) @[Bitwise.scala 102:75]
    node _T_116 = or(_T_111, _T_115) @[Bitwise.scala 102:39]
    node _T_117 = bits(others, 14, 8) @[Bitwise.scala 108:44]
    node _T_118 = bits(_T_117, 3, 0) @[Bitwise.scala 108:18]
    node _T_119 = bits(_T_118, 1, 0) @[Bitwise.scala 108:18]
    node _T_120 = bits(_T_119, 0, 0) @[Bitwise.scala 108:18]
    node _T_121 = bits(_T_119, 1, 1) @[Bitwise.scala 108:44]
    node _T_122 = cat(_T_120, _T_121) @[Cat.scala 29:58]
    node _T_123 = bits(_T_118, 3, 2) @[Bitwise.scala 108:44]
    node _T_124 = bits(_T_123, 0, 0) @[Bitwise.scala 108:18]
    node _T_125 = bits(_T_123, 1, 1) @[Bitwise.scala 108:44]
    node _T_126 = cat(_T_124, _T_125) @[Cat.scala 29:58]
    node _T_127 = cat(_T_122, _T_126) @[Cat.scala 29:58]
    node _T_128 = bits(_T_117, 6, 4) @[Bitwise.scala 108:44]
    node _T_129 = bits(_T_128, 1, 0) @[Bitwise.scala 108:18]
    node _T_130 = bits(_T_129, 0, 0) @[Bitwise.scala 108:18]
    node _T_131 = bits(_T_129, 1, 1) @[Bitwise.scala 108:44]
    node _T_132 = cat(_T_130, _T_131) @[Cat.scala 29:58]
    node _T_133 = bits(_T_128, 2, 2) @[Bitwise.scala 108:44]
    node _T_134 = cat(_T_132, _T_133) @[Cat.scala 29:58]
    node _T_135 = cat(_T_127, _T_134) @[Cat.scala 29:58]
    node _T_136 = cat(_T_116, _T_135) @[Cat.scala 29:58]
    node _T_137 = bits(_T_136, 0, 0) @[OneHot.scala 47:40]
    node _T_138 = bits(_T_136, 1, 1) @[OneHot.scala 47:40]
    node _T_139 = bits(_T_136, 2, 2) @[OneHot.scala 47:40]
    node _T_140 = bits(_T_136, 3, 3) @[OneHot.scala 47:40]
    node _T_141 = bits(_T_136, 4, 4) @[OneHot.scala 47:40]
    node _T_142 = bits(_T_136, 5, 5) @[OneHot.scala 47:40]
    node _T_143 = bits(_T_136, 6, 6) @[OneHot.scala 47:40]
    node _T_144 = bits(_T_136, 7, 7) @[OneHot.scala 47:40]
    node _T_145 = bits(_T_136, 8, 8) @[OneHot.scala 47:40]
    node _T_146 = bits(_T_136, 9, 9) @[OneHot.scala 47:40]
    node _T_147 = bits(_T_136, 10, 10) @[OneHot.scala 47:40]
    node _T_148 = bits(_T_136, 11, 11) @[OneHot.scala 47:40]
    node _T_149 = bits(_T_136, 12, 12) @[OneHot.scala 47:40]
    node _T_150 = bits(_T_136, 13, 13) @[OneHot.scala 47:40]
    node _T_151 = bits(_T_136, 14, 14) @[OneHot.scala 47:40]
    node _T_152 = mux(_T_150, UInt<4>("h0d"), UInt<4>("h0e")) @[Mux.scala 47:69]
    node _T_153 = mux(_T_149, UInt<4>("h0c"), _T_152) @[Mux.scala 47:69]
    node _T_154 = mux(_T_148, UInt<4>("h0b"), _T_153) @[Mux.scala 47:69]
    node _T_155 = mux(_T_147, UInt<4>("h0a"), _T_154) @[Mux.scala 47:69]
    node _T_156 = mux(_T_146, UInt<4>("h09"), _T_155) @[Mux.scala 47:69]
    node _T_157 = mux(_T_145, UInt<4>("h08"), _T_156) @[Mux.scala 47:69]
    node _T_158 = mux(_T_144, UInt<3>("h07"), _T_157) @[Mux.scala 47:69]
    node _T_159 = mux(_T_143, UInt<3>("h06"), _T_158) @[Mux.scala 47:69]
    node _T_160 = mux(_T_142, UInt<3>("h05"), _T_159) @[Mux.scala 47:69]
    node _T_161 = mux(_T_141, UInt<3>("h04"), _T_160) @[Mux.scala 47:69]
    node _T_162 = mux(_T_140, UInt<2>("h03"), _T_161) @[Mux.scala 47:69]
    node _T_163 = mux(_T_139, UInt<2>("h02"), _T_162) @[Mux.scala 47:69]
    node _T_164 = mux(_T_138, UInt<1>("h01"), _T_163) @[Mux.scala 47:69]
    node _T_165 = mux(_T_137, UInt<1>("h00"), _T_164) @[Mux.scala 47:69]
    node _T_166 = mux(_T_6, _T_86, _T_165) @[Conversion.scala 21:23]
    node _T_167 = eq(others, UInt<15>("h07fff")) @[Conversion.scala 21:132]
    node _T_168 = neq(others, UInt<1>("h00")) @[Conversion.scala 21:147]
    node _T_169 = not(_T_168) @[Conversion.scala 21:139]
    node _T_170 = or(_T_167, _T_169) @[Conversion.scala 21:137]
    node _T_171 = add(_T_166, _T_170) @[Conversion.scala 21:122]
    node _T_172 = tail(_T_171, 1) @[Conversion.scala 21:122]
    leading <= _T_172 @[Conversion.scala 21:17]
    node _T_173 = bits(others, 14, 14) @[Conversion.scala 22:29]
    node _T_174 = asSInt(leading) @[Conversion.scala 22:60]
    node _T_175 = sub(_T_174, asSInt(UInt<2>("h01"))) @[Conversion.scala 22:67]
    node _T_176 = tail(_T_175, 1) @[Conversion.scala 22:67]
    node _T_177 = asSInt(_T_176) @[Conversion.scala 22:67]
    node _T_178 = asSInt(leading) @[Conversion.scala 22:83]
    node _T_179 = sub(asSInt(UInt<1>("h00")), _T_178) @[Conversion.scala 22:74]
    node _T_180 = tail(_T_179, 1) @[Conversion.scala 22:74]
    node _T_181 = asSInt(_T_180) @[Conversion.scala 22:74]
    node _T_182 = mux(_T_173, _T_177, _T_181) @[Conversion.scala 22:22]
    regime <= _T_182 @[Conversion.scala 22:16]
    node _T_183 = sub(leading, UInt<1>("h01")) @[Conversion.scala 23:48]
    node _T_184 = tail(_T_183, 1) @[Conversion.scala 23:48]
    node _T_185 = dshl(others, _T_184) @[Conversion.scala 23:36]
    exponentFraction <= _T_185 @[Conversion.scala 23:26]
    node _T_186 = bits(exponentFraction, 12, 12) @[Conversion.scala 24:37]
    exponent <= _T_186 @[Conversion.scala 24:18]
    node _T_187 = bits(exponentFraction, 11, 0) @[Conversion.scala 25:46]
    node _T_188 = cat(UInt<1>("h01"), _T_187) @[Cat.scala 29:58]
    fraction <= _T_188 @[Conversion.scala 25:18]
    node _T_189 = bits(io.in, 15, 15) @[Conversion.scala 27:30]
    node _T_190 = not(_T_189) @[Conversion.scala 27:24]
    node _T_191 = bits(io.in, 14, 0) @[Conversion.scala 27:54]
    node _T_192 = neq(_T_191, UInt<1>("h00")) @[Conversion.scala 27:71]
    node _T_193 = not(_T_192) @[Conversion.scala 27:47]
    node _T_194 = and(_T_190, _T_193) @[Conversion.scala 27:45]
    io.out.zero <= _T_194 @[Conversion.scala 27:21]
    node _T_195 = bits(io.in, 15, 15) @[Conversion.scala 28:28]
    node _T_196 = bits(io.in, 14, 0) @[Conversion.scala 28:52]
    node _T_197 = neq(_T_196, UInt<1>("h00")) @[Conversion.scala 28:69]
    node _T_198 = not(_T_197) @[Conversion.scala 28:45]
    node _T_199 = and(_T_195, _T_198) @[Conversion.scala 28:43]
    io.out.nan <= _T_199 @[Conversion.scala 28:20]
    node _T_200 = bits(io.in, 15, 15) @[Conversion.scala 29:29]
    io.out.sign <= _T_200 @[Conversion.scala 29:21]
    node _T_201 = dshl(regime, UInt<1>("h01")) @[Conversion.scala 30:36]
    node _T_202 = cvt(exponent) @[Conversion.scala 30:99]
    node _T_203 = add(_T_201, _T_202) @[Conversion.scala 30:88]
    node _T_204 = tail(_T_203, 1) @[Conversion.scala 30:88]
    node _T_205 = asSInt(_T_204) @[Conversion.scala 30:88]
    io.out.exponent <= _T_205 @[Conversion.scala 30:25]
    io.out.fraction <= fraction @[Conversion.scala 31:25]
    
  module toPositUnpacked_6 : 
    input clock : Clock
    input reset : Reset
    output io : {flip in : UInt<16>, out : {zero : UInt<1>, nan : UInt<1>, sign : UInt<1>, exponent : SInt<6>, fraction : UInt<13>}}
    
    wire others : UInt<15> @[Conversion.scala 13:26]
    wire leading : UInt<5> @[Conversion.scala 14:27]
    wire regime : SInt<6> @[Conversion.scala 15:26]
    wire exponentFraction : UInt<13> @[Conversion.scala 16:36]
    wire exponent : UInt<1> @[Conversion.scala 17:28]
    wire fraction : UInt<13> @[Conversion.scala 18:28]
    node _T = bits(io.in, 14, 0) @[Conversion.scala 20:25]
    node _T_1 = bits(io.out.sign, 0, 0) @[Bitwise.scala 71:15]
    node _T_2 = mux(_T_1, UInt<15>("h07fff"), UInt<15>("h00")) @[Bitwise.scala 71:12]
    node _T_3 = xor(_T, _T_2) @[Conversion.scala 20:43]
    node _T_4 = add(_T_3, io.out.sign) @[Conversion.scala 20:78]
    node _T_5 = tail(_T_4, 1) @[Conversion.scala 20:78]
    others <= _T_5 @[Conversion.scala 20:16]
    node _T_6 = bits(others, 14, 14) @[Conversion.scala 21:30]
    node _T_7 = not(others) @[Conversion.scala 21:77]
    node _T_8 = bits(_T_7, 7, 0) @[Bitwise.scala 108:18]
    node _T_9 = shl(UInt<4>("h0f"), 4) @[Bitwise.scala 101:47]
    node _T_10 = xor(UInt<8>("h0ff"), _T_9) @[Bitwise.scala 101:21]
    node _T_11 = shr(_T_8, 4) @[Bitwise.scala 102:21]
    node _T_12 = and(_T_11, _T_10) @[Bitwise.scala 102:31]
    node _T_13 = bits(_T_8, 3, 0) @[Bitwise.scala 102:46]
    node _T_14 = shl(_T_13, 4) @[Bitwise.scala 102:65]
    node _T_15 = not(_T_10) @[Bitwise.scala 102:77]
    node _T_16 = and(_T_14, _T_15) @[Bitwise.scala 102:75]
    node _T_17 = or(_T_12, _T_16) @[Bitwise.scala 102:39]
    node _T_18 = bits(_T_10, 5, 0) @[Bitwise.scala 101:28]
    node _T_19 = shl(_T_18, 2) @[Bitwise.scala 101:47]
    node _T_20 = xor(_T_10, _T_19) @[Bitwise.scala 101:21]
    node _T_21 = shr(_T_17, 2) @[Bitwise.scala 102:21]
    node _T_22 = and(_T_21, _T_20) @[Bitwise.scala 102:31]
    node _T_23 = bits(_T_17, 5, 0) @[Bitwise.scala 102:46]
    node _T_24 = shl(_T_23, 2) @[Bitwise.scala 102:65]
    node _T_25 = not(_T_20) @[Bitwise.scala 102:77]
    node _T_26 = and(_T_24, _T_25) @[Bitwise.scala 102:75]
    node _T_27 = or(_T_22, _T_26) @[Bitwise.scala 102:39]
    node _T_28 = bits(_T_20, 6, 0) @[Bitwise.scala 101:28]
    node _T_29 = shl(_T_28, 1) @[Bitwise.scala 101:47]
    node _T_30 = xor(_T_20, _T_29) @[Bitwise.scala 101:21]
    node _T_31 = shr(_T_27, 1) @[Bitwise.scala 102:21]
    node _T_32 = and(_T_31, _T_30) @[Bitwise.scala 102:31]
    node _T_33 = bits(_T_27, 6, 0) @[Bitwise.scala 102:46]
    node _T_34 = shl(_T_33, 1) @[Bitwise.scala 102:65]
    node _T_35 = not(_T_30) @[Bitwise.scala 102:77]
    node _T_36 = and(_T_34, _T_35) @[Bitwise.scala 102:75]
    node _T_37 = or(_T_32, _T_36) @[Bitwise.scala 102:39]
    node _T_38 = bits(_T_7, 14, 8) @[Bitwise.scala 108:44]
    node _T_39 = bits(_T_38, 3, 0) @[Bitwise.scala 108:18]
    node _T_40 = bits(_T_39, 1, 0) @[Bitwise.scala 108:18]
    node _T_41 = bits(_T_40, 0, 0) @[Bitwise.scala 108:18]
    node _T_42 = bits(_T_40, 1, 1) @[Bitwise.scala 108:44]
    node _T_43 = cat(_T_41, _T_42) @[Cat.scala 29:58]
    node _T_44 = bits(_T_39, 3, 2) @[Bitwise.scala 108:44]
    node _T_45 = bits(_T_44, 0, 0) @[Bitwise.scala 108:18]
    node _T_46 = bits(_T_44, 1, 1) @[Bitwise.scala 108:44]
    node _T_47 = cat(_T_45, _T_46) @[Cat.scala 29:58]
    node _T_48 = cat(_T_43, _T_47) @[Cat.scala 29:58]
    node _T_49 = bits(_T_38, 6, 4) @[Bitwise.scala 108:44]
    node _T_50 = bits(_T_49, 1, 0) @[Bitwise.scala 108:18]
    node _T_51 = bits(_T_50, 0, 0) @[Bitwise.scala 108:18]
    node _T_52 = bits(_T_50, 1, 1) @[Bitwise.scala 108:44]
    node _T_53 = cat(_T_51, _T_52) @[Cat.scala 29:58]
    node _T_54 = bits(_T_49, 2, 2) @[Bitwise.scala 108:44]
    node _T_55 = cat(_T_53, _T_54) @[Cat.scala 29:58]
    node _T_56 = cat(_T_48, _T_55) @[Cat.scala 29:58]
    node _T_57 = cat(_T_37, _T_56) @[Cat.scala 29:58]
    node _T_58 = bits(_T_57, 0, 0) @[OneHot.scala 47:40]
    node _T_59 = bits(_T_57, 1, 1) @[OneHot.scala 47:40]
    node _T_60 = bits(_T_57, 2, 2) @[OneHot.scala 47:40]
    node _T_61 = bits(_T_57, 3, 3) @[OneHot.scala 47:40]
    node _T_62 = bits(_T_57, 4, 4) @[OneHot.scala 47:40]
    node _T_63 = bits(_T_57, 5, 5) @[OneHot.scala 47:40]
    node _T_64 = bits(_T_57, 6, 6) @[OneHot.scala 47:40]
    node _T_65 = bits(_T_57, 7, 7) @[OneHot.scala 47:40]
    node _T_66 = bits(_T_57, 8, 8) @[OneHot.scala 47:40]
    node _T_67 = bits(_T_57, 9, 9) @[OneHot.scala 47:40]
    node _T_68 = bits(_T_57, 10, 10) @[OneHot.scala 47:40]
    node _T_69 = bits(_T_57, 11, 11) @[OneHot.scala 47:40]
    node _T_70 = bits(_T_57, 12, 12) @[OneHot.scala 47:40]
    node _T_71 = bits(_T_57, 13, 13) @[OneHot.scala 47:40]
    node _T_72 = bits(_T_57, 14, 14) @[OneHot.scala 47:40]
    node _T_73 = mux(_T_71, UInt<4>("h0d"), UInt<4>("h0e")) @[Mux.scala 47:69]
    node _T_74 = mux(_T_70, UInt<4>("h0c"), _T_73) @[Mux.scala 47:69]
    node _T_75 = mux(_T_69, UInt<4>("h0b"), _T_74) @[Mux.scala 47:69]
    node _T_76 = mux(_T_68, UInt<4>("h0a"), _T_75) @[Mux.scala 47:69]
    node _T_77 = mux(_T_67, UInt<4>("h09"), _T_76) @[Mux.scala 47:69]
    node _T_78 = mux(_T_66, UInt<4>("h08"), _T_77) @[Mux.scala 47:69]
    node _T_79 = mux(_T_65, UInt<3>("h07"), _T_78) @[Mux.scala 47:69]
    node _T_80 = mux(_T_64, UInt<3>("h06"), _T_79) @[Mux.scala 47:69]
    node _T_81 = mux(_T_63, UInt<3>("h05"), _T_80) @[Mux.scala 47:69]
    node _T_82 = mux(_T_62, UInt<3>("h04"), _T_81) @[Mux.scala 47:69]
    node _T_83 = mux(_T_61, UInt<2>("h03"), _T_82) @[Mux.scala 47:69]
    node _T_84 = mux(_T_60, UInt<2>("h02"), _T_83) @[Mux.scala 47:69]
    node _T_85 = mux(_T_59, UInt<1>("h01"), _T_84) @[Mux.scala 47:69]
    node _T_86 = mux(_T_58, UInt<1>("h00"), _T_85) @[Mux.scala 47:69]
    node _T_87 = bits(others, 7, 0) @[Bitwise.scala 108:18]
    node _T_88 = shl(UInt<4>("h0f"), 4) @[Bitwise.scala 101:47]
    node _T_89 = xor(UInt<8>("h0ff"), _T_88) @[Bitwise.scala 101:21]
    node _T_90 = shr(_T_87, 4) @[Bitwise.scala 102:21]
    node _T_91 = and(_T_90, _T_89) @[Bitwise.scala 102:31]
    node _T_92 = bits(_T_87, 3, 0) @[Bitwise.scala 102:46]
    node _T_93 = shl(_T_92, 4) @[Bitwise.scala 102:65]
    node _T_94 = not(_T_89) @[Bitwise.scala 102:77]
    node _T_95 = and(_T_93, _T_94) @[Bitwise.scala 102:75]
    node _T_96 = or(_T_91, _T_95) @[Bitwise.scala 102:39]
    node _T_97 = bits(_T_89, 5, 0) @[Bitwise.scala 101:28]
    node _T_98 = shl(_T_97, 2) @[Bitwise.scala 101:47]
    node _T_99 = xor(_T_89, _T_98) @[Bitwise.scala 101:21]
    node _T_100 = shr(_T_96, 2) @[Bitwise.scala 102:21]
    node _T_101 = and(_T_100, _T_99) @[Bitwise.scala 102:31]
    node _T_102 = bits(_T_96, 5, 0) @[Bitwise.scala 102:46]
    node _T_103 = shl(_T_102, 2) @[Bitwise.scala 102:65]
    node _T_104 = not(_T_99) @[Bitwise.scala 102:77]
    node _T_105 = and(_T_103, _T_104) @[Bitwise.scala 102:75]
    node _T_106 = or(_T_101, _T_105) @[Bitwise.scala 102:39]
    node _T_107 = bits(_T_99, 6, 0) @[Bitwise.scala 101:28]
    node _T_108 = shl(_T_107, 1) @[Bitwise.scala 101:47]
    node _T_109 = xor(_T_99, _T_108) @[Bitwise.scala 101:21]
    node _T_110 = shr(_T_106, 1) @[Bitwise.scala 102:21]
    node _T_111 = and(_T_110, _T_109) @[Bitwise.scala 102:31]
    node _T_112 = bits(_T_106, 6, 0) @[Bitwise.scala 102:46]
    node _T_113 = shl(_T_112, 1) @[Bitwise.scala 102:65]
    node _T_114 = not(_T_109) @[Bitwise.scala 102:77]
    node _T_115 = and(_T_113, _T_114) @[Bitwise.scala 102:75]
    node _T_116 = or(_T_111, _T_115) @[Bitwise.scala 102:39]
    node _T_117 = bits(others, 14, 8) @[Bitwise.scala 108:44]
    node _T_118 = bits(_T_117, 3, 0) @[Bitwise.scala 108:18]
    node _T_119 = bits(_T_118, 1, 0) @[Bitwise.scala 108:18]
    node _T_120 = bits(_T_119, 0, 0) @[Bitwise.scala 108:18]
    node _T_121 = bits(_T_119, 1, 1) @[Bitwise.scala 108:44]
    node _T_122 = cat(_T_120, _T_121) @[Cat.scala 29:58]
    node _T_123 = bits(_T_118, 3, 2) @[Bitwise.scala 108:44]
    node _T_124 = bits(_T_123, 0, 0) @[Bitwise.scala 108:18]
    node _T_125 = bits(_T_123, 1, 1) @[Bitwise.scala 108:44]
    node _T_126 = cat(_T_124, _T_125) @[Cat.scala 29:58]
    node _T_127 = cat(_T_122, _T_126) @[Cat.scala 29:58]
    node _T_128 = bits(_T_117, 6, 4) @[Bitwise.scala 108:44]
    node _T_129 = bits(_T_128, 1, 0) @[Bitwise.scala 108:18]
    node _T_130 = bits(_T_129, 0, 0) @[Bitwise.scala 108:18]
    node _T_131 = bits(_T_129, 1, 1) @[Bitwise.scala 108:44]
    node _T_132 = cat(_T_130, _T_131) @[Cat.scala 29:58]
    node _T_133 = bits(_T_128, 2, 2) @[Bitwise.scala 108:44]
    node _T_134 = cat(_T_132, _T_133) @[Cat.scala 29:58]
    node _T_135 = cat(_T_127, _T_134) @[Cat.scala 29:58]
    node _T_136 = cat(_T_116, _T_135) @[Cat.scala 29:58]
    node _T_137 = bits(_T_136, 0, 0) @[OneHot.scala 47:40]
    node _T_138 = bits(_T_136, 1, 1) @[OneHot.scala 47:40]
    node _T_139 = bits(_T_136, 2, 2) @[OneHot.scala 47:40]
    node _T_140 = bits(_T_136, 3, 3) @[OneHot.scala 47:40]
    node _T_141 = bits(_T_136, 4, 4) @[OneHot.scala 47:40]
    node _T_142 = bits(_T_136, 5, 5) @[OneHot.scala 47:40]
    node _T_143 = bits(_T_136, 6, 6) @[OneHot.scala 47:40]
    node _T_144 = bits(_T_136, 7, 7) @[OneHot.scala 47:40]
    node _T_145 = bits(_T_136, 8, 8) @[OneHot.scala 47:40]
    node _T_146 = bits(_T_136, 9, 9) @[OneHot.scala 47:40]
    node _T_147 = bits(_T_136, 10, 10) @[OneHot.scala 47:40]
    node _T_148 = bits(_T_136, 11, 11) @[OneHot.scala 47:40]
    node _T_149 = bits(_T_136, 12, 12) @[OneHot.scala 47:40]
    node _T_150 = bits(_T_136, 13, 13) @[OneHot.scala 47:40]
    node _T_151 = bits(_T_136, 14, 14) @[OneHot.scala 47:40]
    node _T_152 = mux(_T_150, UInt<4>("h0d"), UInt<4>("h0e")) @[Mux.scala 47:69]
    node _T_153 = mux(_T_149, UInt<4>("h0c"), _T_152) @[Mux.scala 47:69]
    node _T_154 = mux(_T_148, UInt<4>("h0b"), _T_153) @[Mux.scala 47:69]
    node _T_155 = mux(_T_147, UInt<4>("h0a"), _T_154) @[Mux.scala 47:69]
    node _T_156 = mux(_T_146, UInt<4>("h09"), _T_155) @[Mux.scala 47:69]
    node _T_157 = mux(_T_145, UInt<4>("h08"), _T_156) @[Mux.scala 47:69]
    node _T_158 = mux(_T_144, UInt<3>("h07"), _T_157) @[Mux.scala 47:69]
    node _T_159 = mux(_T_143, UInt<3>("h06"), _T_158) @[Mux.scala 47:69]
    node _T_160 = mux(_T_142, UInt<3>("h05"), _T_159) @[Mux.scala 47:69]
    node _T_161 = mux(_T_141, UInt<3>("h04"), _T_160) @[Mux.scala 47:69]
    node _T_162 = mux(_T_140, UInt<2>("h03"), _T_161) @[Mux.scala 47:69]
    node _T_163 = mux(_T_139, UInt<2>("h02"), _T_162) @[Mux.scala 47:69]
    node _T_164 = mux(_T_138, UInt<1>("h01"), _T_163) @[Mux.scala 47:69]
    node _T_165 = mux(_T_137, UInt<1>("h00"), _T_164) @[Mux.scala 47:69]
    node _T_166 = mux(_T_6, _T_86, _T_165) @[Conversion.scala 21:23]
    node _T_167 = eq(others, UInt<15>("h07fff")) @[Conversion.scala 21:132]
    node _T_168 = neq(others, UInt<1>("h00")) @[Conversion.scala 21:147]
    node _T_169 = not(_T_168) @[Conversion.scala 21:139]
    node _T_170 = or(_T_167, _T_169) @[Conversion.scala 21:137]
    node _T_171 = add(_T_166, _T_170) @[Conversion.scala 21:122]
    node _T_172 = tail(_T_171, 1) @[Conversion.scala 21:122]
    leading <= _T_172 @[Conversion.scala 21:17]
    node _T_173 = bits(others, 14, 14) @[Conversion.scala 22:29]
    node _T_174 = asSInt(leading) @[Conversion.scala 22:60]
    node _T_175 = sub(_T_174, asSInt(UInt<2>("h01"))) @[Conversion.scala 22:67]
    node _T_176 = tail(_T_175, 1) @[Conversion.scala 22:67]
    node _T_177 = asSInt(_T_176) @[Conversion.scala 22:67]
    node _T_178 = asSInt(leading) @[Conversion.scala 22:83]
    node _T_179 = sub(asSInt(UInt<1>("h00")), _T_178) @[Conversion.scala 22:74]
    node _T_180 = tail(_T_179, 1) @[Conversion.scala 22:74]
    node _T_181 = asSInt(_T_180) @[Conversion.scala 22:74]
    node _T_182 = mux(_T_173, _T_177, _T_181) @[Conversion.scala 22:22]
    regime <= _T_182 @[Conversion.scala 22:16]
    node _T_183 = sub(leading, UInt<1>("h01")) @[Conversion.scala 23:48]
    node _T_184 = tail(_T_183, 1) @[Conversion.scala 23:48]
    node _T_185 = dshl(others, _T_184) @[Conversion.scala 23:36]
    exponentFraction <= _T_185 @[Conversion.scala 23:26]
    node _T_186 = bits(exponentFraction, 12, 12) @[Conversion.scala 24:37]
    exponent <= _T_186 @[Conversion.scala 24:18]
    node _T_187 = bits(exponentFraction, 11, 0) @[Conversion.scala 25:46]
    node _T_188 = cat(UInt<1>("h01"), _T_187) @[Cat.scala 29:58]
    fraction <= _T_188 @[Conversion.scala 25:18]
    node _T_189 = bits(io.in, 15, 15) @[Conversion.scala 27:30]
    node _T_190 = not(_T_189) @[Conversion.scala 27:24]
    node _T_191 = bits(io.in, 14, 0) @[Conversion.scala 27:54]
    node _T_192 = neq(_T_191, UInt<1>("h00")) @[Conversion.scala 27:71]
    node _T_193 = not(_T_192) @[Conversion.scala 27:47]
    node _T_194 = and(_T_190, _T_193) @[Conversion.scala 27:45]
    io.out.zero <= _T_194 @[Conversion.scala 27:21]
    node _T_195 = bits(io.in, 15, 15) @[Conversion.scala 28:28]
    node _T_196 = bits(io.in, 14, 0) @[Conversion.scala 28:52]
    node _T_197 = neq(_T_196, UInt<1>("h00")) @[Conversion.scala 28:69]
    node _T_198 = not(_T_197) @[Conversion.scala 28:45]
    node _T_199 = and(_T_195, _T_198) @[Conversion.scala 28:43]
    io.out.nan <= _T_199 @[Conversion.scala 28:20]
    node _T_200 = bits(io.in, 15, 15) @[Conversion.scala 29:29]
    io.out.sign <= _T_200 @[Conversion.scala 29:21]
    node _T_201 = dshl(regime, UInt<1>("h01")) @[Conversion.scala 30:36]
    node _T_202 = cvt(exponent) @[Conversion.scala 30:99]
    node _T_203 = add(_T_201, _T_202) @[Conversion.scala 30:88]
    node _T_204 = tail(_T_203, 1) @[Conversion.scala 30:88]
    node _T_205 = asSInt(_T_204) @[Conversion.scala 30:88]
    io.out.exponent <= _T_205 @[Conversion.scala 30:25]
    io.out.fraction <= fraction @[Conversion.scala 31:25]
    
  module toPositUnpacked_7 : 
    input clock : Clock
    input reset : Reset
    output io : {flip in : UInt<16>, out : {zero : UInt<1>, nan : UInt<1>, sign : UInt<1>, exponent : SInt<6>, fraction : UInt<13>}}
    
    wire others : UInt<15> @[Conversion.scala 13:26]
    wire leading : UInt<5> @[Conversion.scala 14:27]
    wire regime : SInt<6> @[Conversion.scala 15:26]
    wire exponentFraction : UInt<13> @[Conversion.scala 16:36]
    wire exponent : UInt<1> @[Conversion.scala 17:28]
    wire fraction : UInt<13> @[Conversion.scala 18:28]
    node _T = bits(io.in, 14, 0) @[Conversion.scala 20:25]
    node _T_1 = bits(io.out.sign, 0, 0) @[Bitwise.scala 71:15]
    node _T_2 = mux(_T_1, UInt<15>("h07fff"), UInt<15>("h00")) @[Bitwise.scala 71:12]
    node _T_3 = xor(_T, _T_2) @[Conversion.scala 20:43]
    node _T_4 = add(_T_3, io.out.sign) @[Conversion.scala 20:78]
    node _T_5 = tail(_T_4, 1) @[Conversion.scala 20:78]
    others <= _T_5 @[Conversion.scala 20:16]
    node _T_6 = bits(others, 14, 14) @[Conversion.scala 21:30]
    node _T_7 = not(others) @[Conversion.scala 21:77]
    node _T_8 = bits(_T_7, 7, 0) @[Bitwise.scala 108:18]
    node _T_9 = shl(UInt<4>("h0f"), 4) @[Bitwise.scala 101:47]
    node _T_10 = xor(UInt<8>("h0ff"), _T_9) @[Bitwise.scala 101:21]
    node _T_11 = shr(_T_8, 4) @[Bitwise.scala 102:21]
    node _T_12 = and(_T_11, _T_10) @[Bitwise.scala 102:31]
    node _T_13 = bits(_T_8, 3, 0) @[Bitwise.scala 102:46]
    node _T_14 = shl(_T_13, 4) @[Bitwise.scala 102:65]
    node _T_15 = not(_T_10) @[Bitwise.scala 102:77]
    node _T_16 = and(_T_14, _T_15) @[Bitwise.scala 102:75]
    node _T_17 = or(_T_12, _T_16) @[Bitwise.scala 102:39]
    node _T_18 = bits(_T_10, 5, 0) @[Bitwise.scala 101:28]
    node _T_19 = shl(_T_18, 2) @[Bitwise.scala 101:47]
    node _T_20 = xor(_T_10, _T_19) @[Bitwise.scala 101:21]
    node _T_21 = shr(_T_17, 2) @[Bitwise.scala 102:21]
    node _T_22 = and(_T_21, _T_20) @[Bitwise.scala 102:31]
    node _T_23 = bits(_T_17, 5, 0) @[Bitwise.scala 102:46]
    node _T_24 = shl(_T_23, 2) @[Bitwise.scala 102:65]
    node _T_25 = not(_T_20) @[Bitwise.scala 102:77]
    node _T_26 = and(_T_24, _T_25) @[Bitwise.scala 102:75]
    node _T_27 = or(_T_22, _T_26) @[Bitwise.scala 102:39]
    node _T_28 = bits(_T_20, 6, 0) @[Bitwise.scala 101:28]
    node _T_29 = shl(_T_28, 1) @[Bitwise.scala 101:47]
    node _T_30 = xor(_T_20, _T_29) @[Bitwise.scala 101:21]
    node _T_31 = shr(_T_27, 1) @[Bitwise.scala 102:21]
    node _T_32 = and(_T_31, _T_30) @[Bitwise.scala 102:31]
    node _T_33 = bits(_T_27, 6, 0) @[Bitwise.scala 102:46]
    node _T_34 = shl(_T_33, 1) @[Bitwise.scala 102:65]
    node _T_35 = not(_T_30) @[Bitwise.scala 102:77]
    node _T_36 = and(_T_34, _T_35) @[Bitwise.scala 102:75]
    node _T_37 = or(_T_32, _T_36) @[Bitwise.scala 102:39]
    node _T_38 = bits(_T_7, 14, 8) @[Bitwise.scala 108:44]
    node _T_39 = bits(_T_38, 3, 0) @[Bitwise.scala 108:18]
    node _T_40 = bits(_T_39, 1, 0) @[Bitwise.scala 108:18]
    node _T_41 = bits(_T_40, 0, 0) @[Bitwise.scala 108:18]
    node _T_42 = bits(_T_40, 1, 1) @[Bitwise.scala 108:44]
    node _T_43 = cat(_T_41, _T_42) @[Cat.scala 29:58]
    node _T_44 = bits(_T_39, 3, 2) @[Bitwise.scala 108:44]
    node _T_45 = bits(_T_44, 0, 0) @[Bitwise.scala 108:18]
    node _T_46 = bits(_T_44, 1, 1) @[Bitwise.scala 108:44]
    node _T_47 = cat(_T_45, _T_46) @[Cat.scala 29:58]
    node _T_48 = cat(_T_43, _T_47) @[Cat.scala 29:58]
    node _T_49 = bits(_T_38, 6, 4) @[Bitwise.scala 108:44]
    node _T_50 = bits(_T_49, 1, 0) @[Bitwise.scala 108:18]
    node _T_51 = bits(_T_50, 0, 0) @[Bitwise.scala 108:18]
    node _T_52 = bits(_T_50, 1, 1) @[Bitwise.scala 108:44]
    node _T_53 = cat(_T_51, _T_52) @[Cat.scala 29:58]
    node _T_54 = bits(_T_49, 2, 2) @[Bitwise.scala 108:44]
    node _T_55 = cat(_T_53, _T_54) @[Cat.scala 29:58]
    node _T_56 = cat(_T_48, _T_55) @[Cat.scala 29:58]
    node _T_57 = cat(_T_37, _T_56) @[Cat.scala 29:58]
    node _T_58 = bits(_T_57, 0, 0) @[OneHot.scala 47:40]
    node _T_59 = bits(_T_57, 1, 1) @[OneHot.scala 47:40]
    node _T_60 = bits(_T_57, 2, 2) @[OneHot.scala 47:40]
    node _T_61 = bits(_T_57, 3, 3) @[OneHot.scala 47:40]
    node _T_62 = bits(_T_57, 4, 4) @[OneHot.scala 47:40]
    node _T_63 = bits(_T_57, 5, 5) @[OneHot.scala 47:40]
    node _T_64 = bits(_T_57, 6, 6) @[OneHot.scala 47:40]
    node _T_65 = bits(_T_57, 7, 7) @[OneHot.scala 47:40]
    node _T_66 = bits(_T_57, 8, 8) @[OneHot.scala 47:40]
    node _T_67 = bits(_T_57, 9, 9) @[OneHot.scala 47:40]
    node _T_68 = bits(_T_57, 10, 10) @[OneHot.scala 47:40]
    node _T_69 = bits(_T_57, 11, 11) @[OneHot.scala 47:40]
    node _T_70 = bits(_T_57, 12, 12) @[OneHot.scala 47:40]
    node _T_71 = bits(_T_57, 13, 13) @[OneHot.scala 47:40]
    node _T_72 = bits(_T_57, 14, 14) @[OneHot.scala 47:40]
    node _T_73 = mux(_T_71, UInt<4>("h0d"), UInt<4>("h0e")) @[Mux.scala 47:69]
    node _T_74 = mux(_T_70, UInt<4>("h0c"), _T_73) @[Mux.scala 47:69]
    node _T_75 = mux(_T_69, UInt<4>("h0b"), _T_74) @[Mux.scala 47:69]
    node _T_76 = mux(_T_68, UInt<4>("h0a"), _T_75) @[Mux.scala 47:69]
    node _T_77 = mux(_T_67, UInt<4>("h09"), _T_76) @[Mux.scala 47:69]
    node _T_78 = mux(_T_66, UInt<4>("h08"), _T_77) @[Mux.scala 47:69]
    node _T_79 = mux(_T_65, UInt<3>("h07"), _T_78) @[Mux.scala 47:69]
    node _T_80 = mux(_T_64, UInt<3>("h06"), _T_79) @[Mux.scala 47:69]
    node _T_81 = mux(_T_63, UInt<3>("h05"), _T_80) @[Mux.scala 47:69]
    node _T_82 = mux(_T_62, UInt<3>("h04"), _T_81) @[Mux.scala 47:69]
    node _T_83 = mux(_T_61, UInt<2>("h03"), _T_82) @[Mux.scala 47:69]
    node _T_84 = mux(_T_60, UInt<2>("h02"), _T_83) @[Mux.scala 47:69]
    node _T_85 = mux(_T_59, UInt<1>("h01"), _T_84) @[Mux.scala 47:69]
    node _T_86 = mux(_T_58, UInt<1>("h00"), _T_85) @[Mux.scala 47:69]
    node _T_87 = bits(others, 7, 0) @[Bitwise.scala 108:18]
    node _T_88 = shl(UInt<4>("h0f"), 4) @[Bitwise.scala 101:47]
    node _T_89 = xor(UInt<8>("h0ff"), _T_88) @[Bitwise.scala 101:21]
    node _T_90 = shr(_T_87, 4) @[Bitwise.scala 102:21]
    node _T_91 = and(_T_90, _T_89) @[Bitwise.scala 102:31]
    node _T_92 = bits(_T_87, 3, 0) @[Bitwise.scala 102:46]
    node _T_93 = shl(_T_92, 4) @[Bitwise.scala 102:65]
    node _T_94 = not(_T_89) @[Bitwise.scala 102:77]
    node _T_95 = and(_T_93, _T_94) @[Bitwise.scala 102:75]
    node _T_96 = or(_T_91, _T_95) @[Bitwise.scala 102:39]
    node _T_97 = bits(_T_89, 5, 0) @[Bitwise.scala 101:28]
    node _T_98 = shl(_T_97, 2) @[Bitwise.scala 101:47]
    node _T_99 = xor(_T_89, _T_98) @[Bitwise.scala 101:21]
    node _T_100 = shr(_T_96, 2) @[Bitwise.scala 102:21]
    node _T_101 = and(_T_100, _T_99) @[Bitwise.scala 102:31]
    node _T_102 = bits(_T_96, 5, 0) @[Bitwise.scala 102:46]
    node _T_103 = shl(_T_102, 2) @[Bitwise.scala 102:65]
    node _T_104 = not(_T_99) @[Bitwise.scala 102:77]
    node _T_105 = and(_T_103, _T_104) @[Bitwise.scala 102:75]
    node _T_106 = or(_T_101, _T_105) @[Bitwise.scala 102:39]
    node _T_107 = bits(_T_99, 6, 0) @[Bitwise.scala 101:28]
    node _T_108 = shl(_T_107, 1) @[Bitwise.scala 101:47]
    node _T_109 = xor(_T_99, _T_108) @[Bitwise.scala 101:21]
    node _T_110 = shr(_T_106, 1) @[Bitwise.scala 102:21]
    node _T_111 = and(_T_110, _T_109) @[Bitwise.scala 102:31]
    node _T_112 = bits(_T_106, 6, 0) @[Bitwise.scala 102:46]
    node _T_113 = shl(_T_112, 1) @[Bitwise.scala 102:65]
    node _T_114 = not(_T_109) @[Bitwise.scala 102:77]
    node _T_115 = and(_T_113, _T_114) @[Bitwise.scala 102:75]
    node _T_116 = or(_T_111, _T_115) @[Bitwise.scala 102:39]
    node _T_117 = bits(others, 14, 8) @[Bitwise.scala 108:44]
    node _T_118 = bits(_T_117, 3, 0) @[Bitwise.scala 108:18]
    node _T_119 = bits(_T_118, 1, 0) @[Bitwise.scala 108:18]
    node _T_120 = bits(_T_119, 0, 0) @[Bitwise.scala 108:18]
    node _T_121 = bits(_T_119, 1, 1) @[Bitwise.scala 108:44]
    node _T_122 = cat(_T_120, _T_121) @[Cat.scala 29:58]
    node _T_123 = bits(_T_118, 3, 2) @[Bitwise.scala 108:44]
    node _T_124 = bits(_T_123, 0, 0) @[Bitwise.scala 108:18]
    node _T_125 = bits(_T_123, 1, 1) @[Bitwise.scala 108:44]
    node _T_126 = cat(_T_124, _T_125) @[Cat.scala 29:58]
    node _T_127 = cat(_T_122, _T_126) @[Cat.scala 29:58]
    node _T_128 = bits(_T_117, 6, 4) @[Bitwise.scala 108:44]
    node _T_129 = bits(_T_128, 1, 0) @[Bitwise.scala 108:18]
    node _T_130 = bits(_T_129, 0, 0) @[Bitwise.scala 108:18]
    node _T_131 = bits(_T_129, 1, 1) @[Bitwise.scala 108:44]
    node _T_132 = cat(_T_130, _T_131) @[Cat.scala 29:58]
    node _T_133 = bits(_T_128, 2, 2) @[Bitwise.scala 108:44]
    node _T_134 = cat(_T_132, _T_133) @[Cat.scala 29:58]
    node _T_135 = cat(_T_127, _T_134) @[Cat.scala 29:58]
    node _T_136 = cat(_T_116, _T_135) @[Cat.scala 29:58]
    node _T_137 = bits(_T_136, 0, 0) @[OneHot.scala 47:40]
    node _T_138 = bits(_T_136, 1, 1) @[OneHot.scala 47:40]
    node _T_139 = bits(_T_136, 2, 2) @[OneHot.scala 47:40]
    node _T_140 = bits(_T_136, 3, 3) @[OneHot.scala 47:40]
    node _T_141 = bits(_T_136, 4, 4) @[OneHot.scala 47:40]
    node _T_142 = bits(_T_136, 5, 5) @[OneHot.scala 47:40]
    node _T_143 = bits(_T_136, 6, 6) @[OneHot.scala 47:40]
    node _T_144 = bits(_T_136, 7, 7) @[OneHot.scala 47:40]
    node _T_145 = bits(_T_136, 8, 8) @[OneHot.scala 47:40]
    node _T_146 = bits(_T_136, 9, 9) @[OneHot.scala 47:40]
    node _T_147 = bits(_T_136, 10, 10) @[OneHot.scala 47:40]
    node _T_148 = bits(_T_136, 11, 11) @[OneHot.scala 47:40]
    node _T_149 = bits(_T_136, 12, 12) @[OneHot.scala 47:40]
    node _T_150 = bits(_T_136, 13, 13) @[OneHot.scala 47:40]
    node _T_151 = bits(_T_136, 14, 14) @[OneHot.scala 47:40]
    node _T_152 = mux(_T_150, UInt<4>("h0d"), UInt<4>("h0e")) @[Mux.scala 47:69]
    node _T_153 = mux(_T_149, UInt<4>("h0c"), _T_152) @[Mux.scala 47:69]
    node _T_154 = mux(_T_148, UInt<4>("h0b"), _T_153) @[Mux.scala 47:69]
    node _T_155 = mux(_T_147, UInt<4>("h0a"), _T_154) @[Mux.scala 47:69]
    node _T_156 = mux(_T_146, UInt<4>("h09"), _T_155) @[Mux.scala 47:69]
    node _T_157 = mux(_T_145, UInt<4>("h08"), _T_156) @[Mux.scala 47:69]
    node _T_158 = mux(_T_144, UInt<3>("h07"), _T_157) @[Mux.scala 47:69]
    node _T_159 = mux(_T_143, UInt<3>("h06"), _T_158) @[Mux.scala 47:69]
    node _T_160 = mux(_T_142, UInt<3>("h05"), _T_159) @[Mux.scala 47:69]
    node _T_161 = mux(_T_141, UInt<3>("h04"), _T_160) @[Mux.scala 47:69]
    node _T_162 = mux(_T_140, UInt<2>("h03"), _T_161) @[Mux.scala 47:69]
    node _T_163 = mux(_T_139, UInt<2>("h02"), _T_162) @[Mux.scala 47:69]
    node _T_164 = mux(_T_138, UInt<1>("h01"), _T_163) @[Mux.scala 47:69]
    node _T_165 = mux(_T_137, UInt<1>("h00"), _T_164) @[Mux.scala 47:69]
    node _T_166 = mux(_T_6, _T_86, _T_165) @[Conversion.scala 21:23]
    node _T_167 = eq(others, UInt<15>("h07fff")) @[Conversion.scala 21:132]
    node _T_168 = neq(others, UInt<1>("h00")) @[Conversion.scala 21:147]
    node _T_169 = not(_T_168) @[Conversion.scala 21:139]
    node _T_170 = or(_T_167, _T_169) @[Conversion.scala 21:137]
    node _T_171 = add(_T_166, _T_170) @[Conversion.scala 21:122]
    node _T_172 = tail(_T_171, 1) @[Conversion.scala 21:122]
    leading <= _T_172 @[Conversion.scala 21:17]
    node _T_173 = bits(others, 14, 14) @[Conversion.scala 22:29]
    node _T_174 = asSInt(leading) @[Conversion.scala 22:60]
    node _T_175 = sub(_T_174, asSInt(UInt<2>("h01"))) @[Conversion.scala 22:67]
    node _T_176 = tail(_T_175, 1) @[Conversion.scala 22:67]
    node _T_177 = asSInt(_T_176) @[Conversion.scala 22:67]
    node _T_178 = asSInt(leading) @[Conversion.scala 22:83]
    node _T_179 = sub(asSInt(UInt<1>("h00")), _T_178) @[Conversion.scala 22:74]
    node _T_180 = tail(_T_179, 1) @[Conversion.scala 22:74]
    node _T_181 = asSInt(_T_180) @[Conversion.scala 22:74]
    node _T_182 = mux(_T_173, _T_177, _T_181) @[Conversion.scala 22:22]
    regime <= _T_182 @[Conversion.scala 22:16]
    node _T_183 = sub(leading, UInt<1>("h01")) @[Conversion.scala 23:48]
    node _T_184 = tail(_T_183, 1) @[Conversion.scala 23:48]
    node _T_185 = dshl(others, _T_184) @[Conversion.scala 23:36]
    exponentFraction <= _T_185 @[Conversion.scala 23:26]
    node _T_186 = bits(exponentFraction, 12, 12) @[Conversion.scala 24:37]
    exponent <= _T_186 @[Conversion.scala 24:18]
    node _T_187 = bits(exponentFraction, 11, 0) @[Conversion.scala 25:46]
    node _T_188 = cat(UInt<1>("h01"), _T_187) @[Cat.scala 29:58]
    fraction <= _T_188 @[Conversion.scala 25:18]
    node _T_189 = bits(io.in, 15, 15) @[Conversion.scala 27:30]
    node _T_190 = not(_T_189) @[Conversion.scala 27:24]
    node _T_191 = bits(io.in, 14, 0) @[Conversion.scala 27:54]
    node _T_192 = neq(_T_191, UInt<1>("h00")) @[Conversion.scala 27:71]
    node _T_193 = not(_T_192) @[Conversion.scala 27:47]
    node _T_194 = and(_T_190, _T_193) @[Conversion.scala 27:45]
    io.out.zero <= _T_194 @[Conversion.scala 27:21]
    node _T_195 = bits(io.in, 15, 15) @[Conversion.scala 28:28]
    node _T_196 = bits(io.in, 14, 0) @[Conversion.scala 28:52]
    node _T_197 = neq(_T_196, UInt<1>("h00")) @[Conversion.scala 28:69]
    node _T_198 = not(_T_197) @[Conversion.scala 28:45]
    node _T_199 = and(_T_195, _T_198) @[Conversion.scala 28:43]
    io.out.nan <= _T_199 @[Conversion.scala 28:20]
    node _T_200 = bits(io.in, 15, 15) @[Conversion.scala 29:29]
    io.out.sign <= _T_200 @[Conversion.scala 29:21]
    node _T_201 = dshl(regime, UInt<1>("h01")) @[Conversion.scala 30:36]
    node _T_202 = cvt(exponent) @[Conversion.scala 30:99]
    node _T_203 = add(_T_201, _T_202) @[Conversion.scala 30:88]
    node _T_204 = tail(_T_203, 1) @[Conversion.scala 30:88]
    node _T_205 = asSInt(_T_204) @[Conversion.scala 30:88]
    io.out.exponent <= _T_205 @[Conversion.scala 30:25]
    io.out.fraction <= fraction @[Conversion.scala 31:25]
    
  module linearPositArray : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip A_in : UInt<16>[4], flip B_in : UInt<16>[4], flip C_in : {zero : UInt<1>, nan : UInt<1>, number : SInt<129>}[4], flip prop_in : UInt<1>[4], C_out : {zero : UInt<1>, nan : UInt<1>, number : SInt<129>}[4]}
    
    inst array_0_0 of linearTile @[Array.scala 58:78]
    array_0_0.clock <= clock
    array_0_0.reset <= reset
    inst array_0_1 of linearTile_1 @[Array.scala 58:78]
    array_0_1.clock <= clock
    array_0_1.reset <= reset
    inst array_0_2 of linearTile_2 @[Array.scala 58:78]
    array_0_2.clock <= clock
    array_0_2.reset <= reset
    inst array_0_3 of linearTile_3 @[Array.scala 58:78]
    array_0_3.clock <= clock
    array_0_3.reset <= reset
    inst array_1_0 of linearTile_4 @[Array.scala 58:78]
    array_1_0.clock <= clock
    array_1_0.reset <= reset
    inst array_1_1 of linearTile_5 @[Array.scala 58:78]
    array_1_1.clock <= clock
    array_1_1.reset <= reset
    inst array_1_2 of linearTile_6 @[Array.scala 58:78]
    array_1_2.clock <= clock
    array_1_2.reset <= reset
    inst array_1_3 of linearTile_7 @[Array.scala 58:78]
    array_1_3.clock <= clock
    array_1_3.reset <= reset
    inst array_2_0 of linearTile_8 @[Array.scala 58:78]
    array_2_0.clock <= clock
    array_2_0.reset <= reset
    inst array_2_1 of linearTile_9 @[Array.scala 58:78]
    array_2_1.clock <= clock
    array_2_1.reset <= reset
    inst array_2_2 of linearTile_10 @[Array.scala 58:78]
    array_2_2.clock <= clock
    array_2_2.reset <= reset
    inst array_2_3 of linearTile_11 @[Array.scala 58:78]
    array_2_3.clock <= clock
    array_2_3.reset <= reset
    inst array_3_0 of linearTile_12 @[Array.scala 58:78]
    array_3_0.clock <= clock
    array_3_0.reset <= reset
    inst array_3_1 of linearTile_13 @[Array.scala 58:78]
    array_3_1.clock <= clock
    array_3_1.reset <= reset
    inst array_3_2 of linearTile_14 @[Array.scala 58:78]
    array_3_2.clock <= clock
    array_3_2.reset <= reset
    inst array_3_3 of linearTile_15 @[Array.scala 58:78]
    array_3_3.clock <= clock
    array_3_3.reset <= reset
    inst A_convert_0 of toPositUnpacked @[Array.scala 61:76]
    A_convert_0.clock <= clock
    A_convert_0.reset <= reset
    inst A_convert_1 of toPositUnpacked_1 @[Array.scala 61:76]
    A_convert_1.clock <= clock
    A_convert_1.reset <= reset
    inst A_convert_2 of toPositUnpacked_2 @[Array.scala 61:76]
    A_convert_2.clock <= clock
    A_convert_2.reset <= reset
    inst A_convert_3 of toPositUnpacked_3 @[Array.scala 61:76]
    A_convert_3.clock <= clock
    A_convert_3.reset <= reset
    inst B_convert_0 of toPositUnpacked_4 @[Array.scala 62:76]
    B_convert_0.clock <= clock
    B_convert_0.reset <= reset
    inst B_convert_1 of toPositUnpacked_5 @[Array.scala 62:76]
    B_convert_1.clock <= clock
    B_convert_1.reset <= reset
    inst B_convert_2 of toPositUnpacked_6 @[Array.scala 62:76]
    B_convert_2.clock <= clock
    B_convert_2.reset <= reset
    inst B_convert_3 of toPositUnpacked_7 @[Array.scala 62:76]
    B_convert_3.clock <= clock
    B_convert_3.reset <= reset
    A_convert_0.io.in <= io.A_in[0] @[Array.scala 65:44]
    array_0_0.io.A_in.fraction <= A_convert_0.io.out.fraction @[Array.scala 66:45]
    array_0_0.io.A_in.exponent <= A_convert_0.io.out.exponent @[Array.scala 66:45]
    array_0_0.io.A_in.sign <= A_convert_0.io.out.sign @[Array.scala 66:45]
    array_0_0.io.A_in.nan <= A_convert_0.io.out.nan @[Array.scala 66:45]
    array_0_0.io.A_in.zero <= A_convert_0.io.out.zero @[Array.scala 66:45]
    array_0_0.io.C_in.number <= io.C_in[0].number @[Array.scala 67:45]
    array_0_0.io.C_in.nan <= io.C_in[0].nan @[Array.scala 67:45]
    array_0_0.io.C_in.zero <= io.C_in[0].zero @[Array.scala 67:45]
    array_0_0.io.prop_in <= io.prop_in[0] @[Array.scala 68:48]
    array_1_0.io.A_in.fraction <= array_0_0.io.A_out.fraction @[Array.scala 70:53]
    array_1_0.io.A_in.exponent <= array_0_0.io.A_out.exponent @[Array.scala 70:53]
    array_1_0.io.A_in.sign <= array_0_0.io.A_out.sign @[Array.scala 70:53]
    array_1_0.io.A_in.nan <= array_0_0.io.A_out.nan @[Array.scala 70:53]
    array_1_0.io.A_in.zero <= array_0_0.io.A_out.zero @[Array.scala 70:53]
    array_1_0.io.C_in.number <= array_0_0.io.C_out.number @[Array.scala 71:53]
    array_1_0.io.C_in.nan <= array_0_0.io.C_out.nan @[Array.scala 71:53]
    array_1_0.io.C_in.zero <= array_0_0.io.C_out.zero @[Array.scala 71:53]
    array_1_0.io.prop_in <= array_0_0.io.prop_out @[Array.scala 72:56]
    array_2_0.io.A_in.fraction <= array_1_0.io.A_out.fraction @[Array.scala 70:53]
    array_2_0.io.A_in.exponent <= array_1_0.io.A_out.exponent @[Array.scala 70:53]
    array_2_0.io.A_in.sign <= array_1_0.io.A_out.sign @[Array.scala 70:53]
    array_2_0.io.A_in.nan <= array_1_0.io.A_out.nan @[Array.scala 70:53]
    array_2_0.io.A_in.zero <= array_1_0.io.A_out.zero @[Array.scala 70:53]
    array_2_0.io.C_in.number <= array_1_0.io.C_out.number @[Array.scala 71:53]
    array_2_0.io.C_in.nan <= array_1_0.io.C_out.nan @[Array.scala 71:53]
    array_2_0.io.C_in.zero <= array_1_0.io.C_out.zero @[Array.scala 71:53]
    array_2_0.io.prop_in <= array_1_0.io.prop_out @[Array.scala 72:56]
    array_3_0.io.A_in.fraction <= array_2_0.io.A_out.fraction @[Array.scala 70:53]
    array_3_0.io.A_in.exponent <= array_2_0.io.A_out.exponent @[Array.scala 70:53]
    array_3_0.io.A_in.sign <= array_2_0.io.A_out.sign @[Array.scala 70:53]
    array_3_0.io.A_in.nan <= array_2_0.io.A_out.nan @[Array.scala 70:53]
    array_3_0.io.A_in.zero <= array_2_0.io.A_out.zero @[Array.scala 70:53]
    array_3_0.io.C_in.number <= array_2_0.io.C_out.number @[Array.scala 71:53]
    array_3_0.io.C_in.nan <= array_2_0.io.C_out.nan @[Array.scala 71:53]
    array_3_0.io.C_in.zero <= array_2_0.io.C_out.zero @[Array.scala 71:53]
    array_3_0.io.prop_in <= array_2_0.io.prop_out @[Array.scala 72:56]
    io.C_out[0].number <= array_3_0.io.C_out.number @[Array.scala 74:37]
    io.C_out[0].nan <= array_3_0.io.C_out.nan @[Array.scala 74:37]
    io.C_out[0].zero <= array_3_0.io.C_out.zero @[Array.scala 74:37]
    A_convert_1.io.in <= io.A_in[1] @[Array.scala 65:44]
    array_0_1.io.A_in.fraction <= A_convert_1.io.out.fraction @[Array.scala 66:45]
    array_0_1.io.A_in.exponent <= A_convert_1.io.out.exponent @[Array.scala 66:45]
    array_0_1.io.A_in.sign <= A_convert_1.io.out.sign @[Array.scala 66:45]
    array_0_1.io.A_in.nan <= A_convert_1.io.out.nan @[Array.scala 66:45]
    array_0_1.io.A_in.zero <= A_convert_1.io.out.zero @[Array.scala 66:45]
    array_0_1.io.C_in.number <= io.C_in[1].number @[Array.scala 67:45]
    array_0_1.io.C_in.nan <= io.C_in[1].nan @[Array.scala 67:45]
    array_0_1.io.C_in.zero <= io.C_in[1].zero @[Array.scala 67:45]
    array_0_1.io.prop_in <= io.prop_in[1] @[Array.scala 68:48]
    array_1_1.io.A_in.fraction <= array_0_1.io.A_out.fraction @[Array.scala 70:53]
    array_1_1.io.A_in.exponent <= array_0_1.io.A_out.exponent @[Array.scala 70:53]
    array_1_1.io.A_in.sign <= array_0_1.io.A_out.sign @[Array.scala 70:53]
    array_1_1.io.A_in.nan <= array_0_1.io.A_out.nan @[Array.scala 70:53]
    array_1_1.io.A_in.zero <= array_0_1.io.A_out.zero @[Array.scala 70:53]
    array_1_1.io.C_in.number <= array_0_1.io.C_out.number @[Array.scala 71:53]
    array_1_1.io.C_in.nan <= array_0_1.io.C_out.nan @[Array.scala 71:53]
    array_1_1.io.C_in.zero <= array_0_1.io.C_out.zero @[Array.scala 71:53]
    array_1_1.io.prop_in <= array_0_1.io.prop_out @[Array.scala 72:56]
    array_2_1.io.A_in.fraction <= array_1_1.io.A_out.fraction @[Array.scala 70:53]
    array_2_1.io.A_in.exponent <= array_1_1.io.A_out.exponent @[Array.scala 70:53]
    array_2_1.io.A_in.sign <= array_1_1.io.A_out.sign @[Array.scala 70:53]
    array_2_1.io.A_in.nan <= array_1_1.io.A_out.nan @[Array.scala 70:53]
    array_2_1.io.A_in.zero <= array_1_1.io.A_out.zero @[Array.scala 70:53]
    array_2_1.io.C_in.number <= array_1_1.io.C_out.number @[Array.scala 71:53]
    array_2_1.io.C_in.nan <= array_1_1.io.C_out.nan @[Array.scala 71:53]
    array_2_1.io.C_in.zero <= array_1_1.io.C_out.zero @[Array.scala 71:53]
    array_2_1.io.prop_in <= array_1_1.io.prop_out @[Array.scala 72:56]
    array_3_1.io.A_in.fraction <= array_2_1.io.A_out.fraction @[Array.scala 70:53]
    array_3_1.io.A_in.exponent <= array_2_1.io.A_out.exponent @[Array.scala 70:53]
    array_3_1.io.A_in.sign <= array_2_1.io.A_out.sign @[Array.scala 70:53]
    array_3_1.io.A_in.nan <= array_2_1.io.A_out.nan @[Array.scala 70:53]
    array_3_1.io.A_in.zero <= array_2_1.io.A_out.zero @[Array.scala 70:53]
    array_3_1.io.C_in.number <= array_2_1.io.C_out.number @[Array.scala 71:53]
    array_3_1.io.C_in.nan <= array_2_1.io.C_out.nan @[Array.scala 71:53]
    array_3_1.io.C_in.zero <= array_2_1.io.C_out.zero @[Array.scala 71:53]
    array_3_1.io.prop_in <= array_2_1.io.prop_out @[Array.scala 72:56]
    io.C_out[1].number <= array_3_1.io.C_out.number @[Array.scala 74:37]
    io.C_out[1].nan <= array_3_1.io.C_out.nan @[Array.scala 74:37]
    io.C_out[1].zero <= array_3_1.io.C_out.zero @[Array.scala 74:37]
    A_convert_2.io.in <= io.A_in[2] @[Array.scala 65:44]
    array_0_2.io.A_in.fraction <= A_convert_2.io.out.fraction @[Array.scala 66:45]
    array_0_2.io.A_in.exponent <= A_convert_2.io.out.exponent @[Array.scala 66:45]
    array_0_2.io.A_in.sign <= A_convert_2.io.out.sign @[Array.scala 66:45]
    array_0_2.io.A_in.nan <= A_convert_2.io.out.nan @[Array.scala 66:45]
    array_0_2.io.A_in.zero <= A_convert_2.io.out.zero @[Array.scala 66:45]
    array_0_2.io.C_in.number <= io.C_in[2].number @[Array.scala 67:45]
    array_0_2.io.C_in.nan <= io.C_in[2].nan @[Array.scala 67:45]
    array_0_2.io.C_in.zero <= io.C_in[2].zero @[Array.scala 67:45]
    array_0_2.io.prop_in <= io.prop_in[2] @[Array.scala 68:48]
    array_1_2.io.A_in.fraction <= array_0_2.io.A_out.fraction @[Array.scala 70:53]
    array_1_2.io.A_in.exponent <= array_0_2.io.A_out.exponent @[Array.scala 70:53]
    array_1_2.io.A_in.sign <= array_0_2.io.A_out.sign @[Array.scala 70:53]
    array_1_2.io.A_in.nan <= array_0_2.io.A_out.nan @[Array.scala 70:53]
    array_1_2.io.A_in.zero <= array_0_2.io.A_out.zero @[Array.scala 70:53]
    array_1_2.io.C_in.number <= array_0_2.io.C_out.number @[Array.scala 71:53]
    array_1_2.io.C_in.nan <= array_0_2.io.C_out.nan @[Array.scala 71:53]
    array_1_2.io.C_in.zero <= array_0_2.io.C_out.zero @[Array.scala 71:53]
    array_1_2.io.prop_in <= array_0_2.io.prop_out @[Array.scala 72:56]
    array_2_2.io.A_in.fraction <= array_1_2.io.A_out.fraction @[Array.scala 70:53]
    array_2_2.io.A_in.exponent <= array_1_2.io.A_out.exponent @[Array.scala 70:53]
    array_2_2.io.A_in.sign <= array_1_2.io.A_out.sign @[Array.scala 70:53]
    array_2_2.io.A_in.nan <= array_1_2.io.A_out.nan @[Array.scala 70:53]
    array_2_2.io.A_in.zero <= array_1_2.io.A_out.zero @[Array.scala 70:53]
    array_2_2.io.C_in.number <= array_1_2.io.C_out.number @[Array.scala 71:53]
    array_2_2.io.C_in.nan <= array_1_2.io.C_out.nan @[Array.scala 71:53]
    array_2_2.io.C_in.zero <= array_1_2.io.C_out.zero @[Array.scala 71:53]
    array_2_2.io.prop_in <= array_1_2.io.prop_out @[Array.scala 72:56]
    array_3_2.io.A_in.fraction <= array_2_2.io.A_out.fraction @[Array.scala 70:53]
    array_3_2.io.A_in.exponent <= array_2_2.io.A_out.exponent @[Array.scala 70:53]
    array_3_2.io.A_in.sign <= array_2_2.io.A_out.sign @[Array.scala 70:53]
    array_3_2.io.A_in.nan <= array_2_2.io.A_out.nan @[Array.scala 70:53]
    array_3_2.io.A_in.zero <= array_2_2.io.A_out.zero @[Array.scala 70:53]
    array_3_2.io.C_in.number <= array_2_2.io.C_out.number @[Array.scala 71:53]
    array_3_2.io.C_in.nan <= array_2_2.io.C_out.nan @[Array.scala 71:53]
    array_3_2.io.C_in.zero <= array_2_2.io.C_out.zero @[Array.scala 71:53]
    array_3_2.io.prop_in <= array_2_2.io.prop_out @[Array.scala 72:56]
    io.C_out[2].number <= array_3_2.io.C_out.number @[Array.scala 74:37]
    io.C_out[2].nan <= array_3_2.io.C_out.nan @[Array.scala 74:37]
    io.C_out[2].zero <= array_3_2.io.C_out.zero @[Array.scala 74:37]
    A_convert_3.io.in <= io.A_in[3] @[Array.scala 65:44]
    array_0_3.io.A_in.fraction <= A_convert_3.io.out.fraction @[Array.scala 66:45]
    array_0_3.io.A_in.exponent <= A_convert_3.io.out.exponent @[Array.scala 66:45]
    array_0_3.io.A_in.sign <= A_convert_3.io.out.sign @[Array.scala 66:45]
    array_0_3.io.A_in.nan <= A_convert_3.io.out.nan @[Array.scala 66:45]
    array_0_3.io.A_in.zero <= A_convert_3.io.out.zero @[Array.scala 66:45]
    array_0_3.io.C_in.number <= io.C_in[3].number @[Array.scala 67:45]
    array_0_3.io.C_in.nan <= io.C_in[3].nan @[Array.scala 67:45]
    array_0_3.io.C_in.zero <= io.C_in[3].zero @[Array.scala 67:45]
    array_0_3.io.prop_in <= io.prop_in[3] @[Array.scala 68:48]
    array_1_3.io.A_in.fraction <= array_0_3.io.A_out.fraction @[Array.scala 70:53]
    array_1_3.io.A_in.exponent <= array_0_3.io.A_out.exponent @[Array.scala 70:53]
    array_1_3.io.A_in.sign <= array_0_3.io.A_out.sign @[Array.scala 70:53]
    array_1_3.io.A_in.nan <= array_0_3.io.A_out.nan @[Array.scala 70:53]
    array_1_3.io.A_in.zero <= array_0_3.io.A_out.zero @[Array.scala 70:53]
    array_1_3.io.C_in.number <= array_0_3.io.C_out.number @[Array.scala 71:53]
    array_1_3.io.C_in.nan <= array_0_3.io.C_out.nan @[Array.scala 71:53]
    array_1_3.io.C_in.zero <= array_0_3.io.C_out.zero @[Array.scala 71:53]
    array_1_3.io.prop_in <= array_0_3.io.prop_out @[Array.scala 72:56]
    array_2_3.io.A_in.fraction <= array_1_3.io.A_out.fraction @[Array.scala 70:53]
    array_2_3.io.A_in.exponent <= array_1_3.io.A_out.exponent @[Array.scala 70:53]
    array_2_3.io.A_in.sign <= array_1_3.io.A_out.sign @[Array.scala 70:53]
    array_2_3.io.A_in.nan <= array_1_3.io.A_out.nan @[Array.scala 70:53]
    array_2_3.io.A_in.zero <= array_1_3.io.A_out.zero @[Array.scala 70:53]
    array_2_3.io.C_in.number <= array_1_3.io.C_out.number @[Array.scala 71:53]
    array_2_3.io.C_in.nan <= array_1_3.io.C_out.nan @[Array.scala 71:53]
    array_2_3.io.C_in.zero <= array_1_3.io.C_out.zero @[Array.scala 71:53]
    array_2_3.io.prop_in <= array_1_3.io.prop_out @[Array.scala 72:56]
    array_3_3.io.A_in.fraction <= array_2_3.io.A_out.fraction @[Array.scala 70:53]
    array_3_3.io.A_in.exponent <= array_2_3.io.A_out.exponent @[Array.scala 70:53]
    array_3_3.io.A_in.sign <= array_2_3.io.A_out.sign @[Array.scala 70:53]
    array_3_3.io.A_in.nan <= array_2_3.io.A_out.nan @[Array.scala 70:53]
    array_3_3.io.A_in.zero <= array_2_3.io.A_out.zero @[Array.scala 70:53]
    array_3_3.io.C_in.number <= array_2_3.io.C_out.number @[Array.scala 71:53]
    array_3_3.io.C_in.nan <= array_2_3.io.C_out.nan @[Array.scala 71:53]
    array_3_3.io.C_in.zero <= array_2_3.io.C_out.zero @[Array.scala 71:53]
    array_3_3.io.prop_in <= array_2_3.io.prop_out @[Array.scala 72:56]
    io.C_out[3].number <= array_3_3.io.C_out.number @[Array.scala 74:37]
    io.C_out[3].nan <= array_3_3.io.C_out.nan @[Array.scala 74:37]
    io.C_out[3].zero <= array_3_3.io.C_out.zero @[Array.scala 74:37]
    B_convert_0.io.in <= io.B_in[0] @[Array.scala 78:44]
    array_0_0.io.B_in.fraction <= B_convert_0.io.out.fraction @[Array.scala 79:45]
    array_0_0.io.B_in.exponent <= B_convert_0.io.out.exponent @[Array.scala 79:45]
    array_0_0.io.B_in.sign <= B_convert_0.io.out.sign @[Array.scala 79:45]
    array_0_0.io.B_in.nan <= B_convert_0.io.out.nan @[Array.scala 79:45]
    array_0_0.io.B_in.zero <= B_convert_0.io.out.zero @[Array.scala 79:45]
    array_0_1.io.B_in.fraction <= array_0_0.io.B_out.fraction @[Array.scala 81:53]
    array_0_1.io.B_in.exponent <= array_0_0.io.B_out.exponent @[Array.scala 81:53]
    array_0_1.io.B_in.sign <= array_0_0.io.B_out.sign @[Array.scala 81:53]
    array_0_1.io.B_in.nan <= array_0_0.io.B_out.nan @[Array.scala 81:53]
    array_0_1.io.B_in.zero <= array_0_0.io.B_out.zero @[Array.scala 81:53]
    array_0_2.io.B_in.fraction <= array_0_1.io.B_out.fraction @[Array.scala 81:53]
    array_0_2.io.B_in.exponent <= array_0_1.io.B_out.exponent @[Array.scala 81:53]
    array_0_2.io.B_in.sign <= array_0_1.io.B_out.sign @[Array.scala 81:53]
    array_0_2.io.B_in.nan <= array_0_1.io.B_out.nan @[Array.scala 81:53]
    array_0_2.io.B_in.zero <= array_0_1.io.B_out.zero @[Array.scala 81:53]
    array_0_3.io.B_in.fraction <= array_0_2.io.B_out.fraction @[Array.scala 81:53]
    array_0_3.io.B_in.exponent <= array_0_2.io.B_out.exponent @[Array.scala 81:53]
    array_0_3.io.B_in.sign <= array_0_2.io.B_out.sign @[Array.scala 81:53]
    array_0_3.io.B_in.nan <= array_0_2.io.B_out.nan @[Array.scala 81:53]
    array_0_3.io.B_in.zero <= array_0_2.io.B_out.zero @[Array.scala 81:53]
    B_convert_1.io.in <= io.B_in[1] @[Array.scala 78:44]
    array_1_0.io.B_in.fraction <= B_convert_1.io.out.fraction @[Array.scala 79:45]
    array_1_0.io.B_in.exponent <= B_convert_1.io.out.exponent @[Array.scala 79:45]
    array_1_0.io.B_in.sign <= B_convert_1.io.out.sign @[Array.scala 79:45]
    array_1_0.io.B_in.nan <= B_convert_1.io.out.nan @[Array.scala 79:45]
    array_1_0.io.B_in.zero <= B_convert_1.io.out.zero @[Array.scala 79:45]
    array_1_1.io.B_in.fraction <= array_1_0.io.B_out.fraction @[Array.scala 81:53]
    array_1_1.io.B_in.exponent <= array_1_0.io.B_out.exponent @[Array.scala 81:53]
    array_1_1.io.B_in.sign <= array_1_0.io.B_out.sign @[Array.scala 81:53]
    array_1_1.io.B_in.nan <= array_1_0.io.B_out.nan @[Array.scala 81:53]
    array_1_1.io.B_in.zero <= array_1_0.io.B_out.zero @[Array.scala 81:53]
    array_1_2.io.B_in.fraction <= array_1_1.io.B_out.fraction @[Array.scala 81:53]
    array_1_2.io.B_in.exponent <= array_1_1.io.B_out.exponent @[Array.scala 81:53]
    array_1_2.io.B_in.sign <= array_1_1.io.B_out.sign @[Array.scala 81:53]
    array_1_2.io.B_in.nan <= array_1_1.io.B_out.nan @[Array.scala 81:53]
    array_1_2.io.B_in.zero <= array_1_1.io.B_out.zero @[Array.scala 81:53]
    array_1_3.io.B_in.fraction <= array_1_2.io.B_out.fraction @[Array.scala 81:53]
    array_1_3.io.B_in.exponent <= array_1_2.io.B_out.exponent @[Array.scala 81:53]
    array_1_3.io.B_in.sign <= array_1_2.io.B_out.sign @[Array.scala 81:53]
    array_1_3.io.B_in.nan <= array_1_2.io.B_out.nan @[Array.scala 81:53]
    array_1_3.io.B_in.zero <= array_1_2.io.B_out.zero @[Array.scala 81:53]
    B_convert_2.io.in <= io.B_in[2] @[Array.scala 78:44]
    array_2_0.io.B_in.fraction <= B_convert_2.io.out.fraction @[Array.scala 79:45]
    array_2_0.io.B_in.exponent <= B_convert_2.io.out.exponent @[Array.scala 79:45]
    array_2_0.io.B_in.sign <= B_convert_2.io.out.sign @[Array.scala 79:45]
    array_2_0.io.B_in.nan <= B_convert_2.io.out.nan @[Array.scala 79:45]
    array_2_0.io.B_in.zero <= B_convert_2.io.out.zero @[Array.scala 79:45]
    array_2_1.io.B_in.fraction <= array_2_0.io.B_out.fraction @[Array.scala 81:53]
    array_2_1.io.B_in.exponent <= array_2_0.io.B_out.exponent @[Array.scala 81:53]
    array_2_1.io.B_in.sign <= array_2_0.io.B_out.sign @[Array.scala 81:53]
    array_2_1.io.B_in.nan <= array_2_0.io.B_out.nan @[Array.scala 81:53]
    array_2_1.io.B_in.zero <= array_2_0.io.B_out.zero @[Array.scala 81:53]
    array_2_2.io.B_in.fraction <= array_2_1.io.B_out.fraction @[Array.scala 81:53]
    array_2_2.io.B_in.exponent <= array_2_1.io.B_out.exponent @[Array.scala 81:53]
    array_2_2.io.B_in.sign <= array_2_1.io.B_out.sign @[Array.scala 81:53]
    array_2_2.io.B_in.nan <= array_2_1.io.B_out.nan @[Array.scala 81:53]
    array_2_2.io.B_in.zero <= array_2_1.io.B_out.zero @[Array.scala 81:53]
    array_2_3.io.B_in.fraction <= array_2_2.io.B_out.fraction @[Array.scala 81:53]
    array_2_3.io.B_in.exponent <= array_2_2.io.B_out.exponent @[Array.scala 81:53]
    array_2_3.io.B_in.sign <= array_2_2.io.B_out.sign @[Array.scala 81:53]
    array_2_3.io.B_in.nan <= array_2_2.io.B_out.nan @[Array.scala 81:53]
    array_2_3.io.B_in.zero <= array_2_2.io.B_out.zero @[Array.scala 81:53]
    B_convert_3.io.in <= io.B_in[3] @[Array.scala 78:44]
    array_3_0.io.B_in.fraction <= B_convert_3.io.out.fraction @[Array.scala 79:45]
    array_3_0.io.B_in.exponent <= B_convert_3.io.out.exponent @[Array.scala 79:45]
    array_3_0.io.B_in.sign <= B_convert_3.io.out.sign @[Array.scala 79:45]
    array_3_0.io.B_in.nan <= B_convert_3.io.out.nan @[Array.scala 79:45]
    array_3_0.io.B_in.zero <= B_convert_3.io.out.zero @[Array.scala 79:45]
    array_3_1.io.B_in.fraction <= array_3_0.io.B_out.fraction @[Array.scala 81:53]
    array_3_1.io.B_in.exponent <= array_3_0.io.B_out.exponent @[Array.scala 81:53]
    array_3_1.io.B_in.sign <= array_3_0.io.B_out.sign @[Array.scala 81:53]
    array_3_1.io.B_in.nan <= array_3_0.io.B_out.nan @[Array.scala 81:53]
    array_3_1.io.B_in.zero <= array_3_0.io.B_out.zero @[Array.scala 81:53]
    array_3_2.io.B_in.fraction <= array_3_1.io.B_out.fraction @[Array.scala 81:53]
    array_3_2.io.B_in.exponent <= array_3_1.io.B_out.exponent @[Array.scala 81:53]
    array_3_2.io.B_in.sign <= array_3_1.io.B_out.sign @[Array.scala 81:53]
    array_3_2.io.B_in.nan <= array_3_1.io.B_out.nan @[Array.scala 81:53]
    array_3_2.io.B_in.zero <= array_3_1.io.B_out.zero @[Array.scala 81:53]
    array_3_3.io.B_in.fraction <= array_3_2.io.B_out.fraction @[Array.scala 81:53]
    array_3_3.io.B_in.exponent <= array_3_2.io.B_out.exponent @[Array.scala 81:53]
    array_3_3.io.B_in.sign <= array_3_2.io.B_out.sign @[Array.scala 81:53]
    array_3_3.io.B_in.nan <= array_3_2.io.B_out.nan @[Array.scala 81:53]
    array_3_3.io.B_in.zero <= array_3_2.io.B_out.zero @[Array.scala 81:53]
    
